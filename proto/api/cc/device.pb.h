// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef PROTOBUF_device_2eproto__INCLUDED
#define PROTOBUF_device_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_device_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNotifyAboutDeviceInfoReqImpl();
void InitDefaultsNotifyAboutDeviceInfoReq();
inline void InitDefaults() {
  InitDefaultsNotifyAboutDeviceInfoReq();
}
}  // namespace protobuf_device_2eproto
namespace zproto {
class NotifyAboutDeviceInfoReq;
class NotifyAboutDeviceInfoReqDefaultTypeInternal;
extern NotifyAboutDeviceInfoReqDefaultTypeInternal _NotifyAboutDeviceInfoReq_default_instance_;
}  // namespace zproto
namespace zproto {

// ===================================================================

class NotifyAboutDeviceInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.NotifyAboutDeviceInfoReq) */ {
 public:
  NotifyAboutDeviceInfoReq();
  virtual ~NotifyAboutDeviceInfoReq();

  NotifyAboutDeviceInfoReq(const NotifyAboutDeviceInfoReq& from);

  inline NotifyAboutDeviceInfoReq& operator=(const NotifyAboutDeviceInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyAboutDeviceInfoReq(NotifyAboutDeviceInfoReq&& from) noexcept
    : NotifyAboutDeviceInfoReq() {
    *this = ::std::move(from);
  }

  inline NotifyAboutDeviceInfoReq& operator=(NotifyAboutDeviceInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyAboutDeviceInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyAboutDeviceInfoReq* internal_default_instance() {
    return reinterpret_cast<const NotifyAboutDeviceInfoReq*>(
               &_NotifyAboutDeviceInfoReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NotifyAboutDeviceInfoReq* other);
  friend void swap(NotifyAboutDeviceInfoReq& a, NotifyAboutDeviceInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyAboutDeviceInfoReq* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyAboutDeviceInfoReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyAboutDeviceInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string preferred_languages = 1;
  int preferred_languages_size() const;
  void clear_preferred_languages();
  static const int kPreferredLanguagesFieldNumber = 1;
  const ::std::string& preferred_languages(int index) const;
  ::std::string* mutable_preferred_languages(int index);
  void set_preferred_languages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_preferred_languages(int index, ::std::string&& value);
  #endif
  void set_preferred_languages(int index, const char* value);
  void set_preferred_languages(int index, const char* value, size_t size);
  ::std::string* add_preferred_languages();
  void add_preferred_languages(const ::std::string& value);
  #if LANG_CXX11
  void add_preferred_languages(::std::string&& value);
  #endif
  void add_preferred_languages(const char* value);
  void add_preferred_languages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& preferred_languages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_preferred_languages();

  // string time_zone = 2;
  void clear_time_zone();
  static const int kTimeZoneFieldNumber = 2;
  const ::std::string& time_zone() const;
  void set_time_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_time_zone(::std::string&& value);
  #endif
  void set_time_zone(const char* value);
  void set_time_zone(const char* value, size_t size);
  ::std::string* mutable_time_zone();
  ::std::string* release_time_zone();
  void set_allocated_time_zone(::std::string* time_zone);

  // @@protoc_insertion_point(class_scope:zproto.NotifyAboutDeviceInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> preferred_languages_;
  ::google::protobuf::internal::ArenaStringPtr time_zone_;
  mutable int _cached_size_;
  friend struct ::protobuf_device_2eproto::TableStruct;
  friend void ::protobuf_device_2eproto::InitDefaultsNotifyAboutDeviceInfoReqImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotifyAboutDeviceInfoReq

// repeated string preferred_languages = 1;
inline int NotifyAboutDeviceInfoReq::preferred_languages_size() const {
  return preferred_languages_.size();
}
inline void NotifyAboutDeviceInfoReq::clear_preferred_languages() {
  preferred_languages_.Clear();
}
inline const ::std::string& NotifyAboutDeviceInfoReq::preferred_languages(int index) const {
  // @@protoc_insertion_point(field_get:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  return preferred_languages_.Get(index);
}
inline ::std::string* NotifyAboutDeviceInfoReq::mutable_preferred_languages(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  return preferred_languages_.Mutable(index);
}
inline void NotifyAboutDeviceInfoReq::set_preferred_languages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  preferred_languages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NotifyAboutDeviceInfoReq::set_preferred_languages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  preferred_languages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NotifyAboutDeviceInfoReq::set_preferred_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  preferred_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
}
inline void NotifyAboutDeviceInfoReq::set_preferred_languages(int index, const char* value, size_t size) {
  preferred_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
}
inline ::std::string* NotifyAboutDeviceInfoReq::add_preferred_languages() {
  // @@protoc_insertion_point(field_add_mutable:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  return preferred_languages_.Add();
}
inline void NotifyAboutDeviceInfoReq::add_preferred_languages(const ::std::string& value) {
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
}
#if LANG_CXX11
inline void NotifyAboutDeviceInfoReq::add_preferred_languages(::std::string&& value) {
  preferred_languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
}
#endif
inline void NotifyAboutDeviceInfoReq::add_preferred_languages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  preferred_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
}
inline void NotifyAboutDeviceInfoReq::add_preferred_languages(const char* value, size_t size) {
  preferred_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NotifyAboutDeviceInfoReq::preferred_languages() const {
  // @@protoc_insertion_point(field_list:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  return preferred_languages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NotifyAboutDeviceInfoReq::mutable_preferred_languages() {
  // @@protoc_insertion_point(field_mutable_list:zproto.NotifyAboutDeviceInfoReq.preferred_languages)
  return &preferred_languages_;
}

// string time_zone = 2;
inline void NotifyAboutDeviceInfoReq::clear_time_zone() {
  time_zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyAboutDeviceInfoReq::time_zone() const {
  // @@protoc_insertion_point(field_get:zproto.NotifyAboutDeviceInfoReq.time_zone)
  return time_zone_.GetNoArena();
}
inline void NotifyAboutDeviceInfoReq::set_time_zone(const ::std::string& value) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.NotifyAboutDeviceInfoReq.time_zone)
}
#if LANG_CXX11
inline void NotifyAboutDeviceInfoReq::set_time_zone(::std::string&& value) {
  
  time_zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.NotifyAboutDeviceInfoReq.time_zone)
}
#endif
inline void NotifyAboutDeviceInfoReq::set_time_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.NotifyAboutDeviceInfoReq.time_zone)
}
inline void NotifyAboutDeviceInfoReq::set_time_zone(const char* value, size_t size) {
  
  time_zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.NotifyAboutDeviceInfoReq.time_zone)
}
inline ::std::string* NotifyAboutDeviceInfoReq::mutable_time_zone() {
  
  // @@protoc_insertion_point(field_mutable:zproto.NotifyAboutDeviceInfoReq.time_zone)
  return time_zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyAboutDeviceInfoReq::release_time_zone() {
  // @@protoc_insertion_point(field_release:zproto.NotifyAboutDeviceInfoReq.time_zone)
  
  return time_zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyAboutDeviceInfoReq::set_allocated_time_zone(::std::string* time_zone) {
  if (time_zone != NULL) {
    
  } else {
    
  }
  time_zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_zone);
  // @@protoc_insertion_point(field_set_allocated:zproto.NotifyAboutDeviceInfoReq.time_zone)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_2eproto__INCLUDED
