// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats.proto

#ifndef PROTOBUF_stats_2eproto__INCLUDED
#define PROTOBUF_stats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_stats_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEventRecordImpl();
void InitDefaultsEventRecord();
void InitDefaultsEventImpl();
void InitDefaultsEvent();
void InitDefaultsUntypedEventImpl();
void InitDefaultsUntypedEvent();
void InitDefaultsContentViewChangedImpl();
void InitDefaultsContentViewChanged();
void InitDefaultsAppVisibleChangedImpl();
void InitDefaultsAppVisibleChanged();
void InitDefaultsStoreEventsReqImpl();
void InitDefaultsStoreEventsReq();
inline void InitDefaults() {
  InitDefaultsEventRecord();
  InitDefaultsEvent();
  InitDefaultsUntypedEvent();
  InitDefaultsContentViewChanged();
  InitDefaultsAppVisibleChanged();
  InitDefaultsStoreEventsReq();
}
}  // namespace protobuf_stats_2eproto
namespace zproto {
class AppVisibleChanged;
class AppVisibleChangedDefaultTypeInternal;
extern AppVisibleChangedDefaultTypeInternal _AppVisibleChanged_default_instance_;
class ContentViewChanged;
class ContentViewChangedDefaultTypeInternal;
extern ContentViewChangedDefaultTypeInternal _ContentViewChanged_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventRecord;
class EventRecordDefaultTypeInternal;
extern EventRecordDefaultTypeInternal _EventRecord_default_instance_;
class StoreEventsReq;
class StoreEventsReqDefaultTypeInternal;
extern StoreEventsReqDefaultTypeInternal _StoreEventsReq_default_instance_;
class UntypedEvent;
class UntypedEventDefaultTypeInternal;
extern UntypedEventDefaultTypeInternal _UntypedEvent_default_instance_;
}  // namespace zproto
namespace zproto {

// ===================================================================

class EventRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EventRecord) */ {
 public:
  EventRecord();
  virtual ~EventRecord();

  EventRecord(const EventRecord& from);

  inline EventRecord& operator=(const EventRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventRecord(EventRecord&& from) noexcept
    : EventRecord() {
    *this = ::std::move(from);
  }

  inline EventRecord& operator=(EventRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventRecord* internal_default_instance() {
    return reinterpret_cast<const EventRecord*>(
               &_EventRecord_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EventRecord* other);
  friend void swap(EventRecord& a, EventRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventRecord* New() const PROTOBUF_FINAL { return New(NULL); }

  EventRecord* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EventRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.Event event = 2;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const ::zproto::Event& event() const;
  ::zproto::Event* release_event();
  ::zproto::Event* mutable_event();
  void set_allocated_event(::zproto::Event* event);

  // int64 date = 1;
  void clear_date();
  static const int kDateFieldNumber = 1;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.EventRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Event* event_;
  ::google::protobuf::int64 date_;
  mutable int _cached_size_;
  friend struct ::protobuf_stats_2eproto::TableStruct;
  friend void ::protobuf_stats_2eproto::InitDefaultsEventRecordImpl();
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zproto.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_stats_2eproto::TableStruct;
  friend void ::protobuf_stats_2eproto::InitDefaultsEventImpl();
};
// -------------------------------------------------------------------

class UntypedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.UntypedEvent) */ {
 public:
  UntypedEvent();
  virtual ~UntypedEvent();

  UntypedEvent(const UntypedEvent& from);

  inline UntypedEvent& operator=(const UntypedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UntypedEvent(UntypedEvent&& from) noexcept
    : UntypedEvent() {
    *this = ::std::move(from);
  }

  inline UntypedEvent& operator=(UntypedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UntypedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UntypedEvent* internal_default_instance() {
    return reinterpret_cast<const UntypedEvent*>(
               &_UntypedEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(UntypedEvent* other);
  friend void swap(UntypedEvent& a, UntypedEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UntypedEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  UntypedEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UntypedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string event_type = 1;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 1;
  const ::std::string& event_type() const;
  void set_event_type(const ::std::string& value);
  #if LANG_CXX11
  void set_event_type(::std::string&& value);
  #endif
  void set_event_type(const char* value);
  void set_event_type(const char* value, size_t size);
  ::std::string* mutable_event_type();
  ::std::string* release_event_type();
  void set_allocated_event_type(::std::string* event_type);

  // .zproto.RawArrayValue params = 2;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 2;
  const ::zproto::RawArrayValue& params() const;
  ::zproto::RawArrayValue* release_params();
  ::zproto::RawArrayValue* mutable_params();
  void set_allocated_params(::zproto::RawArrayValue* params);

  // @@protoc_insertion_point(class_scope:zproto.UntypedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr event_type_;
  ::zproto::RawArrayValue* params_;
  mutable int _cached_size_;
  friend struct ::protobuf_stats_2eproto::TableStruct;
  friend void ::protobuf_stats_2eproto::InitDefaultsUntypedEventImpl();
};
// -------------------------------------------------------------------

class ContentViewChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ContentViewChanged) */ {
 public:
  ContentViewChanged();
  virtual ~ContentViewChanged();

  ContentViewChanged(const ContentViewChanged& from);

  inline ContentViewChanged& operator=(const ContentViewChanged& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContentViewChanged(ContentViewChanged&& from) noexcept
    : ContentViewChanged() {
    *this = ::std::move(from);
  }

  inline ContentViewChanged& operator=(ContentViewChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentViewChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentViewChanged* internal_default_instance() {
    return reinterpret_cast<const ContentViewChanged*>(
               &_ContentViewChanged_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ContentViewChanged* other);
  friend void swap(ContentViewChanged& a, ContentViewChanged& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContentViewChanged* New() const PROTOBUF_FINAL { return New(NULL); }

  ContentViewChanged* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ContentViewChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content_type = 1;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 1;
  const ::std::string& content_type() const;
  void set_content_type(const ::std::string& value);
  #if LANG_CXX11
  void set_content_type(::std::string&& value);
  #endif
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  ::std::string* mutable_content_type();
  ::std::string* release_content_type();
  void set_allocated_content_type(::std::string* content_type);

  // string content_id = 2;
  void clear_content_id();
  static const int kContentIdFieldNumber = 2;
  const ::std::string& content_id() const;
  void set_content_id(const ::std::string& value);
  #if LANG_CXX11
  void set_content_id(::std::string&& value);
  #endif
  void set_content_id(const char* value);
  void set_content_id(const char* value, size_t size);
  ::std::string* mutable_content_id();
  ::std::string* release_content_id();
  void set_allocated_content_id(::std::string* content_id);

  // .zproto.RawArrayValue params = 4;
  bool has_params() const;
  void clear_params();
  static const int kParamsFieldNumber = 4;
  const ::zproto::RawArrayValue& params() const;
  ::zproto::RawArrayValue* release_params();
  ::zproto::RawArrayValue* mutable_params();
  void set_allocated_params(::zproto::RawArrayValue* params);

  // bool visible = 3;
  void clear_visible();
  static const int kVisibleFieldNumber = 3;
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:zproto.ContentViewChanged)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_type_;
  ::google::protobuf::internal::ArenaStringPtr content_id_;
  ::zproto::RawArrayValue* params_;
  bool visible_;
  mutable int _cached_size_;
  friend struct ::protobuf_stats_2eproto::TableStruct;
  friend void ::protobuf_stats_2eproto::InitDefaultsContentViewChangedImpl();
};
// -------------------------------------------------------------------

class AppVisibleChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.AppVisibleChanged) */ {
 public:
  AppVisibleChanged();
  virtual ~AppVisibleChanged();

  AppVisibleChanged(const AppVisibleChanged& from);

  inline AppVisibleChanged& operator=(const AppVisibleChanged& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppVisibleChanged(AppVisibleChanged&& from) noexcept
    : AppVisibleChanged() {
    *this = ::std::move(from);
  }

  inline AppVisibleChanged& operator=(AppVisibleChanged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppVisibleChanged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppVisibleChanged* internal_default_instance() {
    return reinterpret_cast<const AppVisibleChanged*>(
               &_AppVisibleChanged_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AppVisibleChanged* other);
  friend void swap(AppVisibleChanged& a, AppVisibleChanged& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppVisibleChanged* New() const PROTOBUF_FINAL { return New(NULL); }

  AppVisibleChanged* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppVisibleChanged* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool visible = 1;
  void clear_visible();
  static const int kVisibleFieldNumber = 1;
  bool visible() const;
  void set_visible(bool value);

  // @@protoc_insertion_point(class_scope:zproto.AppVisibleChanged)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool visible_;
  mutable int _cached_size_;
  friend struct ::protobuf_stats_2eproto::TableStruct;
  friend void ::protobuf_stats_2eproto::InitDefaultsAppVisibleChangedImpl();
};
// -------------------------------------------------------------------

class StoreEventsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.StoreEventsReq) */ {
 public:
  StoreEventsReq();
  virtual ~StoreEventsReq();

  StoreEventsReq(const StoreEventsReq& from);

  inline StoreEventsReq& operator=(const StoreEventsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StoreEventsReq(StoreEventsReq&& from) noexcept
    : StoreEventsReq() {
    *this = ::std::move(from);
  }

  inline StoreEventsReq& operator=(StoreEventsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreEventsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StoreEventsReq* internal_default_instance() {
    return reinterpret_cast<const StoreEventsReq*>(
               &_StoreEventsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(StoreEventsReq* other);
  friend void swap(StoreEventsReq& a, StoreEventsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StoreEventsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  StoreEventsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StoreEventsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.Event events = 1;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 1;
  const ::zproto::Event& events(int index) const;
  ::zproto::Event* mutable_events(int index);
  ::zproto::Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::zproto::Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::zproto::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:zproto.StoreEventsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::Event > events_;
  mutable int _cached_size_;
  friend struct ::protobuf_stats_2eproto::TableStruct;
  friend void ::protobuf_stats_2eproto::InitDefaultsStoreEventsReqImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventRecord

// int64 date = 1;
inline void EventRecord::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EventRecord::date() const {
  // @@protoc_insertion_point(field_get:zproto.EventRecord.date)
  return date_;
}
inline void EventRecord::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.EventRecord.date)
}

// .zproto.Event event = 2;
inline bool EventRecord::has_event() const {
  return this != internal_default_instance() && event_ != NULL;
}
inline void EventRecord::clear_event() {
  if (GetArenaNoVirtual() == NULL && event_ != NULL) {
    delete event_;
  }
  event_ = NULL;
}
inline const ::zproto::Event& EventRecord::event() const {
  const ::zproto::Event* p = event_;
  // @@protoc_insertion_point(field_get:zproto.EventRecord.event)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Event*>(
      &::zproto::_Event_default_instance_);
}
inline ::zproto::Event* EventRecord::release_event() {
  // @@protoc_insertion_point(field_release:zproto.EventRecord.event)
  
  ::zproto::Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::zproto::Event* EventRecord::mutable_event() {
  
  if (event_ == NULL) {
    event_ = new ::zproto::Event;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EventRecord.event)
  return event_;
}
inline void EventRecord::set_allocated_event(::zproto::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:zproto.EventRecord.event)
}

// -------------------------------------------------------------------

// Event

// -------------------------------------------------------------------

// UntypedEvent

// string event_type = 1;
inline void UntypedEvent::clear_event_type() {
  event_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UntypedEvent::event_type() const {
  // @@protoc_insertion_point(field_get:zproto.UntypedEvent.event_type)
  return event_type_.GetNoArena();
}
inline void UntypedEvent::set_event_type(const ::std::string& value) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UntypedEvent.event_type)
}
#if LANG_CXX11
inline void UntypedEvent::set_event_type(::std::string&& value) {
  
  event_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UntypedEvent.event_type)
}
#endif
inline void UntypedEvent::set_event_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UntypedEvent.event_type)
}
inline void UntypedEvent::set_event_type(const char* value, size_t size) {
  
  event_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UntypedEvent.event_type)
}
inline ::std::string* UntypedEvent::mutable_event_type() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UntypedEvent.event_type)
  return event_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UntypedEvent::release_event_type() {
  // @@protoc_insertion_point(field_release:zproto.UntypedEvent.event_type)
  
  return event_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UntypedEvent::set_allocated_event_type(::std::string* event_type) {
  if (event_type != NULL) {
    
  } else {
    
  }
  event_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_type);
  // @@protoc_insertion_point(field_set_allocated:zproto.UntypedEvent.event_type)
}

// .zproto.RawArrayValue params = 2;
inline bool UntypedEvent::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline const ::zproto::RawArrayValue& UntypedEvent::params() const {
  const ::zproto::RawArrayValue* p = params_;
  // @@protoc_insertion_point(field_get:zproto.UntypedEvent.params)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::RawArrayValue*>(
      &::zproto::_RawArrayValue_default_instance_);
}
inline ::zproto::RawArrayValue* UntypedEvent::release_params() {
  // @@protoc_insertion_point(field_release:zproto.UntypedEvent.params)
  
  ::zproto::RawArrayValue* temp = params_;
  params_ = NULL;
  return temp;
}
inline ::zproto::RawArrayValue* UntypedEvent::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::zproto::RawArrayValue;
  }
  // @@protoc_insertion_point(field_mutable:zproto.UntypedEvent.params)
  return params_;
}
inline void UntypedEvent::set_allocated_params(::zproto::RawArrayValue* params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(params_);
  }
  if (params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:zproto.UntypedEvent.params)
}

// -------------------------------------------------------------------

// ContentViewChanged

// string content_type = 1;
inline void ContentViewChanged::clear_content_type() {
  content_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentViewChanged::content_type() const {
  // @@protoc_insertion_point(field_get:zproto.ContentViewChanged.content_type)
  return content_type_.GetNoArena();
}
inline void ContentViewChanged::set_content_type(const ::std::string& value) {
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ContentViewChanged.content_type)
}
#if LANG_CXX11
inline void ContentViewChanged::set_content_type(::std::string&& value) {
  
  content_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.ContentViewChanged.content_type)
}
#endif
inline void ContentViewChanged::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ContentViewChanged.content_type)
}
inline void ContentViewChanged::set_content_type(const char* value, size_t size) {
  
  content_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ContentViewChanged.content_type)
}
inline ::std::string* ContentViewChanged::mutable_content_type() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ContentViewChanged.content_type)
  return content_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentViewChanged::release_content_type() {
  // @@protoc_insertion_point(field_release:zproto.ContentViewChanged.content_type)
  
  return content_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentViewChanged::set_allocated_content_type(::std::string* content_type) {
  if (content_type != NULL) {
    
  } else {
    
  }
  content_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_type);
  // @@protoc_insertion_point(field_set_allocated:zproto.ContentViewChanged.content_type)
}

// string content_id = 2;
inline void ContentViewChanged::clear_content_id() {
  content_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContentViewChanged::content_id() const {
  // @@protoc_insertion_point(field_get:zproto.ContentViewChanged.content_id)
  return content_id_.GetNoArena();
}
inline void ContentViewChanged::set_content_id(const ::std::string& value) {
  
  content_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ContentViewChanged.content_id)
}
#if LANG_CXX11
inline void ContentViewChanged::set_content_id(::std::string&& value) {
  
  content_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.ContentViewChanged.content_id)
}
#endif
inline void ContentViewChanged::set_content_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ContentViewChanged.content_id)
}
inline void ContentViewChanged::set_content_id(const char* value, size_t size) {
  
  content_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ContentViewChanged.content_id)
}
inline ::std::string* ContentViewChanged::mutable_content_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ContentViewChanged.content_id)
  return content_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContentViewChanged::release_content_id() {
  // @@protoc_insertion_point(field_release:zproto.ContentViewChanged.content_id)
  
  return content_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContentViewChanged::set_allocated_content_id(::std::string* content_id) {
  if (content_id != NULL) {
    
  } else {
    
  }
  content_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.ContentViewChanged.content_id)
}

// bool visible = 3;
inline void ContentViewChanged::clear_visible() {
  visible_ = false;
}
inline bool ContentViewChanged::visible() const {
  // @@protoc_insertion_point(field_get:zproto.ContentViewChanged.visible)
  return visible_;
}
inline void ContentViewChanged::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:zproto.ContentViewChanged.visible)
}

// .zproto.RawArrayValue params = 4;
inline bool ContentViewChanged::has_params() const {
  return this != internal_default_instance() && params_ != NULL;
}
inline const ::zproto::RawArrayValue& ContentViewChanged::params() const {
  const ::zproto::RawArrayValue* p = params_;
  // @@protoc_insertion_point(field_get:zproto.ContentViewChanged.params)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::RawArrayValue*>(
      &::zproto::_RawArrayValue_default_instance_);
}
inline ::zproto::RawArrayValue* ContentViewChanged::release_params() {
  // @@protoc_insertion_point(field_release:zproto.ContentViewChanged.params)
  
  ::zproto::RawArrayValue* temp = params_;
  params_ = NULL;
  return temp;
}
inline ::zproto::RawArrayValue* ContentViewChanged::mutable_params() {
  
  if (params_ == NULL) {
    params_ = new ::zproto::RawArrayValue;
  }
  // @@protoc_insertion_point(field_mutable:zproto.ContentViewChanged.params)
  return params_;
}
inline void ContentViewChanged::set_allocated_params(::zproto::RawArrayValue* params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(params_);
  }
  if (params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:zproto.ContentViewChanged.params)
}

// -------------------------------------------------------------------

// AppVisibleChanged

// bool visible = 1;
inline void AppVisibleChanged::clear_visible() {
  visible_ = false;
}
inline bool AppVisibleChanged::visible() const {
  // @@protoc_insertion_point(field_get:zproto.AppVisibleChanged.visible)
  return visible_;
}
inline void AppVisibleChanged::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:zproto.AppVisibleChanged.visible)
}

// -------------------------------------------------------------------

// StoreEventsReq

// repeated .zproto.Event events = 1;
inline int StoreEventsReq::events_size() const {
  return events_.size();
}
inline void StoreEventsReq::clear_events() {
  events_.Clear();
}
inline const ::zproto::Event& StoreEventsReq::events(int index) const {
  // @@protoc_insertion_point(field_get:zproto.StoreEventsReq.events)
  return events_.Get(index);
}
inline ::zproto::Event* StoreEventsReq::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.StoreEventsReq.events)
  return events_.Mutable(index);
}
inline ::zproto::Event* StoreEventsReq::add_events() {
  // @@protoc_insertion_point(field_add:zproto.StoreEventsReq.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::Event >*
StoreEventsReq::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:zproto.StoreEventsReq.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::Event >&
StoreEventsReq::events() const {
  // @@protoc_insertion_point(field_list:zproto.StoreEventsReq.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stats_2eproto__INCLUDED
