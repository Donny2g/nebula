// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groups.proto

#ifndef PROTOBUF_groups_2eproto__INCLUDED
#define PROTOBUF_groups_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "misc.pb.h"
#include "peers.pb.h"
#include "files.pb.h"
#include "users.pb.h"
#include "group_base.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_groups_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[46];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLoadFullGroupsReqImpl();
void InitDefaultsLoadFullGroupsReq();
void InitDefaultsLoadFullGroupsRspImpl();
void InitDefaultsLoadFullGroupsRsp();
void InitDefaultsLoadMembersReqImpl();
void InitDefaultsLoadMembersReq();
void InitDefaultsLoadMembersRspImpl();
void InitDefaultsLoadMembersRsp();
void InitDefaultsGroupTitleChangedNotifyImpl();
void InitDefaultsGroupTitleChangedNotify();
void InitDefaultsGroupAvatarChangedNotifyImpl();
void InitDefaultsGroupAvatarChangedNotify();
void InitDefaultsGroupTopicChangedNotifyImpl();
void InitDefaultsGroupTopicChangedNotify();
void InitDefaultsGroupAboutChangedNotifyImpl();
void InitDefaultsGroupAboutChangedNotify();
void InitDefaultsGroupOwnerChangedNotifyImpl();
void InitDefaultsGroupOwnerChangedNotify();
void InitDefaultsGroupDeletedNotifyImpl();
void InitDefaultsGroupDeletedNotify();
void InitDefaultsGroupPermissionsChangedNotifyImpl();
void InitDefaultsGroupPermissionsChangedNotify();
void InitDefaultsGroupFullPermissionsChangedNotifyImpl();
void InitDefaultsGroupFullPermissionsChangedNotify();
void InitDefaultsGroupMemberChangedNotifyImpl();
void InitDefaultsGroupMemberChangedNotify();
void InitDefaultsGroupMembersBecameAsyncNotifyImpl();
void InitDefaultsGroupMembersBecameAsyncNotify();
void InitDefaultsGroupMembersUpdatedNotifyImpl();
void InitDefaultsGroupMembersUpdatedNotify();
void InitDefaultsGroupMemberDiffNotifyImpl();
void InitDefaultsGroupMemberDiffNotify();
void InitDefaultsGroupMembersCountChangedNotifyImpl();
void InitDefaultsGroupMembersCountChangedNotify();
void InitDefaultsGroupMemberAdminChangedNotifyImpl();
void InitDefaultsGroupMemberAdminChangedNotify();
void InitDefaultsCreateGroupReqImpl();
void InitDefaultsCreateGroupReq();
void InitDefaultsCreateGroupRspImpl();
void InitDefaultsCreateGroupRsp();
void InitDefaultsEditGroupTitleReqImpl();
void InitDefaultsEditGroupTitleReq();
void InitDefaultsEditGroupAvatarReqImpl();
void InitDefaultsEditGroupAvatarReq();
void InitDefaultsEditGroupAvatarRspImpl();
void InitDefaultsEditGroupAvatarRsp();
void InitDefaultsRemoveGroupAvatarReqImpl();
void InitDefaultsRemoveGroupAvatarReq();
void InitDefaultsEditGroupShortNameReqImpl();
void InitDefaultsEditGroupShortNameReq();
void InitDefaultsEditGroupTopicReqImpl();
void InitDefaultsEditGroupTopicReq();
void InitDefaultsEditGroupAboutReqImpl();
void InitDefaultsEditGroupAboutReq();
void InitDefaultsInviteUserReqImpl();
void InitDefaultsInviteUserReq();
void InitDefaultsLeaveGroupReqImpl();
void InitDefaultsLeaveGroupReq();
void InitDefaultsLeaveAndDeleteReqImpl();
void InitDefaultsLeaveAndDeleteReq();
void InitDefaultsKickUserReqImpl();
void InitDefaultsKickUserReq();
void InitDefaultsJoinGroupByPeerReqImpl();
void InitDefaultsJoinGroupByPeerReq();
void InitDefaultsMakeUserAdminReqImpl();
void InitDefaultsMakeUserAdminReq();
void InitDefaultsDismissUserAdminReqImpl();
void InitDefaultsDismissUserAdminReq();
void InitDefaultsTransferOwnershipReqImpl();
void InitDefaultsTransferOwnershipReq();
void InitDefaultsAdminSettingsImpl();
void InitDefaultsAdminSettings();
void InitDefaultsLoadAdminSettingsReqImpl();
void InitDefaultsLoadAdminSettingsReq();
void InitDefaultsLoadAdminSettingsRspImpl();
void InitDefaultsLoadAdminSettingsRsp();
void InitDefaultsSaveAdminSettingsReqImpl();
void InitDefaultsSaveAdminSettingsReq();
void InitDefaultsDeleteGroupReqImpl();
void InitDefaultsDeleteGroupReq();
void InitDefaultsShareHistoryReqImpl();
void InitDefaultsShareHistoryReq();
void InitDefaultsInviteUrlRspImpl();
void InitDefaultsInviteUrlRsp();
void InitDefaultsGetGroupInviteUrlReqImpl();
void InitDefaultsGetGroupInviteUrlReq();
void InitDefaultsRevokeInviteUrlReqImpl();
void InitDefaultsRevokeInviteUrlReq();
void InitDefaultsJoinGroupReqImpl();
void InitDefaultsJoinGroupReq();
void InitDefaultsJoinGroupRspImpl();
void InitDefaultsJoinGroupRsp();
inline void InitDefaults() {
  InitDefaultsLoadFullGroupsReq();
  InitDefaultsLoadFullGroupsRsp();
  InitDefaultsLoadMembersReq();
  InitDefaultsLoadMembersRsp();
  InitDefaultsGroupTitleChangedNotify();
  InitDefaultsGroupAvatarChangedNotify();
  InitDefaultsGroupTopicChangedNotify();
  InitDefaultsGroupAboutChangedNotify();
  InitDefaultsGroupOwnerChangedNotify();
  InitDefaultsGroupDeletedNotify();
  InitDefaultsGroupPermissionsChangedNotify();
  InitDefaultsGroupFullPermissionsChangedNotify();
  InitDefaultsGroupMemberChangedNotify();
  InitDefaultsGroupMembersBecameAsyncNotify();
  InitDefaultsGroupMembersUpdatedNotify();
  InitDefaultsGroupMemberDiffNotify();
  InitDefaultsGroupMembersCountChangedNotify();
  InitDefaultsGroupMemberAdminChangedNotify();
  InitDefaultsCreateGroupReq();
  InitDefaultsCreateGroupRsp();
  InitDefaultsEditGroupTitleReq();
  InitDefaultsEditGroupAvatarReq();
  InitDefaultsEditGroupAvatarRsp();
  InitDefaultsRemoveGroupAvatarReq();
  InitDefaultsEditGroupShortNameReq();
  InitDefaultsEditGroupTopicReq();
  InitDefaultsEditGroupAboutReq();
  InitDefaultsInviteUserReq();
  InitDefaultsLeaveGroupReq();
  InitDefaultsLeaveAndDeleteReq();
  InitDefaultsKickUserReq();
  InitDefaultsJoinGroupByPeerReq();
  InitDefaultsMakeUserAdminReq();
  InitDefaultsDismissUserAdminReq();
  InitDefaultsTransferOwnershipReq();
  InitDefaultsAdminSettings();
  InitDefaultsLoadAdminSettingsReq();
  InitDefaultsLoadAdminSettingsRsp();
  InitDefaultsSaveAdminSettingsReq();
  InitDefaultsDeleteGroupReq();
  InitDefaultsShareHistoryReq();
  InitDefaultsInviteUrlRsp();
  InitDefaultsGetGroupInviteUrlReq();
  InitDefaultsRevokeInviteUrlReq();
  InitDefaultsJoinGroupReq();
  InitDefaultsJoinGroupRsp();
}
}  // namespace protobuf_groups_2eproto
namespace zproto {
class AdminSettings;
class AdminSettingsDefaultTypeInternal;
extern AdminSettingsDefaultTypeInternal _AdminSettings_default_instance_;
class CreateGroupReq;
class CreateGroupReqDefaultTypeInternal;
extern CreateGroupReqDefaultTypeInternal _CreateGroupReq_default_instance_;
class CreateGroupRsp;
class CreateGroupRspDefaultTypeInternal;
extern CreateGroupRspDefaultTypeInternal _CreateGroupRsp_default_instance_;
class DeleteGroupReq;
class DeleteGroupReqDefaultTypeInternal;
extern DeleteGroupReqDefaultTypeInternal _DeleteGroupReq_default_instance_;
class DismissUserAdminReq;
class DismissUserAdminReqDefaultTypeInternal;
extern DismissUserAdminReqDefaultTypeInternal _DismissUserAdminReq_default_instance_;
class EditGroupAboutReq;
class EditGroupAboutReqDefaultTypeInternal;
extern EditGroupAboutReqDefaultTypeInternal _EditGroupAboutReq_default_instance_;
class EditGroupAvatarReq;
class EditGroupAvatarReqDefaultTypeInternal;
extern EditGroupAvatarReqDefaultTypeInternal _EditGroupAvatarReq_default_instance_;
class EditGroupAvatarRsp;
class EditGroupAvatarRspDefaultTypeInternal;
extern EditGroupAvatarRspDefaultTypeInternal _EditGroupAvatarRsp_default_instance_;
class EditGroupShortNameReq;
class EditGroupShortNameReqDefaultTypeInternal;
extern EditGroupShortNameReqDefaultTypeInternal _EditGroupShortNameReq_default_instance_;
class EditGroupTitleReq;
class EditGroupTitleReqDefaultTypeInternal;
extern EditGroupTitleReqDefaultTypeInternal _EditGroupTitleReq_default_instance_;
class EditGroupTopicReq;
class EditGroupTopicReqDefaultTypeInternal;
extern EditGroupTopicReqDefaultTypeInternal _EditGroupTopicReq_default_instance_;
class GetGroupInviteUrlReq;
class GetGroupInviteUrlReqDefaultTypeInternal;
extern GetGroupInviteUrlReqDefaultTypeInternal _GetGroupInviteUrlReq_default_instance_;
class GroupAboutChangedNotify;
class GroupAboutChangedNotifyDefaultTypeInternal;
extern GroupAboutChangedNotifyDefaultTypeInternal _GroupAboutChangedNotify_default_instance_;
class GroupAvatarChangedNotify;
class GroupAvatarChangedNotifyDefaultTypeInternal;
extern GroupAvatarChangedNotifyDefaultTypeInternal _GroupAvatarChangedNotify_default_instance_;
class GroupDeletedNotify;
class GroupDeletedNotifyDefaultTypeInternal;
extern GroupDeletedNotifyDefaultTypeInternal _GroupDeletedNotify_default_instance_;
class GroupFullPermissionsChangedNotify;
class GroupFullPermissionsChangedNotifyDefaultTypeInternal;
extern GroupFullPermissionsChangedNotifyDefaultTypeInternal _GroupFullPermissionsChangedNotify_default_instance_;
class GroupMemberAdminChangedNotify;
class GroupMemberAdminChangedNotifyDefaultTypeInternal;
extern GroupMemberAdminChangedNotifyDefaultTypeInternal _GroupMemberAdminChangedNotify_default_instance_;
class GroupMemberChangedNotify;
class GroupMemberChangedNotifyDefaultTypeInternal;
extern GroupMemberChangedNotifyDefaultTypeInternal _GroupMemberChangedNotify_default_instance_;
class GroupMemberDiffNotify;
class GroupMemberDiffNotifyDefaultTypeInternal;
extern GroupMemberDiffNotifyDefaultTypeInternal _GroupMemberDiffNotify_default_instance_;
class GroupMembersBecameAsyncNotify;
class GroupMembersBecameAsyncNotifyDefaultTypeInternal;
extern GroupMembersBecameAsyncNotifyDefaultTypeInternal _GroupMembersBecameAsyncNotify_default_instance_;
class GroupMembersCountChangedNotify;
class GroupMembersCountChangedNotifyDefaultTypeInternal;
extern GroupMembersCountChangedNotifyDefaultTypeInternal _GroupMembersCountChangedNotify_default_instance_;
class GroupMembersUpdatedNotify;
class GroupMembersUpdatedNotifyDefaultTypeInternal;
extern GroupMembersUpdatedNotifyDefaultTypeInternal _GroupMembersUpdatedNotify_default_instance_;
class GroupOwnerChangedNotify;
class GroupOwnerChangedNotifyDefaultTypeInternal;
extern GroupOwnerChangedNotifyDefaultTypeInternal _GroupOwnerChangedNotify_default_instance_;
class GroupPermissionsChangedNotify;
class GroupPermissionsChangedNotifyDefaultTypeInternal;
extern GroupPermissionsChangedNotifyDefaultTypeInternal _GroupPermissionsChangedNotify_default_instance_;
class GroupTitleChangedNotify;
class GroupTitleChangedNotifyDefaultTypeInternal;
extern GroupTitleChangedNotifyDefaultTypeInternal _GroupTitleChangedNotify_default_instance_;
class GroupTopicChangedNotify;
class GroupTopicChangedNotifyDefaultTypeInternal;
extern GroupTopicChangedNotifyDefaultTypeInternal _GroupTopicChangedNotify_default_instance_;
class InviteUrlRsp;
class InviteUrlRspDefaultTypeInternal;
extern InviteUrlRspDefaultTypeInternal _InviteUrlRsp_default_instance_;
class InviteUserReq;
class InviteUserReqDefaultTypeInternal;
extern InviteUserReqDefaultTypeInternal _InviteUserReq_default_instance_;
class JoinGroupByPeerReq;
class JoinGroupByPeerReqDefaultTypeInternal;
extern JoinGroupByPeerReqDefaultTypeInternal _JoinGroupByPeerReq_default_instance_;
class JoinGroupReq;
class JoinGroupReqDefaultTypeInternal;
extern JoinGroupReqDefaultTypeInternal _JoinGroupReq_default_instance_;
class JoinGroupRsp;
class JoinGroupRspDefaultTypeInternal;
extern JoinGroupRspDefaultTypeInternal _JoinGroupRsp_default_instance_;
class KickUserReq;
class KickUserReqDefaultTypeInternal;
extern KickUserReqDefaultTypeInternal _KickUserReq_default_instance_;
class LeaveAndDeleteReq;
class LeaveAndDeleteReqDefaultTypeInternal;
extern LeaveAndDeleteReqDefaultTypeInternal _LeaveAndDeleteReq_default_instance_;
class LeaveGroupReq;
class LeaveGroupReqDefaultTypeInternal;
extern LeaveGroupReqDefaultTypeInternal _LeaveGroupReq_default_instance_;
class LoadAdminSettingsReq;
class LoadAdminSettingsReqDefaultTypeInternal;
extern LoadAdminSettingsReqDefaultTypeInternal _LoadAdminSettingsReq_default_instance_;
class LoadAdminSettingsRsp;
class LoadAdminSettingsRspDefaultTypeInternal;
extern LoadAdminSettingsRspDefaultTypeInternal _LoadAdminSettingsRsp_default_instance_;
class LoadFullGroupsReq;
class LoadFullGroupsReqDefaultTypeInternal;
extern LoadFullGroupsReqDefaultTypeInternal _LoadFullGroupsReq_default_instance_;
class LoadFullGroupsRsp;
class LoadFullGroupsRspDefaultTypeInternal;
extern LoadFullGroupsRspDefaultTypeInternal _LoadFullGroupsRsp_default_instance_;
class LoadMembersReq;
class LoadMembersReqDefaultTypeInternal;
extern LoadMembersReqDefaultTypeInternal _LoadMembersReq_default_instance_;
class LoadMembersRsp;
class LoadMembersRspDefaultTypeInternal;
extern LoadMembersRspDefaultTypeInternal _LoadMembersRsp_default_instance_;
class MakeUserAdminReq;
class MakeUserAdminReqDefaultTypeInternal;
extern MakeUserAdminReqDefaultTypeInternal _MakeUserAdminReq_default_instance_;
class RemoveGroupAvatarReq;
class RemoveGroupAvatarReqDefaultTypeInternal;
extern RemoveGroupAvatarReqDefaultTypeInternal _RemoveGroupAvatarReq_default_instance_;
class RevokeInviteUrlReq;
class RevokeInviteUrlReqDefaultTypeInternal;
extern RevokeInviteUrlReqDefaultTypeInternal _RevokeInviteUrlReq_default_instance_;
class SaveAdminSettingsReq;
class SaveAdminSettingsReqDefaultTypeInternal;
extern SaveAdminSettingsReqDefaultTypeInternal _SaveAdminSettingsReq_default_instance_;
class ShareHistoryReq;
class ShareHistoryReqDefaultTypeInternal;
extern ShareHistoryReqDefaultTypeInternal _ShareHistoryReq_default_instance_;
class TransferOwnershipReq;
class TransferOwnershipReqDefaultTypeInternal;
extern TransferOwnershipReqDefaultTypeInternal _TransferOwnershipReq_default_instance_;
}  // namespace zproto
namespace zproto {

// ===================================================================

class LoadFullGroupsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadFullGroupsReq) */ {
 public:
  LoadFullGroupsReq();
  virtual ~LoadFullGroupsReq();

  LoadFullGroupsReq(const LoadFullGroupsReq& from);

  inline LoadFullGroupsReq& operator=(const LoadFullGroupsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadFullGroupsReq(LoadFullGroupsReq&& from) noexcept
    : LoadFullGroupsReq() {
    *this = ::std::move(from);
  }

  inline LoadFullGroupsReq& operator=(LoadFullGroupsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadFullGroupsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadFullGroupsReq* internal_default_instance() {
    return reinterpret_cast<const LoadFullGroupsReq*>(
               &_LoadFullGroupsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LoadFullGroupsReq* other);
  friend void swap(LoadFullGroupsReq& a, LoadFullGroupsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadFullGroupsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadFullGroupsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadFullGroupsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.GroupOutPeer groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::zproto::GroupOutPeer& groups(int index) const;
  ::zproto::GroupOutPeer* mutable_groups(int index);
  ::zproto::GroupOutPeer* add_groups();
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >&
      groups() const;

  // @@protoc_insertion_point(class_scope:zproto.LoadFullGroupsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer > groups_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadFullGroupsReqImpl();
};
// -------------------------------------------------------------------

class LoadFullGroupsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadFullGroupsRsp) */ {
 public:
  LoadFullGroupsRsp();
  virtual ~LoadFullGroupsRsp();

  LoadFullGroupsRsp(const LoadFullGroupsRsp& from);

  inline LoadFullGroupsRsp& operator=(const LoadFullGroupsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadFullGroupsRsp(LoadFullGroupsRsp&& from) noexcept
    : LoadFullGroupsRsp() {
    *this = ::std::move(from);
  }

  inline LoadFullGroupsRsp& operator=(LoadFullGroupsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadFullGroupsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadFullGroupsRsp* internal_default_instance() {
    return reinterpret_cast<const LoadFullGroupsRsp*>(
               &_LoadFullGroupsRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LoadFullGroupsRsp* other);
  friend void swap(LoadFullGroupsRsp& a, LoadFullGroupsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadFullGroupsRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadFullGroupsRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadFullGroupsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.GroupFull groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::zproto::GroupFull& groups(int index) const;
  ::zproto::GroupFull* mutable_groups(int index);
  ::zproto::GroupFull* add_groups();
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupFull >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::zproto::GroupFull >&
      groups() const;

  // @@protoc_insertion_point(class_scope:zproto.LoadFullGroupsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupFull > groups_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadFullGroupsRspImpl();
};
// -------------------------------------------------------------------

class LoadMembersReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadMembersReq) */ {
 public:
  LoadMembersReq();
  virtual ~LoadMembersReq();

  LoadMembersReq(const LoadMembersReq& from);

  inline LoadMembersReq& operator=(const LoadMembersReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadMembersReq(LoadMembersReq&& from) noexcept
    : LoadMembersReq() {
    *this = ::std::move(from);
  }

  inline LoadMembersReq& operator=(LoadMembersReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadMembersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadMembersReq* internal_default_instance() {
    return reinterpret_cast<const LoadMembersReq*>(
               &_LoadMembersReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LoadMembersReq* other);
  friend void swap(LoadMembersReq& a, LoadMembersReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadMembersReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadMembersReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadMembersReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes next = 3;
  void clear_next();
  static const int kNextFieldNumber = 3;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // .zproto.GroupOutPeer group = 1;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::zproto::GroupOutPeer& group() const;
  ::zproto::GroupOutPeer* release_group();
  ::zproto::GroupOutPeer* mutable_group();
  void set_allocated_group(::zproto::GroupOutPeer* group);

  // int32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.LoadMembersReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  ::zproto::GroupOutPeer* group_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadMembersReqImpl();
};
// -------------------------------------------------------------------

class LoadMembersRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadMembersRsp) */ {
 public:
  LoadMembersRsp();
  virtual ~LoadMembersRsp();

  LoadMembersRsp(const LoadMembersRsp& from);

  inline LoadMembersRsp& operator=(const LoadMembersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadMembersRsp(LoadMembersRsp&& from) noexcept
    : LoadMembersRsp() {
    *this = ::std::move(from);
  }

  inline LoadMembersRsp& operator=(LoadMembersRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadMembersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadMembersRsp* internal_default_instance() {
    return reinterpret_cast<const LoadMembersRsp*>(
               &_LoadMembersRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(LoadMembersRsp* other);
  friend void swap(LoadMembersRsp& a, LoadMembersRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadMembersRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadMembersRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadMembersRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.Member members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  const ::zproto::Member& members(int index) const;
  ::zproto::Member* mutable_members(int index);
  ::zproto::Member* add_members();
  ::google::protobuf::RepeatedPtrField< ::zproto::Member >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::zproto::Member >&
      members() const;

  // repeated .zproto.UserOutPeer users = 2;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 2;
  const ::zproto::UserOutPeer& users(int index) const;
  ::zproto::UserOutPeer* mutable_users(int index);
  ::zproto::UserOutPeer* add_users();
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
      users() const;

  // bytes next = 3;
  void clear_next();
  static const int kNextFieldNumber = 3;
  const ::std::string& next() const;
  void set_next(const ::std::string& value);
  #if LANG_CXX11
  void set_next(::std::string&& value);
  #endif
  void set_next(const char* value);
  void set_next(const void* value, size_t size);
  ::std::string* mutable_next();
  ::std::string* release_next();
  void set_allocated_next(::std::string* next);

  // @@protoc_insertion_point(class_scope:zproto.LoadMembersRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::Member > members_;
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer > users_;
  ::google::protobuf::internal::ArenaStringPtr next_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadMembersRspImpl();
};
// -------------------------------------------------------------------

class GroupTitleChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupTitleChangedNotify) */ {
 public:
  GroupTitleChangedNotify();
  virtual ~GroupTitleChangedNotify();

  GroupTitleChangedNotify(const GroupTitleChangedNotify& from);

  inline GroupTitleChangedNotify& operator=(const GroupTitleChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupTitleChangedNotify(GroupTitleChangedNotify&& from) noexcept
    : GroupTitleChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupTitleChangedNotify& operator=(GroupTitleChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupTitleChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupTitleChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupTitleChangedNotify*>(
               &_GroupTitleChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(GroupTitleChangedNotify* other);
  friend void swap(GroupTitleChangedNotify& a, GroupTitleChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupTitleChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupTitleChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupTitleChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:zproto.GroupTitleChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupTitleChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupAvatarChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupAvatarChangedNotify) */ {
 public:
  GroupAvatarChangedNotify();
  virtual ~GroupAvatarChangedNotify();

  GroupAvatarChangedNotify(const GroupAvatarChangedNotify& from);

  inline GroupAvatarChangedNotify& operator=(const GroupAvatarChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupAvatarChangedNotify(GroupAvatarChangedNotify&& from) noexcept
    : GroupAvatarChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupAvatarChangedNotify& operator=(GroupAvatarChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAvatarChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupAvatarChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupAvatarChangedNotify*>(
               &_GroupAvatarChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GroupAvatarChangedNotify* other);
  friend void swap(GroupAvatarChangedNotify& a, GroupAvatarChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupAvatarChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupAvatarChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupAvatarChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // .zproto.Avatar avatar = 2;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 2;
  const ::zproto::Avatar& avatar() const;
  ::zproto::Avatar* release_avatar();
  ::zproto::Avatar* mutable_avatar();
  void set_allocated_avatar(::zproto::Avatar* avatar);

  // @@protoc_insertion_point(class_scope:zproto.GroupAvatarChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::zproto::Avatar* avatar_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupAvatarChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupTopicChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupTopicChangedNotify) */ {
 public:
  GroupTopicChangedNotify();
  virtual ~GroupTopicChangedNotify();

  GroupTopicChangedNotify(const GroupTopicChangedNotify& from);

  inline GroupTopicChangedNotify& operator=(const GroupTopicChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupTopicChangedNotify(GroupTopicChangedNotify&& from) noexcept
    : GroupTopicChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupTopicChangedNotify& operator=(GroupTopicChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupTopicChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupTopicChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupTopicChangedNotify*>(
               &_GroupTopicChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GroupTopicChangedNotify* other);
  friend void swap(GroupTopicChangedNotify& a, GroupTopicChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupTopicChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupTopicChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupTopicChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:zproto.GroupTopicChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupTopicChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupAboutChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupAboutChangedNotify) */ {
 public:
  GroupAboutChangedNotify();
  virtual ~GroupAboutChangedNotify();

  GroupAboutChangedNotify(const GroupAboutChangedNotify& from);

  inline GroupAboutChangedNotify& operator=(const GroupAboutChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupAboutChangedNotify(GroupAboutChangedNotify&& from) noexcept
    : GroupAboutChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupAboutChangedNotify& operator=(GroupAboutChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAboutChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupAboutChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupAboutChangedNotify*>(
               &_GroupAboutChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GroupAboutChangedNotify* other);
  friend void swap(GroupAboutChangedNotify& a, GroupAboutChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupAboutChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupAboutChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupAboutChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string about = 2;
  void clear_about();
  static const int kAboutFieldNumber = 2;
  const ::std::string& about() const;
  void set_about(const ::std::string& value);
  #if LANG_CXX11
  void set_about(::std::string&& value);
  #endif
  void set_about(const char* value);
  void set_about(const char* value, size_t size);
  ::std::string* mutable_about();
  ::std::string* release_about();
  void set_allocated_about(::std::string* about);

  // @@protoc_insertion_point(class_scope:zproto.GroupAboutChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr about_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupAboutChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupOwnerChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupOwnerChangedNotify) */ {
 public:
  GroupOwnerChangedNotify();
  virtual ~GroupOwnerChangedNotify();

  GroupOwnerChangedNotify(const GroupOwnerChangedNotify& from);

  inline GroupOwnerChangedNotify& operator=(const GroupOwnerChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupOwnerChangedNotify(GroupOwnerChangedNotify&& from) noexcept
    : GroupOwnerChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupOwnerChangedNotify& operator=(GroupOwnerChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupOwnerChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupOwnerChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupOwnerChangedNotify*>(
               &_GroupOwnerChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GroupOwnerChangedNotify* other);
  friend void swap(GroupOwnerChangedNotify& a, GroupOwnerChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupOwnerChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupOwnerChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupOwnerChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:zproto.GroupOwnerChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupOwnerChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupDeletedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupDeletedNotify) */ {
 public:
  GroupDeletedNotify();
  virtual ~GroupDeletedNotify();

  GroupDeletedNotify(const GroupDeletedNotify& from);

  inline GroupDeletedNotify& operator=(const GroupDeletedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupDeletedNotify(GroupDeletedNotify&& from) noexcept
    : GroupDeletedNotify() {
    *this = ::std::move(from);
  }

  inline GroupDeletedNotify& operator=(GroupDeletedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupDeletedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupDeletedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupDeletedNotify*>(
               &_GroupDeletedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GroupDeletedNotify* other);
  friend void swap(GroupDeletedNotify& a, GroupDeletedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupDeletedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupDeletedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupDeletedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:zproto.GroupDeletedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupDeletedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupPermissionsChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupPermissionsChangedNotify) */ {
 public:
  GroupPermissionsChangedNotify();
  virtual ~GroupPermissionsChangedNotify();

  GroupPermissionsChangedNotify(const GroupPermissionsChangedNotify& from);

  inline GroupPermissionsChangedNotify& operator=(const GroupPermissionsChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupPermissionsChangedNotify(GroupPermissionsChangedNotify&& from) noexcept
    : GroupPermissionsChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupPermissionsChangedNotify& operator=(GroupPermissionsChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupPermissionsChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupPermissionsChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupPermissionsChangedNotify*>(
               &_GroupPermissionsChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GroupPermissionsChangedNotify* other);
  friend void swap(GroupPermissionsChangedNotify& a, GroupPermissionsChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupPermissionsChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupPermissionsChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupPermissionsChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // int64 permissions = 2;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  ::google::protobuf::int64 permissions() const;
  void set_permissions(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.GroupPermissionsChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::int64 permissions_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupPermissionsChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupFullPermissionsChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupFullPermissionsChangedNotify) */ {
 public:
  GroupFullPermissionsChangedNotify();
  virtual ~GroupFullPermissionsChangedNotify();

  GroupFullPermissionsChangedNotify(const GroupFullPermissionsChangedNotify& from);

  inline GroupFullPermissionsChangedNotify& operator=(const GroupFullPermissionsChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupFullPermissionsChangedNotify(GroupFullPermissionsChangedNotify&& from) noexcept
    : GroupFullPermissionsChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupFullPermissionsChangedNotify& operator=(GroupFullPermissionsChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupFullPermissionsChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupFullPermissionsChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupFullPermissionsChangedNotify*>(
               &_GroupFullPermissionsChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GroupFullPermissionsChangedNotify* other);
  friend void swap(GroupFullPermissionsChangedNotify& a, GroupFullPermissionsChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupFullPermissionsChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupFullPermissionsChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupFullPermissionsChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // int64 permissions = 2;
  void clear_permissions();
  static const int kPermissionsFieldNumber = 2;
  ::google::protobuf::int64 permissions() const;
  void set_permissions(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.GroupFullPermissionsChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::int64 permissions_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupFullPermissionsChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupMemberChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMemberChangedNotify) */ {
 public:
  GroupMemberChangedNotify();
  virtual ~GroupMemberChangedNotify();

  GroupMemberChangedNotify(const GroupMemberChangedNotify& from);

  inline GroupMemberChangedNotify& operator=(const GroupMemberChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMemberChangedNotify(GroupMemberChangedNotify&& from) noexcept
    : GroupMemberChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupMemberChangedNotify& operator=(GroupMemberChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMemberChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupMemberChangedNotify*>(
               &_GroupMemberChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GroupMemberChangedNotify* other);
  friend void swap(GroupMemberChangedNotify& a, GroupMemberChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMemberChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMemberChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // bool is_member = 2;
  void clear_is_member();
  static const int kIsMemberFieldNumber = 2;
  bool is_member() const;
  void set_is_member(bool value);

  // @@protoc_insertion_point(class_scope:zproto.GroupMemberChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  bool is_member_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMemberChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupMembersBecameAsyncNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMembersBecameAsyncNotify) */ {
 public:
  GroupMembersBecameAsyncNotify();
  virtual ~GroupMembersBecameAsyncNotify();

  GroupMembersBecameAsyncNotify(const GroupMembersBecameAsyncNotify& from);

  inline GroupMembersBecameAsyncNotify& operator=(const GroupMembersBecameAsyncNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMembersBecameAsyncNotify(GroupMembersBecameAsyncNotify&& from) noexcept
    : GroupMembersBecameAsyncNotify() {
    *this = ::std::move(from);
  }

  inline GroupMembersBecameAsyncNotify& operator=(GroupMembersBecameAsyncNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMembersBecameAsyncNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMembersBecameAsyncNotify* internal_default_instance() {
    return reinterpret_cast<const GroupMembersBecameAsyncNotify*>(
               &_GroupMembersBecameAsyncNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GroupMembersBecameAsyncNotify* other);
  friend void swap(GroupMembersBecameAsyncNotify& a, GroupMembersBecameAsyncNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMembersBecameAsyncNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMembersBecameAsyncNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMembersBecameAsyncNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:zproto.GroupMembersBecameAsyncNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMembersBecameAsyncNotifyImpl();
};
// -------------------------------------------------------------------

class GroupMembersUpdatedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMembersUpdatedNotify) */ {
 public:
  GroupMembersUpdatedNotify();
  virtual ~GroupMembersUpdatedNotify();

  GroupMembersUpdatedNotify(const GroupMembersUpdatedNotify& from);

  inline GroupMembersUpdatedNotify& operator=(const GroupMembersUpdatedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMembersUpdatedNotify(GroupMembersUpdatedNotify&& from) noexcept
    : GroupMembersUpdatedNotify() {
    *this = ::std::move(from);
  }

  inline GroupMembersUpdatedNotify& operator=(GroupMembersUpdatedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMembersUpdatedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMembersUpdatedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupMembersUpdatedNotify*>(
               &_GroupMembersUpdatedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GroupMembersUpdatedNotify* other);
  friend void swap(GroupMembersUpdatedNotify& a, GroupMembersUpdatedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMembersUpdatedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMembersUpdatedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMembersUpdatedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.Member members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  const ::zproto::Member& members(int index) const;
  ::zproto::Member* mutable_members(int index);
  ::zproto::Member* add_members();
  ::google::protobuf::RepeatedPtrField< ::zproto::Member >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::zproto::Member >&
      members() const;

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:zproto.GroupMembersUpdatedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::Member > members_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMembersUpdatedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupMemberDiffNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMemberDiffNotify) */ {
 public:
  GroupMemberDiffNotify();
  virtual ~GroupMemberDiffNotify();

  GroupMemberDiffNotify(const GroupMemberDiffNotify& from);

  inline GroupMemberDiffNotify& operator=(const GroupMemberDiffNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMemberDiffNotify(GroupMemberDiffNotify&& from) noexcept
    : GroupMemberDiffNotify() {
    *this = ::std::move(from);
  }

  inline GroupMemberDiffNotify& operator=(GroupMemberDiffNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberDiffNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMemberDiffNotify* internal_default_instance() {
    return reinterpret_cast<const GroupMemberDiffNotify*>(
               &_GroupMemberDiffNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GroupMemberDiffNotify* other);
  friend void swap(GroupMemberDiffNotify& a, GroupMemberDiffNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberDiffNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMemberDiffNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMemberDiffNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 removed_users = 2;
  int removed_users_size() const;
  void clear_removed_users();
  static const int kRemovedUsersFieldNumber = 2;
  ::google::protobuf::int32 removed_users(int index) const;
  void set_removed_users(int index, ::google::protobuf::int32 value);
  void add_removed_users(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      removed_users() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_removed_users();

  // repeated .zproto.Member added_members = 3;
  int added_members_size() const;
  void clear_added_members();
  static const int kAddedMembersFieldNumber = 3;
  const ::zproto::Member& added_members(int index) const;
  ::zproto::Member* mutable_added_members(int index);
  ::zproto::Member* add_added_members();
  ::google::protobuf::RepeatedPtrField< ::zproto::Member >*
      mutable_added_members();
  const ::google::protobuf::RepeatedPtrField< ::zproto::Member >&
      added_members() const;

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // int32 members_count = 4;
  void clear_members_count();
  static const int kMembersCountFieldNumber = 4;
  ::google::protobuf::int32 members_count() const;
  void set_members_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.GroupMemberDiffNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > removed_users_;
  ::google::protobuf::RepeatedPtrField< ::zproto::Member > added_members_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::int32 members_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMemberDiffNotifyImpl();
};
// -------------------------------------------------------------------

class GroupMembersCountChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMembersCountChangedNotify) */ {
 public:
  GroupMembersCountChangedNotify();
  virtual ~GroupMembersCountChangedNotify();

  GroupMembersCountChangedNotify(const GroupMembersCountChangedNotify& from);

  inline GroupMembersCountChangedNotify& operator=(const GroupMembersCountChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMembersCountChangedNotify(GroupMembersCountChangedNotify&& from) noexcept
    : GroupMembersCountChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupMembersCountChangedNotify& operator=(GroupMembersCountChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMembersCountChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMembersCountChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupMembersCountChangedNotify*>(
               &_GroupMembersCountChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GroupMembersCountChangedNotify* other);
  friend void swap(GroupMembersCountChangedNotify& a, GroupMembersCountChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMembersCountChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMembersCountChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMembersCountChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // int32 members_count = 2;
  void clear_members_count();
  static const int kMembersCountFieldNumber = 2;
  ::google::protobuf::int32 members_count() const;
  void set_members_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.GroupMembersCountChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::int32 members_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMembersCountChangedNotifyImpl();
};
// -------------------------------------------------------------------

class GroupMemberAdminChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMemberAdminChangedNotify) */ {
 public:
  GroupMemberAdminChangedNotify();
  virtual ~GroupMemberAdminChangedNotify();

  GroupMemberAdminChangedNotify(const GroupMemberAdminChangedNotify& from);

  inline GroupMemberAdminChangedNotify& operator=(const GroupMemberAdminChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMemberAdminChangedNotify(GroupMemberAdminChangedNotify&& from) noexcept
    : GroupMemberAdminChangedNotify() {
    *this = ::std::move(from);
  }

  inline GroupMemberAdminChangedNotify& operator=(GroupMemberAdminChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberAdminChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMemberAdminChangedNotify* internal_default_instance() {
    return reinterpret_cast<const GroupMemberAdminChangedNotify*>(
               &_GroupMemberAdminChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GroupMemberAdminChangedNotify* other);
  friend void swap(GroupMemberAdminChangedNotify& a, GroupMemberAdminChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMemberAdminChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMemberAdminChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMemberAdminChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // bool is_admin = 3;
  void clear_is_admin();
  static const int kIsAdminFieldNumber = 3;
  bool is_admin() const;
  void set_is_admin(bool value);

  // @@protoc_insertion_point(class_scope:zproto.GroupMemberAdminChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  bool is_admin_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMemberAdminChangedNotifyImpl();
};
// -------------------------------------------------------------------

class CreateGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.CreateGroupReq) */ {
 public:
  CreateGroupReq();
  virtual ~CreateGroupReq();

  CreateGroupReq(const CreateGroupReq& from);

  inline CreateGroupReq& operator=(const CreateGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupReq(CreateGroupReq&& from) noexcept
    : CreateGroupReq() {
    *this = ::std::move(from);
  }

  inline CreateGroupReq& operator=(CreateGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupReq* internal_default_instance() {
    return reinterpret_cast<const CreateGroupReq*>(
               &_CreateGroupReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CreateGroupReq* other);
  friend void swap(CreateGroupReq& a, CreateGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateGroupReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UserOutPeer users = 3;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 3;
  const ::zproto::UserOutPeer& users(int index) const;
  ::zproto::UserOutPeer* mutable_users(int index);
  ::zproto::UserOutPeer* add_users();
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
      users() const;

  // repeated .zproto.UpdateOptimization optimizations = 4;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 4;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int64 rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.CreateGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer > users_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsCreateGroupReqImpl();
};
// -------------------------------------------------------------------

class CreateGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.CreateGroupRsp) */ {
 public:
  CreateGroupRsp();
  virtual ~CreateGroupRsp();

  CreateGroupRsp(const CreateGroupRsp& from);

  inline CreateGroupRsp& operator=(const CreateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupRsp(CreateGroupRsp&& from) noexcept
    : CreateGroupRsp() {
    *this = ::std::move(from);
  }

  inline CreateGroupRsp& operator=(CreateGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRsp* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRsp*>(
               &_CreateGroupRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CreateGroupRsp* other);
  friend void swap(CreateGroupRsp& a, CreateGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.User users = 4;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 4;
  const ::zproto::User& users(int index) const;
  ::zproto::User* mutable_users(int index);
  ::zproto::User* add_users();
  ::google::protobuf::RepeatedPtrField< ::zproto::User >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::zproto::User >&
      users() const;

  // repeated .zproto.UserOutPeer user_peers = 5;
  int user_peers_size() const;
  void clear_user_peers();
  static const int kUserPeersFieldNumber = 5;
  const ::zproto::UserOutPeer& user_peers(int index) const;
  ::zproto::UserOutPeer* mutable_user_peers(int index);
  ::zproto::UserOutPeer* add_user_peers();
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
      mutable_user_peers();
  const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
      user_peers() const;

  // .zproto.Group group = 3;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::zproto::Group& group() const;
  ::zproto::Group* release_group();
  ::zproto::Group* mutable_group();
  void set_allocated_group(::zproto::Group* group);

  // int64 date = 6;
  void clear_date();
  static const int kDateFieldNumber = 6;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // int32 seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.CreateGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::User > users_;
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer > user_peers_;
  ::zproto::Group* group_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int32 seq_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsCreateGroupRspImpl();
};
// -------------------------------------------------------------------

class EditGroupTitleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EditGroupTitleReq) */ {
 public:
  EditGroupTitleReq();
  virtual ~EditGroupTitleReq();

  EditGroupTitleReq(const EditGroupTitleReq& from);

  inline EditGroupTitleReq& operator=(const EditGroupTitleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditGroupTitleReq(EditGroupTitleReq&& from) noexcept
    : EditGroupTitleReq() {
    *this = ::std::move(from);
  }

  inline EditGroupTitleReq& operator=(EditGroupTitleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditGroupTitleReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditGroupTitleReq* internal_default_instance() {
    return reinterpret_cast<const EditGroupTitleReq*>(
               &_EditGroupTitleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(EditGroupTitleReq* other);
  friend void swap(EditGroupTitleReq& a, EditGroupTitleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditGroupTitleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EditGroupTitleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EditGroupTitleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 5;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 5;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.EditGroupTitleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::zproto::GroupOutPeer* group_peer_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsEditGroupTitleReqImpl();
};
// -------------------------------------------------------------------

class EditGroupAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EditGroupAvatarReq) */ {
 public:
  EditGroupAvatarReq();
  virtual ~EditGroupAvatarReq();

  EditGroupAvatarReq(const EditGroupAvatarReq& from);

  inline EditGroupAvatarReq& operator=(const EditGroupAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditGroupAvatarReq(EditGroupAvatarReq&& from) noexcept
    : EditGroupAvatarReq() {
    *this = ::std::move(from);
  }

  inline EditGroupAvatarReq& operator=(EditGroupAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditGroupAvatarReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditGroupAvatarReq* internal_default_instance() {
    return reinterpret_cast<const EditGroupAvatarReq*>(
               &_EditGroupAvatarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(EditGroupAvatarReq* other);
  friend void swap(EditGroupAvatarReq& a, EditGroupAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditGroupAvatarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EditGroupAvatarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EditGroupAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 5;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 5;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // string rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  #if LANG_CXX11
  void set_rid(::std::string&& value);
  #endif
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.FileLocation file_location = 3;
  bool has_file_location() const;
  void clear_file_location();
  static const int kFileLocationFieldNumber = 3;
  const ::zproto::FileLocation& file_location() const;
  ::zproto::FileLocation* release_file_location();
  ::zproto::FileLocation* mutable_file_location();
  void set_allocated_file_location(::zproto::FileLocation* file_location);

  // @@protoc_insertion_point(class_scope:zproto.EditGroupAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::FileLocation* file_location_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsEditGroupAvatarReqImpl();
};
// -------------------------------------------------------------------

class EditGroupAvatarRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EditGroupAvatarRsp) */ {
 public:
  EditGroupAvatarRsp();
  virtual ~EditGroupAvatarRsp();

  EditGroupAvatarRsp(const EditGroupAvatarRsp& from);

  inline EditGroupAvatarRsp& operator=(const EditGroupAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditGroupAvatarRsp(EditGroupAvatarRsp&& from) noexcept
    : EditGroupAvatarRsp() {
    *this = ::std::move(from);
  }

  inline EditGroupAvatarRsp& operator=(EditGroupAvatarRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditGroupAvatarRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditGroupAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const EditGroupAvatarRsp*>(
               &_EditGroupAvatarRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(EditGroupAvatarRsp* other);
  friend void swap(EditGroupAvatarRsp& a, EditGroupAvatarRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditGroupAvatarRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  EditGroupAvatarRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EditGroupAvatarRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // .zproto.Avatar avatar = 1;
  bool has_avatar() const;
  void clear_avatar();
  static const int kAvatarFieldNumber = 1;
  const ::zproto::Avatar& avatar() const;
  ::zproto::Avatar* release_avatar();
  ::zproto::Avatar* mutable_avatar();
  void set_allocated_avatar(::zproto::Avatar* avatar);

  // int64 date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // int32 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.EditGroupAvatarRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::zproto::Avatar* avatar_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int32 seq_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsEditGroupAvatarRspImpl();
};
// -------------------------------------------------------------------

class RemoveGroupAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RemoveGroupAvatarReq) */ {
 public:
  RemoveGroupAvatarReq();
  virtual ~RemoveGroupAvatarReq();

  RemoveGroupAvatarReq(const RemoveGroupAvatarReq& from);

  inline RemoveGroupAvatarReq& operator=(const RemoveGroupAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveGroupAvatarReq(RemoveGroupAvatarReq&& from) noexcept
    : RemoveGroupAvatarReq() {
    *this = ::std::move(from);
  }

  inline RemoveGroupAvatarReq& operator=(RemoveGroupAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveGroupAvatarReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveGroupAvatarReq* internal_default_instance() {
    return reinterpret_cast<const RemoveGroupAvatarReq*>(
               &_RemoveGroupAvatarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(RemoveGroupAvatarReq* other);
  friend void swap(RemoveGroupAvatarReq& a, RemoveGroupAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveGroupAvatarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveGroupAvatarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveGroupAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 5;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 5;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.RemoveGroupAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::zproto::GroupOutPeer* group_peer_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsRemoveGroupAvatarReqImpl();
};
// -------------------------------------------------------------------

class EditGroupShortNameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EditGroupShortNameReq) */ {
 public:
  EditGroupShortNameReq();
  virtual ~EditGroupShortNameReq();

  EditGroupShortNameReq(const EditGroupShortNameReq& from);

  inline EditGroupShortNameReq& operator=(const EditGroupShortNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditGroupShortNameReq(EditGroupShortNameReq&& from) noexcept
    : EditGroupShortNameReq() {
    *this = ::std::move(from);
  }

  inline EditGroupShortNameReq& operator=(EditGroupShortNameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditGroupShortNameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditGroupShortNameReq* internal_default_instance() {
    return reinterpret_cast<const EditGroupShortNameReq*>(
               &_EditGroupShortNameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(EditGroupShortNameReq* other);
  friend void swap(EditGroupShortNameReq& a, EditGroupShortNameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditGroupShortNameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EditGroupShortNameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EditGroupShortNameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string short_name = 2;
  void clear_short_name();
  static const int kShortNameFieldNumber = 2;
  const ::std::string& short_name() const;
  void set_short_name(const ::std::string& value);
  #if LANG_CXX11
  void set_short_name(::std::string&& value);
  #endif
  void set_short_name(const char* value);
  void set_short_name(const char* value, size_t size);
  ::std::string* mutable_short_name();
  ::std::string* release_short_name();
  void set_allocated_short_name(::std::string* short_name);

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.EditGroupShortNameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr short_name_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsEditGroupShortNameReqImpl();
};
// -------------------------------------------------------------------

class EditGroupTopicReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EditGroupTopicReq) */ {
 public:
  EditGroupTopicReq();
  virtual ~EditGroupTopicReq();

  EditGroupTopicReq(const EditGroupTopicReq& from);

  inline EditGroupTopicReq& operator=(const EditGroupTopicReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditGroupTopicReq(EditGroupTopicReq&& from) noexcept
    : EditGroupTopicReq() {
    *this = ::std::move(from);
  }

  inline EditGroupTopicReq& operator=(EditGroupTopicReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditGroupTopicReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditGroupTopicReq* internal_default_instance() {
    return reinterpret_cast<const EditGroupTopicReq*>(
               &_EditGroupTopicReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(EditGroupTopicReq* other);
  friend void swap(EditGroupTopicReq& a, EditGroupTopicReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditGroupTopicReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EditGroupTopicReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EditGroupTopicReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 4;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 4;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // string topic = 3;
  void clear_topic();
  static const int kTopicFieldNumber = 3;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.EditGroupTopicReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::zproto::GroupOutPeer* group_peer_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsEditGroupTopicReqImpl();
};
// -------------------------------------------------------------------

class EditGroupAboutReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EditGroupAboutReq) */ {
 public:
  EditGroupAboutReq();
  virtual ~EditGroupAboutReq();

  EditGroupAboutReq(const EditGroupAboutReq& from);

  inline EditGroupAboutReq& operator=(const EditGroupAboutReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EditGroupAboutReq(EditGroupAboutReq&& from) noexcept
    : EditGroupAboutReq() {
    *this = ::std::move(from);
  }

  inline EditGroupAboutReq& operator=(EditGroupAboutReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EditGroupAboutReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditGroupAboutReq* internal_default_instance() {
    return reinterpret_cast<const EditGroupAboutReq*>(
               &_EditGroupAboutReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(EditGroupAboutReq* other);
  friend void swap(EditGroupAboutReq& a, EditGroupAboutReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EditGroupAboutReq* New() const PROTOBUF_FINAL { return New(NULL); }

  EditGroupAboutReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EditGroupAboutReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 5;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 5;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // string about = 3;
  void clear_about();
  static const int kAboutFieldNumber = 3;
  const ::std::string& about() const;
  void set_about(const ::std::string& value);
  #if LANG_CXX11
  void set_about(::std::string&& value);
  #endif
  void set_about(const char* value);
  void set_about(const char* value, size_t size);
  ::std::string* mutable_about();
  ::std::string* release_about();
  void set_allocated_about(::std::string* about);

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.EditGroupAboutReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::google::protobuf::internal::ArenaStringPtr about_;
  ::zproto::GroupOutPeer* group_peer_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsEditGroupAboutReqImpl();
};
// -------------------------------------------------------------------

class InviteUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.InviteUserReq) */ {
 public:
  InviteUserReq();
  virtual ~InviteUserReq();

  InviteUserReq(const InviteUserReq& from);

  inline InviteUserReq& operator=(const InviteUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteUserReq(InviteUserReq&& from) noexcept
    : InviteUserReq() {
    *this = ::std::move(from);
  }

  inline InviteUserReq& operator=(InviteUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteUserReq* internal_default_instance() {
    return reinterpret_cast<const InviteUserReq*>(
               &_InviteUserReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(InviteUserReq* other);
  friend void swap(InviteUserReq& a, InviteUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 5;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 5;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.UserOutPeer user = 3;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::zproto::UserOutPeer& user() const;
  ::zproto::UserOutPeer* release_user();
  ::zproto::UserOutPeer* mutable_user();
  void set_allocated_user(::zproto::UserOutPeer* user);

  // int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.InviteUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::UserOutPeer* user_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsInviteUserReqImpl();
};
// -------------------------------------------------------------------

class LeaveGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LeaveGroupReq) */ {
 public:
  LeaveGroupReq();
  virtual ~LeaveGroupReq();

  LeaveGroupReq(const LeaveGroupReq& from);

  inline LeaveGroupReq& operator=(const LeaveGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveGroupReq(LeaveGroupReq&& from) noexcept
    : LeaveGroupReq() {
    *this = ::std::move(from);
  }

  inline LeaveGroupReq& operator=(LeaveGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveGroupReq* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupReq*>(
               &_LeaveGroupReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(LeaveGroupReq* other);
  friend void swap(LeaveGroupReq& a, LeaveGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveGroupReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveGroupReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 3;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 3;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.LeaveGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::zproto::GroupOutPeer* group_peer_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLeaveGroupReqImpl();
};
// -------------------------------------------------------------------

class LeaveAndDeleteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LeaveAndDeleteReq) */ {
 public:
  LeaveAndDeleteReq();
  virtual ~LeaveAndDeleteReq();

  LeaveAndDeleteReq(const LeaveAndDeleteReq& from);

  inline LeaveAndDeleteReq& operator=(const LeaveAndDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveAndDeleteReq(LeaveAndDeleteReq&& from) noexcept
    : LeaveAndDeleteReq() {
    *this = ::std::move(from);
  }

  inline LeaveAndDeleteReq& operator=(LeaveAndDeleteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveAndDeleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveAndDeleteReq* internal_default_instance() {
    return reinterpret_cast<const LeaveAndDeleteReq*>(
               &_LeaveAndDeleteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(LeaveAndDeleteReq* other);
  friend void swap(LeaveAndDeleteReq& a, LeaveAndDeleteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveAndDeleteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveAndDeleteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveAndDeleteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.LeaveAndDeleteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLeaveAndDeleteReqImpl();
};
// -------------------------------------------------------------------

class KickUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.KickUserReq) */ {
 public:
  KickUserReq();
  virtual ~KickUserReq();

  KickUserReq(const KickUserReq& from);

  inline KickUserReq& operator=(const KickUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickUserReq(KickUserReq&& from) noexcept
    : KickUserReq() {
    *this = ::std::move(from);
  }

  inline KickUserReq& operator=(KickUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickUserReq* internal_default_instance() {
    return reinterpret_cast<const KickUserReq*>(
               &_KickUserReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(KickUserReq* other);
  friend void swap(KickUserReq& a, KickUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  KickUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 5;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 5;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.UserOutPeer user = 3;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::zproto::UserOutPeer& user() const;
  ::zproto::UserOutPeer* release_user();
  ::zproto::UserOutPeer* mutable_user();
  void set_allocated_user(::zproto::UserOutPeer* user);

  // int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.KickUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::UserOutPeer* user_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsKickUserReqImpl();
};
// -------------------------------------------------------------------

class JoinGroupByPeerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.JoinGroupByPeerReq) */ {
 public:
  JoinGroupByPeerReq();
  virtual ~JoinGroupByPeerReq();

  JoinGroupByPeerReq(const JoinGroupByPeerReq& from);

  inline JoinGroupByPeerReq& operator=(const JoinGroupByPeerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinGroupByPeerReq(JoinGroupByPeerReq&& from) noexcept
    : JoinGroupByPeerReq() {
    *this = ::std::move(from);
  }

  inline JoinGroupByPeerReq& operator=(JoinGroupByPeerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroupByPeerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGroupByPeerReq* internal_default_instance() {
    return reinterpret_cast<const JoinGroupByPeerReq*>(
               &_JoinGroupByPeerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(JoinGroupByPeerReq* other);
  friend void swap(JoinGroupByPeerReq& a, JoinGroupByPeerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinGroupByPeerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroupByPeerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroupByPeerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.JoinGroupByPeerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsJoinGroupByPeerReqImpl();
};
// -------------------------------------------------------------------

class MakeUserAdminReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MakeUserAdminReq) */ {
 public:
  MakeUserAdminReq();
  virtual ~MakeUserAdminReq();

  MakeUserAdminReq(const MakeUserAdminReq& from);

  inline MakeUserAdminReq& operator=(const MakeUserAdminReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MakeUserAdminReq(MakeUserAdminReq&& from) noexcept
    : MakeUserAdminReq() {
    *this = ::std::move(from);
  }

  inline MakeUserAdminReq& operator=(MakeUserAdminReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeUserAdminReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeUserAdminReq* internal_default_instance() {
    return reinterpret_cast<const MakeUserAdminReq*>(
               &_MakeUserAdminReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(MakeUserAdminReq* other);
  friend void swap(MakeUserAdminReq& a, MakeUserAdminReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MakeUserAdminReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MakeUserAdminReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MakeUserAdminReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.UserOutPeer user_peer = 2;
  bool has_user_peer() const;
  void clear_user_peer();
  static const int kUserPeerFieldNumber = 2;
  const ::zproto::UserOutPeer& user_peer() const;
  ::zproto::UserOutPeer* release_user_peer();
  ::zproto::UserOutPeer* mutable_user_peer();
  void set_allocated_user_peer(::zproto::UserOutPeer* user_peer);

  // @@protoc_insertion_point(class_scope:zproto.MakeUserAdminReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::UserOutPeer* user_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsMakeUserAdminReqImpl();
};
// -------------------------------------------------------------------

class DismissUserAdminReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.DismissUserAdminReq) */ {
 public:
  DismissUserAdminReq();
  virtual ~DismissUserAdminReq();

  DismissUserAdminReq(const DismissUserAdminReq& from);

  inline DismissUserAdminReq& operator=(const DismissUserAdminReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DismissUserAdminReq(DismissUserAdminReq&& from) noexcept
    : DismissUserAdminReq() {
    *this = ::std::move(from);
  }

  inline DismissUserAdminReq& operator=(DismissUserAdminReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DismissUserAdminReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DismissUserAdminReq* internal_default_instance() {
    return reinterpret_cast<const DismissUserAdminReq*>(
               &_DismissUserAdminReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(DismissUserAdminReq* other);
  friend void swap(DismissUserAdminReq& a, DismissUserAdminReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DismissUserAdminReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DismissUserAdminReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DismissUserAdminReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.UserOutPeer user_peer = 2;
  bool has_user_peer() const;
  void clear_user_peer();
  static const int kUserPeerFieldNumber = 2;
  const ::zproto::UserOutPeer& user_peer() const;
  ::zproto::UserOutPeer* release_user_peer();
  ::zproto::UserOutPeer* mutable_user_peer();
  void set_allocated_user_peer(::zproto::UserOutPeer* user_peer);

  // @@protoc_insertion_point(class_scope:zproto.DismissUserAdminReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::UserOutPeer* user_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsDismissUserAdminReqImpl();
};
// -------------------------------------------------------------------

class TransferOwnershipReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.TransferOwnershipReq) */ {
 public:
  TransferOwnershipReq();
  virtual ~TransferOwnershipReq();

  TransferOwnershipReq(const TransferOwnershipReq& from);

  inline TransferOwnershipReq& operator=(const TransferOwnershipReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferOwnershipReq(TransferOwnershipReq&& from) noexcept
    : TransferOwnershipReq() {
    *this = ::std::move(from);
  }

  inline TransferOwnershipReq& operator=(TransferOwnershipReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferOwnershipReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferOwnershipReq* internal_default_instance() {
    return reinterpret_cast<const TransferOwnershipReq*>(
               &_TransferOwnershipReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(TransferOwnershipReq* other);
  friend void swap(TransferOwnershipReq& a, TransferOwnershipReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferOwnershipReq* New() const PROTOBUF_FINAL { return New(NULL); }

  TransferOwnershipReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransferOwnershipReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.UserOutPeer new_owner = 2;
  bool has_new_owner() const;
  void clear_new_owner();
  static const int kNewOwnerFieldNumber = 2;
  const ::zproto::UserOutPeer& new_owner() const;
  ::zproto::UserOutPeer* release_new_owner();
  ::zproto::UserOutPeer* mutable_new_owner();
  void set_allocated_new_owner(::zproto::UserOutPeer* new_owner);

  // @@protoc_insertion_point(class_scope:zproto.TransferOwnershipReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::UserOutPeer* new_owner_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsTransferOwnershipReqImpl();
};
// -------------------------------------------------------------------

class AdminSettings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.AdminSettings) */ {
 public:
  AdminSettings();
  virtual ~AdminSettings();

  AdminSettings(const AdminSettings& from);

  inline AdminSettings& operator=(const AdminSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdminSettings(AdminSettings&& from) noexcept
    : AdminSettings() {
    *this = ::std::move(from);
  }

  inline AdminSettings& operator=(AdminSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdminSettings* internal_default_instance() {
    return reinterpret_cast<const AdminSettings*>(
               &_AdminSettings_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(AdminSettings* other);
  friend void swap(AdminSettings& a, AdminSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdminSettings* New() const PROTOBUF_FINAL { return New(NULL); }

  AdminSettings* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AdminSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool show_admins_to_members = 1;
  void clear_show_admins_to_members();
  static const int kShowAdminsToMembersFieldNumber = 1;
  bool show_admins_to_members() const;
  void set_show_admins_to_members(bool value);

  // bool can_members_invite = 2;
  void clear_can_members_invite();
  static const int kCanMembersInviteFieldNumber = 2;
  bool can_members_invite() const;
  void set_can_members_invite(bool value);

  // bool can_members_edit_group_info = 3;
  void clear_can_members_edit_group_info();
  static const int kCanMembersEditGroupInfoFieldNumber = 3;
  bool can_members_edit_group_info() const;
  void set_can_members_edit_group_info(bool value);

  // bool can_admins_edit_group_info = 4;
  void clear_can_admins_edit_group_info();
  static const int kCanAdminsEditGroupInfoFieldNumber = 4;
  bool can_admins_edit_group_info() const;
  void set_can_admins_edit_group_info(bool value);

  // bool show_join_leave_messages = 5;
  void clear_show_join_leave_messages();
  static const int kShowJoinLeaveMessagesFieldNumber = 5;
  bool show_join_leave_messages() const;
  void set_show_join_leave_messages(bool value);

  // @@protoc_insertion_point(class_scope:zproto.AdminSettings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool show_admins_to_members_;
  bool can_members_invite_;
  bool can_members_edit_group_info_;
  bool can_admins_edit_group_info_;
  bool show_join_leave_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsAdminSettingsImpl();
};
// -------------------------------------------------------------------

class LoadAdminSettingsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadAdminSettingsReq) */ {
 public:
  LoadAdminSettingsReq();
  virtual ~LoadAdminSettingsReq();

  LoadAdminSettingsReq(const LoadAdminSettingsReq& from);

  inline LoadAdminSettingsReq& operator=(const LoadAdminSettingsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadAdminSettingsReq(LoadAdminSettingsReq&& from) noexcept
    : LoadAdminSettingsReq() {
    *this = ::std::move(from);
  }

  inline LoadAdminSettingsReq& operator=(LoadAdminSettingsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadAdminSettingsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAdminSettingsReq* internal_default_instance() {
    return reinterpret_cast<const LoadAdminSettingsReq*>(
               &_LoadAdminSettingsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(LoadAdminSettingsReq* other);
  friend void swap(LoadAdminSettingsReq& a, LoadAdminSettingsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadAdminSettingsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadAdminSettingsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadAdminSettingsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.LoadAdminSettingsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadAdminSettingsReqImpl();
};
// -------------------------------------------------------------------

class LoadAdminSettingsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadAdminSettingsRsp) */ {
 public:
  LoadAdminSettingsRsp();
  virtual ~LoadAdminSettingsRsp();

  LoadAdminSettingsRsp(const LoadAdminSettingsRsp& from);

  inline LoadAdminSettingsRsp& operator=(const LoadAdminSettingsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadAdminSettingsRsp(LoadAdminSettingsRsp&& from) noexcept
    : LoadAdminSettingsRsp() {
    *this = ::std::move(from);
  }

  inline LoadAdminSettingsRsp& operator=(LoadAdminSettingsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadAdminSettingsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadAdminSettingsRsp* internal_default_instance() {
    return reinterpret_cast<const LoadAdminSettingsRsp*>(
               &_LoadAdminSettingsRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(LoadAdminSettingsRsp* other);
  friend void swap(LoadAdminSettingsRsp& a, LoadAdminSettingsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadAdminSettingsRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadAdminSettingsRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadAdminSettingsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.AdminSettings settings = 1;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 1;
  const ::zproto::AdminSettings& settings() const;
  ::zproto::AdminSettings* release_settings();
  ::zproto::AdminSettings* mutable_settings();
  void set_allocated_settings(::zproto::AdminSettings* settings);

  // @@protoc_insertion_point(class_scope:zproto.LoadAdminSettingsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::AdminSettings* settings_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadAdminSettingsRspImpl();
};
// -------------------------------------------------------------------

class SaveAdminSettingsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.SaveAdminSettingsReq) */ {
 public:
  SaveAdminSettingsReq();
  virtual ~SaveAdminSettingsReq();

  SaveAdminSettingsReq(const SaveAdminSettingsReq& from);

  inline SaveAdminSettingsReq& operator=(const SaveAdminSettingsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SaveAdminSettingsReq(SaveAdminSettingsReq&& from) noexcept
    : SaveAdminSettingsReq() {
    *this = ::std::move(from);
  }

  inline SaveAdminSettingsReq& operator=(SaveAdminSettingsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveAdminSettingsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SaveAdminSettingsReq* internal_default_instance() {
    return reinterpret_cast<const SaveAdminSettingsReq*>(
               &_SaveAdminSettingsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(SaveAdminSettingsReq* other);
  friend void swap(SaveAdminSettingsReq& a, SaveAdminSettingsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SaveAdminSettingsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  SaveAdminSettingsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SaveAdminSettingsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // .zproto.AdminSettings settings = 2;
  bool has_settings() const;
  void clear_settings();
  static const int kSettingsFieldNumber = 2;
  const ::zproto::AdminSettings& settings() const;
  ::zproto::AdminSettings* release_settings();
  ::zproto::AdminSettings* mutable_settings();
  void set_allocated_settings(::zproto::AdminSettings* settings);

  // @@protoc_insertion_point(class_scope:zproto.SaveAdminSettingsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  ::zproto::AdminSettings* settings_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsSaveAdminSettingsReqImpl();
};
// -------------------------------------------------------------------

class DeleteGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.DeleteGroupReq) */ {
 public:
  DeleteGroupReq();
  virtual ~DeleteGroupReq();

  DeleteGroupReq(const DeleteGroupReq& from);

  inline DeleteGroupReq& operator=(const DeleteGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteGroupReq(DeleteGroupReq&& from) noexcept
    : DeleteGroupReq() {
    *this = ::std::move(from);
  }

  inline DeleteGroupReq& operator=(DeleteGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteGroupReq* internal_default_instance() {
    return reinterpret_cast<const DeleteGroupReq*>(
               &_DeleteGroupReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(DeleteGroupReq* other);
  friend void swap(DeleteGroupReq& a, DeleteGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteGroupReq* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteGroupReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.DeleteGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsDeleteGroupReqImpl();
};
// -------------------------------------------------------------------

class ShareHistoryReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ShareHistoryReq) */ {
 public:
  ShareHistoryReq();
  virtual ~ShareHistoryReq();

  ShareHistoryReq(const ShareHistoryReq& from);

  inline ShareHistoryReq& operator=(const ShareHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShareHistoryReq(ShareHistoryReq&& from) noexcept
    : ShareHistoryReq() {
    *this = ::std::move(from);
  }

  inline ShareHistoryReq& operator=(ShareHistoryReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShareHistoryReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShareHistoryReq* internal_default_instance() {
    return reinterpret_cast<const ShareHistoryReq*>(
               &_ShareHistoryReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(ShareHistoryReq* other);
  friend void swap(ShareHistoryReq& a, ShareHistoryReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShareHistoryReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ShareHistoryReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShareHistoryReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.ShareHistoryReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsShareHistoryReqImpl();
};
// -------------------------------------------------------------------

class InviteUrlRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.InviteUrlRsp) */ {
 public:
  InviteUrlRsp();
  virtual ~InviteUrlRsp();

  InviteUrlRsp(const InviteUrlRsp& from);

  inline InviteUrlRsp& operator=(const InviteUrlRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteUrlRsp(InviteUrlRsp&& from) noexcept
    : InviteUrlRsp() {
    *this = ::std::move(from);
  }

  inline InviteUrlRsp& operator=(InviteUrlRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteUrlRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteUrlRsp* internal_default_instance() {
    return reinterpret_cast<const InviteUrlRsp*>(
               &_InviteUrlRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(InviteUrlRsp* other);
  friend void swap(InviteUrlRsp& a, InviteUrlRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteUrlRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteUrlRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteUrlRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:zproto.InviteUrlRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsInviteUrlRspImpl();
};
// -------------------------------------------------------------------

class GetGroupInviteUrlReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GetGroupInviteUrlReq) */ {
 public:
  GetGroupInviteUrlReq();
  virtual ~GetGroupInviteUrlReq();

  GetGroupInviteUrlReq(const GetGroupInviteUrlReq& from);

  inline GetGroupInviteUrlReq& operator=(const GetGroupInviteUrlReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetGroupInviteUrlReq(GetGroupInviteUrlReq&& from) noexcept
    : GetGroupInviteUrlReq() {
    *this = ::std::move(from);
  }

  inline GetGroupInviteUrlReq& operator=(GetGroupInviteUrlReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupInviteUrlReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetGroupInviteUrlReq* internal_default_instance() {
    return reinterpret_cast<const GetGroupInviteUrlReq*>(
               &_GetGroupInviteUrlReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(GetGroupInviteUrlReq* other);
  friend void swap(GetGroupInviteUrlReq& a, GetGroupInviteUrlReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetGroupInviteUrlReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGroupInviteUrlReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGroupInviteUrlReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.GetGroupInviteUrlReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGetGroupInviteUrlReqImpl();
};
// -------------------------------------------------------------------

class RevokeInviteUrlReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.RevokeInviteUrlReq) */ {
 public:
  RevokeInviteUrlReq();
  virtual ~RevokeInviteUrlReq();

  RevokeInviteUrlReq(const RevokeInviteUrlReq& from);

  inline RevokeInviteUrlReq& operator=(const RevokeInviteUrlReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RevokeInviteUrlReq(RevokeInviteUrlReq&& from) noexcept
    : RevokeInviteUrlReq() {
    *this = ::std::move(from);
  }

  inline RevokeInviteUrlReq& operator=(RevokeInviteUrlReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RevokeInviteUrlReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RevokeInviteUrlReq* internal_default_instance() {
    return reinterpret_cast<const RevokeInviteUrlReq*>(
               &_RevokeInviteUrlReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(RevokeInviteUrlReq* other);
  friend void swap(RevokeInviteUrlReq& a, RevokeInviteUrlReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RevokeInviteUrlReq* New() const PROTOBUF_FINAL { return New(NULL); }

  RevokeInviteUrlReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RevokeInviteUrlReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.GroupOutPeer group_peer = 1;
  bool has_group_peer() const;
  void clear_group_peer();
  static const int kGroupPeerFieldNumber = 1;
  const ::zproto::GroupOutPeer& group_peer() const;
  ::zproto::GroupOutPeer* release_group_peer();
  ::zproto::GroupOutPeer* mutable_group_peer();
  void set_allocated_group_peer(::zproto::GroupOutPeer* group_peer);

  // @@protoc_insertion_point(class_scope:zproto.RevokeInviteUrlReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::GroupOutPeer* group_peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsRevokeInviteUrlReqImpl();
};
// -------------------------------------------------------------------

class JoinGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.JoinGroupReq) */ {
 public:
  JoinGroupReq();
  virtual ~JoinGroupReq();

  JoinGroupReq(const JoinGroupReq& from);

  inline JoinGroupReq& operator=(const JoinGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinGroupReq(JoinGroupReq&& from) noexcept
    : JoinGroupReq() {
    *this = ::std::move(from);
  }

  inline JoinGroupReq& operator=(JoinGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGroupReq* internal_default_instance() {
    return reinterpret_cast<const JoinGroupReq*>(
               &_JoinGroupReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(JoinGroupReq* other);
  friend void swap(JoinGroupReq& a, JoinGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinGroupReq* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroupReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.UpdateOptimization optimizations = 2;
  int optimizations_size() const;
  void clear_optimizations();
  static const int kOptimizationsFieldNumber = 2;
  ::zproto::UpdateOptimization optimizations(int index) const;
  void set_optimizations(int index, ::zproto::UpdateOptimization value);
  void add_optimizations(::zproto::UpdateOptimization value);
  const ::google::protobuf::RepeatedField<int>& optimizations() const;
  ::google::protobuf::RepeatedField<int>* mutable_optimizations();

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:zproto.JoinGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> optimizations_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsJoinGroupReqImpl();
};
// -------------------------------------------------------------------

class JoinGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.JoinGroupRsp) */ {
 public:
  JoinGroupRsp();
  virtual ~JoinGroupRsp();

  JoinGroupRsp(const JoinGroupRsp& from);

  inline JoinGroupRsp& operator=(const JoinGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinGroupRsp(JoinGroupRsp&& from) noexcept
    : JoinGroupRsp() {
    *this = ::std::move(from);
  }

  inline JoinGroupRsp& operator=(JoinGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGroupRsp* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRsp*>(
               &_JoinGroupRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(JoinGroupRsp* other);
  friend void swap(JoinGroupRsp& a, JoinGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.User users = 5;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 5;
  const ::zproto::User& users(int index) const;
  ::zproto::User* mutable_users(int index);
  ::zproto::User* add_users();
  ::google::protobuf::RepeatedPtrField< ::zproto::User >*
      mutable_users();
  const ::google::protobuf::RepeatedPtrField< ::zproto::User >&
      users() const;

  // repeated .zproto.UserOutPeer user_peers = 7;
  int user_peers_size() const;
  void clear_user_peers();
  static const int kUserPeersFieldNumber = 7;
  const ::zproto::UserOutPeer& user_peers(int index) const;
  ::zproto::UserOutPeer* mutable_user_peers(int index);
  ::zproto::UserOutPeer* add_user_peers();
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
      mutable_user_peers();
  const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
      user_peers() const;

  // bytes state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const void* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // .zproto.Group group = 1;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::zproto::Group& group() const;
  ::zproto::Group* release_group();
  ::zproto::Group* mutable_group();
  void set_allocated_group(::zproto::Group* group);

  // int64 date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // int64 rid = 6;
  void clear_rid();
  static const int kRidFieldNumber = 6;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // int32 seq = 2;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::google::protobuf::int32 seq() const;
  void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.JoinGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::User > users_;
  ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer > user_peers_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::zproto::Group* group_;
  ::google::protobuf::int64 date_;
  ::google::protobuf::int64 rid_;
  ::google::protobuf::int32 seq_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsJoinGroupRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoadFullGroupsReq

// repeated .zproto.GroupOutPeer groups = 1;
inline int LoadFullGroupsReq::groups_size() const {
  return groups_.size();
}
inline const ::zproto::GroupOutPeer& LoadFullGroupsReq::groups(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadFullGroupsReq.groups)
  return groups_.Get(index);
}
inline ::zproto::GroupOutPeer* LoadFullGroupsReq::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadFullGroupsReq.groups)
  return groups_.Mutable(index);
}
inline ::zproto::GroupOutPeer* LoadFullGroupsReq::add_groups() {
  // @@protoc_insertion_point(field_add:zproto.LoadFullGroupsReq.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >*
LoadFullGroupsReq::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadFullGroupsReq.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::GroupOutPeer >&
LoadFullGroupsReq::groups() const {
  // @@protoc_insertion_point(field_list:zproto.LoadFullGroupsReq.groups)
  return groups_;
}

// -------------------------------------------------------------------

// LoadFullGroupsRsp

// repeated .zproto.GroupFull groups = 1;
inline int LoadFullGroupsRsp::groups_size() const {
  return groups_.size();
}
inline const ::zproto::GroupFull& LoadFullGroupsRsp::groups(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadFullGroupsRsp.groups)
  return groups_.Get(index);
}
inline ::zproto::GroupFull* LoadFullGroupsRsp::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadFullGroupsRsp.groups)
  return groups_.Mutable(index);
}
inline ::zproto::GroupFull* LoadFullGroupsRsp::add_groups() {
  // @@protoc_insertion_point(field_add:zproto.LoadFullGroupsRsp.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::GroupFull >*
LoadFullGroupsRsp::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadFullGroupsRsp.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::GroupFull >&
LoadFullGroupsRsp::groups() const {
  // @@protoc_insertion_point(field_list:zproto.LoadFullGroupsRsp.groups)
  return groups_;
}

// -------------------------------------------------------------------

// LoadMembersReq

// .zproto.GroupOutPeer group = 1;
inline bool LoadMembersReq::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline const ::zproto::GroupOutPeer& LoadMembersReq::group() const {
  const ::zproto::GroupOutPeer* p = group_;
  // @@protoc_insertion_point(field_get:zproto.LoadMembersReq.group)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* LoadMembersReq::release_group() {
  // @@protoc_insertion_point(field_release:zproto.LoadMembersReq.group)
  
  ::zproto::GroupOutPeer* temp = group_;
  group_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* LoadMembersReq::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersReq.group)
  return group_;
}
inline void LoadMembersReq::set_allocated_group(::zproto::GroupOutPeer* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_);
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadMembersReq.group)
}

// int32 limit = 2;
inline void LoadMembersReq::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 LoadMembersReq::limit() const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersReq.limit)
  return limit_;
}
inline void LoadMembersReq::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:zproto.LoadMembersReq.limit)
}

// bytes next = 3;
inline void LoadMembersReq::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadMembersReq::next() const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersReq.next)
  return next_.GetNoArena();
}
inline void LoadMembersReq::set_next(const ::std::string& value) {
  
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.LoadMembersReq.next)
}
#if LANG_CXX11
inline void LoadMembersReq::set_next(::std::string&& value) {
  
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.LoadMembersReq.next)
}
#endif
inline void LoadMembersReq::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.LoadMembersReq.next)
}
inline void LoadMembersReq::set_next(const void* value, size_t size) {
  
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.LoadMembersReq.next)
}
inline ::std::string* LoadMembersReq::mutable_next() {
  
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersReq.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadMembersReq::release_next() {
  // @@protoc_insertion_point(field_release:zproto.LoadMembersReq.next)
  
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadMembersReq::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    
  } else {
    
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadMembersReq.next)
}

// -------------------------------------------------------------------

// LoadMembersRsp

// repeated .zproto.Member members = 1;
inline int LoadMembersRsp::members_size() const {
  return members_.size();
}
inline const ::zproto::Member& LoadMembersRsp::members(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersRsp.members)
  return members_.Get(index);
}
inline ::zproto::Member* LoadMembersRsp::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersRsp.members)
  return members_.Mutable(index);
}
inline ::zproto::Member* LoadMembersRsp::add_members() {
  // @@protoc_insertion_point(field_add:zproto.LoadMembersRsp.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::Member >*
LoadMembersRsp::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadMembersRsp.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::Member >&
LoadMembersRsp::members() const {
  // @@protoc_insertion_point(field_list:zproto.LoadMembersRsp.members)
  return members_;
}

// repeated .zproto.UserOutPeer users = 2;
inline int LoadMembersRsp::users_size() const {
  return users_.size();
}
inline const ::zproto::UserOutPeer& LoadMembersRsp::users(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersRsp.users)
  return users_.Get(index);
}
inline ::zproto::UserOutPeer* LoadMembersRsp::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersRsp.users)
  return users_.Mutable(index);
}
inline ::zproto::UserOutPeer* LoadMembersRsp::add_users() {
  // @@protoc_insertion_point(field_add:zproto.LoadMembersRsp.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
LoadMembersRsp::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadMembersRsp.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
LoadMembersRsp::users() const {
  // @@protoc_insertion_point(field_list:zproto.LoadMembersRsp.users)
  return users_;
}

// bytes next = 3;
inline void LoadMembersRsp::clear_next() {
  next_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadMembersRsp::next() const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersRsp.next)
  return next_.GetNoArena();
}
inline void LoadMembersRsp::set_next(const ::std::string& value) {
  
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.LoadMembersRsp.next)
}
#if LANG_CXX11
inline void LoadMembersRsp::set_next(::std::string&& value) {
  
  next_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.LoadMembersRsp.next)
}
#endif
inline void LoadMembersRsp::set_next(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.LoadMembersRsp.next)
}
inline void LoadMembersRsp::set_next(const void* value, size_t size) {
  
  next_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.LoadMembersRsp.next)
}
inline ::std::string* LoadMembersRsp::mutable_next() {
  
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersRsp.next)
  return next_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadMembersRsp::release_next() {
  // @@protoc_insertion_point(field_release:zproto.LoadMembersRsp.next)
  
  return next_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadMembersRsp::set_allocated_next(::std::string* next) {
  if (next != NULL) {
    
  } else {
    
  }
  next_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next);
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadMembersRsp.next)
}

// -------------------------------------------------------------------

// GroupTitleChangedNotify

// string group_id = 1;
inline void GroupTitleChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupTitleChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupTitleChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupTitleChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupTitleChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupTitleChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupTitleChangedNotify.group_id)
}
#endif
inline void GroupTitleChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupTitleChangedNotify.group_id)
}
inline void GroupTitleChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupTitleChangedNotify.group_id)
}
inline ::std::string* GroupTitleChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupTitleChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupTitleChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupTitleChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupTitleChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupTitleChangedNotify.group_id)
}

// string title = 2;
inline void GroupTitleChangedNotify::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupTitleChangedNotify::title() const {
  // @@protoc_insertion_point(field_get:zproto.GroupTitleChangedNotify.title)
  return title_.GetNoArena();
}
inline void GroupTitleChangedNotify::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupTitleChangedNotify.title)
}
#if LANG_CXX11
inline void GroupTitleChangedNotify::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupTitleChangedNotify.title)
}
#endif
inline void GroupTitleChangedNotify::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupTitleChangedNotify.title)
}
inline void GroupTitleChangedNotify::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupTitleChangedNotify.title)
}
inline ::std::string* GroupTitleChangedNotify::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupTitleChangedNotify.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupTitleChangedNotify::release_title() {
  // @@protoc_insertion_point(field_release:zproto.GroupTitleChangedNotify.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupTitleChangedNotify::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupTitleChangedNotify.title)
}

// -------------------------------------------------------------------

// GroupAvatarChangedNotify

// string group_id = 1;
inline void GroupAvatarChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAvatarChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupAvatarChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupAvatarChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupAvatarChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupAvatarChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupAvatarChangedNotify.group_id)
}
#endif
inline void GroupAvatarChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupAvatarChangedNotify.group_id)
}
inline void GroupAvatarChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupAvatarChangedNotify.group_id)
}
inline ::std::string* GroupAvatarChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupAvatarChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAvatarChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupAvatarChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAvatarChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupAvatarChangedNotify.group_id)
}

// .zproto.Avatar avatar = 2;
inline bool GroupAvatarChangedNotify::has_avatar() const {
  return this != internal_default_instance() && avatar_ != NULL;
}
inline const ::zproto::Avatar& GroupAvatarChangedNotify::avatar() const {
  const ::zproto::Avatar* p = avatar_;
  // @@protoc_insertion_point(field_get:zproto.GroupAvatarChangedNotify.avatar)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Avatar*>(
      &::zproto::_Avatar_default_instance_);
}
inline ::zproto::Avatar* GroupAvatarChangedNotify::release_avatar() {
  // @@protoc_insertion_point(field_release:zproto.GroupAvatarChangedNotify.avatar)
  
  ::zproto::Avatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline ::zproto::Avatar* GroupAvatarChangedNotify::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::zproto::Avatar;
  }
  // @@protoc_insertion_point(field_mutable:zproto.GroupAvatarChangedNotify.avatar)
  return avatar_;
}
inline void GroupAvatarChangedNotify::set_allocated_avatar(::zproto::Avatar* avatar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(avatar_);
  }
  if (avatar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    
  } else {
    
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupAvatarChangedNotify.avatar)
}

// -------------------------------------------------------------------

// GroupTopicChangedNotify

// string group_id = 1;
inline void GroupTopicChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupTopicChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupTopicChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupTopicChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupTopicChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupTopicChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupTopicChangedNotify.group_id)
}
#endif
inline void GroupTopicChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupTopicChangedNotify.group_id)
}
inline void GroupTopicChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupTopicChangedNotify.group_id)
}
inline ::std::string* GroupTopicChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupTopicChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupTopicChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupTopicChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupTopicChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupTopicChangedNotify.group_id)
}

// string topic = 2;
inline void GroupTopicChangedNotify::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupTopicChangedNotify::topic() const {
  // @@protoc_insertion_point(field_get:zproto.GroupTopicChangedNotify.topic)
  return topic_.GetNoArena();
}
inline void GroupTopicChangedNotify::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupTopicChangedNotify.topic)
}
#if LANG_CXX11
inline void GroupTopicChangedNotify::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupTopicChangedNotify.topic)
}
#endif
inline void GroupTopicChangedNotify::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupTopicChangedNotify.topic)
}
inline void GroupTopicChangedNotify::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupTopicChangedNotify.topic)
}
inline ::std::string* GroupTopicChangedNotify::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupTopicChangedNotify.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupTopicChangedNotify::release_topic() {
  // @@protoc_insertion_point(field_release:zproto.GroupTopicChangedNotify.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupTopicChangedNotify::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupTopicChangedNotify.topic)
}

// -------------------------------------------------------------------

// GroupAboutChangedNotify

// string group_id = 1;
inline void GroupAboutChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAboutChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupAboutChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupAboutChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupAboutChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupAboutChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupAboutChangedNotify.group_id)
}
#endif
inline void GroupAboutChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupAboutChangedNotify.group_id)
}
inline void GroupAboutChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupAboutChangedNotify.group_id)
}
inline ::std::string* GroupAboutChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupAboutChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAboutChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupAboutChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAboutChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupAboutChangedNotify.group_id)
}

// string about = 2;
inline void GroupAboutChangedNotify::clear_about() {
  about_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAboutChangedNotify::about() const {
  // @@protoc_insertion_point(field_get:zproto.GroupAboutChangedNotify.about)
  return about_.GetNoArena();
}
inline void GroupAboutChangedNotify::set_about(const ::std::string& value) {
  
  about_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupAboutChangedNotify.about)
}
#if LANG_CXX11
inline void GroupAboutChangedNotify::set_about(::std::string&& value) {
  
  about_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupAboutChangedNotify.about)
}
#endif
inline void GroupAboutChangedNotify::set_about(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  about_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupAboutChangedNotify.about)
}
inline void GroupAboutChangedNotify::set_about(const char* value, size_t size) {
  
  about_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupAboutChangedNotify.about)
}
inline ::std::string* GroupAboutChangedNotify::mutable_about() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupAboutChangedNotify.about)
  return about_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAboutChangedNotify::release_about() {
  // @@protoc_insertion_point(field_release:zproto.GroupAboutChangedNotify.about)
  
  return about_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAboutChangedNotify::set_allocated_about(::std::string* about) {
  if (about != NULL) {
    
  } else {
    
  }
  about_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), about);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupAboutChangedNotify.about)
}

// -------------------------------------------------------------------

// GroupOwnerChangedNotify

// string group_id = 1;
inline void GroupOwnerChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupOwnerChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupOwnerChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupOwnerChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupOwnerChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupOwnerChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupOwnerChangedNotify.group_id)
}
#endif
inline void GroupOwnerChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupOwnerChangedNotify.group_id)
}
inline void GroupOwnerChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupOwnerChangedNotify.group_id)
}
inline ::std::string* GroupOwnerChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupOwnerChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupOwnerChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupOwnerChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupOwnerChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupOwnerChangedNotify.group_id)
}

// string user_id = 2;
inline void GroupOwnerChangedNotify::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupOwnerChangedNotify::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupOwnerChangedNotify.user_id)
  return user_id_.GetNoArena();
}
inline void GroupOwnerChangedNotify::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupOwnerChangedNotify.user_id)
}
#if LANG_CXX11
inline void GroupOwnerChangedNotify::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupOwnerChangedNotify.user_id)
}
#endif
inline void GroupOwnerChangedNotify::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupOwnerChangedNotify.user_id)
}
inline void GroupOwnerChangedNotify::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupOwnerChangedNotify.user_id)
}
inline ::std::string* GroupOwnerChangedNotify::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupOwnerChangedNotify.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupOwnerChangedNotify::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupOwnerChangedNotify.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupOwnerChangedNotify::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupOwnerChangedNotify.user_id)
}

// -------------------------------------------------------------------

// GroupDeletedNotify

// string group_id = 1;
inline void GroupDeletedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupDeletedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupDeletedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupDeletedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupDeletedNotify.group_id)
}
#if LANG_CXX11
inline void GroupDeletedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupDeletedNotify.group_id)
}
#endif
inline void GroupDeletedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupDeletedNotify.group_id)
}
inline void GroupDeletedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupDeletedNotify.group_id)
}
inline ::std::string* GroupDeletedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupDeletedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupDeletedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupDeletedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupDeletedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupDeletedNotify.group_id)
}

// -------------------------------------------------------------------

// GroupPermissionsChangedNotify

// string group_id = 1;
inline void GroupPermissionsChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupPermissionsChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupPermissionsChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupPermissionsChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupPermissionsChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupPermissionsChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupPermissionsChangedNotify.group_id)
}
#endif
inline void GroupPermissionsChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupPermissionsChangedNotify.group_id)
}
inline void GroupPermissionsChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupPermissionsChangedNotify.group_id)
}
inline ::std::string* GroupPermissionsChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupPermissionsChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupPermissionsChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupPermissionsChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupPermissionsChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupPermissionsChangedNotify.group_id)
}

// int64 permissions = 2;
inline void GroupPermissionsChangedNotify::clear_permissions() {
  permissions_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupPermissionsChangedNotify::permissions() const {
  // @@protoc_insertion_point(field_get:zproto.GroupPermissionsChangedNotify.permissions)
  return permissions_;
}
inline void GroupPermissionsChangedNotify::set_permissions(::google::protobuf::int64 value) {
  
  permissions_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupPermissionsChangedNotify.permissions)
}

// -------------------------------------------------------------------

// GroupFullPermissionsChangedNotify

// string group_id = 1;
inline void GroupFullPermissionsChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupFullPermissionsChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupFullPermissionsChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupFullPermissionsChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupFullPermissionsChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupFullPermissionsChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupFullPermissionsChangedNotify.group_id)
}
#endif
inline void GroupFullPermissionsChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupFullPermissionsChangedNotify.group_id)
}
inline void GroupFullPermissionsChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupFullPermissionsChangedNotify.group_id)
}
inline ::std::string* GroupFullPermissionsChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupFullPermissionsChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupFullPermissionsChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupFullPermissionsChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupFullPermissionsChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupFullPermissionsChangedNotify.group_id)
}

// int64 permissions = 2;
inline void GroupFullPermissionsChangedNotify::clear_permissions() {
  permissions_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupFullPermissionsChangedNotify::permissions() const {
  // @@protoc_insertion_point(field_get:zproto.GroupFullPermissionsChangedNotify.permissions)
  return permissions_;
}
inline void GroupFullPermissionsChangedNotify::set_permissions(::google::protobuf::int64 value) {
  
  permissions_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupFullPermissionsChangedNotify.permissions)
}

// -------------------------------------------------------------------

// GroupMemberChangedNotify

// string group_id = 1;
inline void GroupMemberChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupMemberChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMemberChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupMemberChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMemberChangedNotify.group_id)
}
#endif
inline void GroupMemberChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMemberChangedNotify.group_id)
}
inline void GroupMemberChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMemberChangedNotify.group_id)
}
inline ::std::string* GroupMemberChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMemberChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMemberChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMemberChangedNotify.group_id)
}

// bool is_member = 2;
inline void GroupMemberChangedNotify::clear_is_member() {
  is_member_ = false;
}
inline bool GroupMemberChangedNotify::is_member() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberChangedNotify.is_member)
  return is_member_;
}
inline void GroupMemberChangedNotify::set_is_member(bool value) {
  
  is_member_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupMemberChangedNotify.is_member)
}

// -------------------------------------------------------------------

// GroupMembersBecameAsyncNotify

// string group_id = 1;
inline void GroupMembersBecameAsyncNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMembersBecameAsyncNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMembersBecameAsyncNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupMembersBecameAsyncNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMembersBecameAsyncNotify.group_id)
}
#if LANG_CXX11
inline void GroupMembersBecameAsyncNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMembersBecameAsyncNotify.group_id)
}
#endif
inline void GroupMembersBecameAsyncNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMembersBecameAsyncNotify.group_id)
}
inline void GroupMembersBecameAsyncNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMembersBecameAsyncNotify.group_id)
}
inline ::std::string* GroupMembersBecameAsyncNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMembersBecameAsyncNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMembersBecameAsyncNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMembersBecameAsyncNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembersBecameAsyncNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMembersBecameAsyncNotify.group_id)
}

// -------------------------------------------------------------------

// GroupMembersUpdatedNotify

// string group_id = 1;
inline void GroupMembersUpdatedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMembersUpdatedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMembersUpdatedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupMembersUpdatedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMembersUpdatedNotify.group_id)
}
#if LANG_CXX11
inline void GroupMembersUpdatedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMembersUpdatedNotify.group_id)
}
#endif
inline void GroupMembersUpdatedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMembersUpdatedNotify.group_id)
}
inline void GroupMembersUpdatedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMembersUpdatedNotify.group_id)
}
inline ::std::string* GroupMembersUpdatedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMembersUpdatedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMembersUpdatedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMembersUpdatedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembersUpdatedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMembersUpdatedNotify.group_id)
}

// repeated .zproto.Member members = 2;
inline int GroupMembersUpdatedNotify::members_size() const {
  return members_.size();
}
inline const ::zproto::Member& GroupMembersUpdatedNotify::members(int index) const {
  // @@protoc_insertion_point(field_get:zproto.GroupMembersUpdatedNotify.members)
  return members_.Get(index);
}
inline ::zproto::Member* GroupMembersUpdatedNotify::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.GroupMembersUpdatedNotify.members)
  return members_.Mutable(index);
}
inline ::zproto::Member* GroupMembersUpdatedNotify::add_members() {
  // @@protoc_insertion_point(field_add:zproto.GroupMembersUpdatedNotify.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::Member >*
GroupMembersUpdatedNotify::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:zproto.GroupMembersUpdatedNotify.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::Member >&
GroupMembersUpdatedNotify::members() const {
  // @@protoc_insertion_point(field_list:zproto.GroupMembersUpdatedNotify.members)
  return members_;
}

// -------------------------------------------------------------------

// GroupMemberDiffNotify

// string group_id = 1;
inline void GroupMemberDiffNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberDiffNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberDiffNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupMemberDiffNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMemberDiffNotify.group_id)
}
#if LANG_CXX11
inline void GroupMemberDiffNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMemberDiffNotify.group_id)
}
#endif
inline void GroupMemberDiffNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMemberDiffNotify.group_id)
}
inline void GroupMemberDiffNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMemberDiffNotify.group_id)
}
inline ::std::string* GroupMemberDiffNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMemberDiffNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberDiffNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMemberDiffNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberDiffNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMemberDiffNotify.group_id)
}

// repeated int32 removed_users = 2;
inline int GroupMemberDiffNotify::removed_users_size() const {
  return removed_users_.size();
}
inline void GroupMemberDiffNotify::clear_removed_users() {
  removed_users_.Clear();
}
inline ::google::protobuf::int32 GroupMemberDiffNotify::removed_users(int index) const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberDiffNotify.removed_users)
  return removed_users_.Get(index);
}
inline void GroupMemberDiffNotify::set_removed_users(int index, ::google::protobuf::int32 value) {
  removed_users_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.GroupMemberDiffNotify.removed_users)
}
inline void GroupMemberDiffNotify::add_removed_users(::google::protobuf::int32 value) {
  removed_users_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.GroupMemberDiffNotify.removed_users)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GroupMemberDiffNotify::removed_users() const {
  // @@protoc_insertion_point(field_list:zproto.GroupMemberDiffNotify.removed_users)
  return removed_users_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GroupMemberDiffNotify::mutable_removed_users() {
  // @@protoc_insertion_point(field_mutable_list:zproto.GroupMemberDiffNotify.removed_users)
  return &removed_users_;
}

// repeated .zproto.Member added_members = 3;
inline int GroupMemberDiffNotify::added_members_size() const {
  return added_members_.size();
}
inline const ::zproto::Member& GroupMemberDiffNotify::added_members(int index) const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberDiffNotify.added_members)
  return added_members_.Get(index);
}
inline ::zproto::Member* GroupMemberDiffNotify::mutable_added_members(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.GroupMemberDiffNotify.added_members)
  return added_members_.Mutable(index);
}
inline ::zproto::Member* GroupMemberDiffNotify::add_added_members() {
  // @@protoc_insertion_point(field_add:zproto.GroupMemberDiffNotify.added_members)
  return added_members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::Member >*
GroupMemberDiffNotify::mutable_added_members() {
  // @@protoc_insertion_point(field_mutable_list:zproto.GroupMemberDiffNotify.added_members)
  return &added_members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::Member >&
GroupMemberDiffNotify::added_members() const {
  // @@protoc_insertion_point(field_list:zproto.GroupMemberDiffNotify.added_members)
  return added_members_;
}

// int32 members_count = 4;
inline void GroupMemberDiffNotify::clear_members_count() {
  members_count_ = 0;
}
inline ::google::protobuf::int32 GroupMemberDiffNotify::members_count() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberDiffNotify.members_count)
  return members_count_;
}
inline void GroupMemberDiffNotify::set_members_count(::google::protobuf::int32 value) {
  
  members_count_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupMemberDiffNotify.members_count)
}

// -------------------------------------------------------------------

// GroupMembersCountChangedNotify

// string group_id = 1;
inline void GroupMembersCountChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMembersCountChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMembersCountChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupMembersCountChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMembersCountChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupMembersCountChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMembersCountChangedNotify.group_id)
}
#endif
inline void GroupMembersCountChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMembersCountChangedNotify.group_id)
}
inline void GroupMembersCountChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMembersCountChangedNotify.group_id)
}
inline ::std::string* GroupMembersCountChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMembersCountChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMembersCountChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMembersCountChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembersCountChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMembersCountChangedNotify.group_id)
}

// int32 members_count = 2;
inline void GroupMembersCountChangedNotify::clear_members_count() {
  members_count_ = 0;
}
inline ::google::protobuf::int32 GroupMembersCountChangedNotify::members_count() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMembersCountChangedNotify.members_count)
  return members_count_;
}
inline void GroupMembersCountChangedNotify::set_members_count(::google::protobuf::int32 value) {
  
  members_count_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupMembersCountChangedNotify.members_count)
}

// -------------------------------------------------------------------

// GroupMemberAdminChangedNotify

// string group_id = 1;
inline void GroupMemberAdminChangedNotify::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberAdminChangedNotify::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberAdminChangedNotify.group_id)
  return group_id_.GetNoArena();
}
inline void GroupMemberAdminChangedNotify::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMemberAdminChangedNotify.group_id)
}
#if LANG_CXX11
inline void GroupMemberAdminChangedNotify::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMemberAdminChangedNotify.group_id)
}
#endif
inline void GroupMemberAdminChangedNotify::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMemberAdminChangedNotify.group_id)
}
inline void GroupMemberAdminChangedNotify::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMemberAdminChangedNotify.group_id)
}
inline ::std::string* GroupMemberAdminChangedNotify::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMemberAdminChangedNotify.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberAdminChangedNotify::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMemberAdminChangedNotify.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberAdminChangedNotify::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMemberAdminChangedNotify.group_id)
}

// string user_id = 2;
inline void GroupMemberAdminChangedNotify::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberAdminChangedNotify::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberAdminChangedNotify.user_id)
  return user_id_.GetNoArena();
}
inline void GroupMemberAdminChangedNotify::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMemberAdminChangedNotify.user_id)
}
#if LANG_CXX11
inline void GroupMemberAdminChangedNotify::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMemberAdminChangedNotify.user_id)
}
#endif
inline void GroupMemberAdminChangedNotify::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMemberAdminChangedNotify.user_id)
}
inline void GroupMemberAdminChangedNotify::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMemberAdminChangedNotify.user_id)
}
inline ::std::string* GroupMemberAdminChangedNotify::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMemberAdminChangedNotify.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberAdminChangedNotify::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMemberAdminChangedNotify.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberAdminChangedNotify::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMemberAdminChangedNotify.user_id)
}

// bool is_admin = 3;
inline void GroupMemberAdminChangedNotify::clear_is_admin() {
  is_admin_ = false;
}
inline bool GroupMemberAdminChangedNotify::is_admin() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMemberAdminChangedNotify.is_admin)
  return is_admin_;
}
inline void GroupMemberAdminChangedNotify::set_is_admin(bool value) {
  
  is_admin_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupMemberAdminChangedNotify.is_admin)
}

// -------------------------------------------------------------------

// CreateGroupReq

// int64 rid = 1;
inline void CreateGroupReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CreateGroupReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.rid)
  return rid_;
}
inline void CreateGroupReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.rid)
}

// string title = 2;
inline void CreateGroupReq::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupReq::title() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.title)
  return title_.GetNoArena();
}
inline void CreateGroupReq::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.title)
}
#if LANG_CXX11
inline void CreateGroupReq::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.CreateGroupReq.title)
}
#endif
inline void CreateGroupReq::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.CreateGroupReq.title)
}
inline void CreateGroupReq::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.CreateGroupReq.title)
}
inline ::std::string* CreateGroupReq::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupReq.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupReq::release_title() {
  // @@protoc_insertion_point(field_release:zproto.CreateGroupReq.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupReq::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:zproto.CreateGroupReq.title)
}

// repeated .zproto.UserOutPeer users = 3;
inline int CreateGroupReq::users_size() const {
  return users_.size();
}
inline const ::zproto::UserOutPeer& CreateGroupReq::users(int index) const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.users)
  return users_.Get(index);
}
inline ::zproto::UserOutPeer* CreateGroupReq::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupReq.users)
  return users_.Mutable(index);
}
inline ::zproto::UserOutPeer* CreateGroupReq::add_users() {
  // @@protoc_insertion_point(field_add:zproto.CreateGroupReq.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
CreateGroupReq::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:zproto.CreateGroupReq.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
CreateGroupReq::users() const {
  // @@protoc_insertion_point(field_list:zproto.CreateGroupReq.users)
  return users_;
}

// repeated .zproto.UpdateOptimization optimizations = 4;
inline int CreateGroupReq::optimizations_size() const {
  return optimizations_.size();
}
inline void CreateGroupReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization CreateGroupReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void CreateGroupReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.optimizations)
}
inline void CreateGroupReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.CreateGroupReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
CreateGroupReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.CreateGroupReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
CreateGroupReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.CreateGroupReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// CreateGroupRsp

// int32 seq = 1;
inline void CreateGroupRsp::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 CreateGroupRsp::seq() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.seq)
  return seq_;
}
inline void CreateGroupRsp::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:zproto.CreateGroupRsp.seq)
}

// int64 date = 6;
inline void CreateGroupRsp::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CreateGroupRsp::date() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.date)
  return date_;
}
inline void CreateGroupRsp::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.CreateGroupRsp.date)
}

// .zproto.Group group = 3;
inline bool CreateGroupRsp::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline const ::zproto::Group& CreateGroupRsp::group() const {
  const ::zproto::Group* p = group_;
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.group)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Group*>(
      &::zproto::_Group_default_instance_);
}
inline ::zproto::Group* CreateGroupRsp::release_group() {
  // @@protoc_insertion_point(field_release:zproto.CreateGroupRsp.group)
  
  ::zproto::Group* temp = group_;
  group_ = NULL;
  return temp;
}
inline ::zproto::Group* CreateGroupRsp::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::zproto::Group;
  }
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupRsp.group)
  return group_;
}
inline void CreateGroupRsp::set_allocated_group(::zproto::Group* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_);
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:zproto.CreateGroupRsp.group)
}

// repeated .zproto.User users = 4;
inline int CreateGroupRsp::users_size() const {
  return users_.size();
}
inline const ::zproto::User& CreateGroupRsp::users(int index) const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.users)
  return users_.Get(index);
}
inline ::zproto::User* CreateGroupRsp::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupRsp.users)
  return users_.Mutable(index);
}
inline ::zproto::User* CreateGroupRsp::add_users() {
  // @@protoc_insertion_point(field_add:zproto.CreateGroupRsp.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::User >*
CreateGroupRsp::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:zproto.CreateGroupRsp.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::User >&
CreateGroupRsp::users() const {
  // @@protoc_insertion_point(field_list:zproto.CreateGroupRsp.users)
  return users_;
}

// repeated .zproto.UserOutPeer user_peers = 5;
inline int CreateGroupRsp::user_peers_size() const {
  return user_peers_.size();
}
inline const ::zproto::UserOutPeer& CreateGroupRsp::user_peers(int index) const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.user_peers)
  return user_peers_.Get(index);
}
inline ::zproto::UserOutPeer* CreateGroupRsp::mutable_user_peers(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupRsp.user_peers)
  return user_peers_.Mutable(index);
}
inline ::zproto::UserOutPeer* CreateGroupRsp::add_user_peers() {
  // @@protoc_insertion_point(field_add:zproto.CreateGroupRsp.user_peers)
  return user_peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
CreateGroupRsp::mutable_user_peers() {
  // @@protoc_insertion_point(field_mutable_list:zproto.CreateGroupRsp.user_peers)
  return &user_peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
CreateGroupRsp::user_peers() const {
  // @@protoc_insertion_point(field_list:zproto.CreateGroupRsp.user_peers)
  return user_peers_;
}

// -------------------------------------------------------------------

// EditGroupTitleReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool EditGroupTitleReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& EditGroupTitleReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupTitleReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* EditGroupTitleReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupTitleReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* EditGroupTitleReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupTitleReq.group_peer)
  return group_peer_;
}
inline void EditGroupTitleReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupTitleReq.group_peer)
}

// int64 rid = 4;
inline void EditGroupTitleReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EditGroupTitleReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupTitleReq.rid)
  return rid_;
}
inline void EditGroupTitleReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.EditGroupTitleReq.rid)
}

// string title = 3;
inline void EditGroupTitleReq::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EditGroupTitleReq::title() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupTitleReq.title)
  return title_.GetNoArena();
}
inline void EditGroupTitleReq::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupTitleReq.title)
}
#if LANG_CXX11
inline void EditGroupTitleReq::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.EditGroupTitleReq.title)
}
#endif
inline void EditGroupTitleReq::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EditGroupTitleReq.title)
}
inline void EditGroupTitleReq::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EditGroupTitleReq.title)
}
inline ::std::string* EditGroupTitleReq::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupTitleReq.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EditGroupTitleReq::release_title() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupTitleReq.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EditGroupTitleReq::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupTitleReq.title)
}

// repeated .zproto.UpdateOptimization optimizations = 5;
inline int EditGroupTitleReq::optimizations_size() const {
  return optimizations_.size();
}
inline void EditGroupTitleReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization EditGroupTitleReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupTitleReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void EditGroupTitleReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupTitleReq.optimizations)
}
inline void EditGroupTitleReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.EditGroupTitleReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
EditGroupTitleReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.EditGroupTitleReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
EditGroupTitleReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.EditGroupTitleReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// EditGroupAvatarReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool EditGroupAvatarReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& EditGroupAvatarReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* EditGroupAvatarReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAvatarReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* EditGroupAvatarReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAvatarReq.group_peer)
  return group_peer_;
}
inline void EditGroupAvatarReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAvatarReq.group_peer)
}

// string rid = 4;
inline void EditGroupAvatarReq::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EditGroupAvatarReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarReq.rid)
  return rid_.GetNoArena();
}
inline void EditGroupAvatarReq::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupAvatarReq.rid)
}
#if LANG_CXX11
inline void EditGroupAvatarReq::set_rid(::std::string&& value) {
  
  rid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.EditGroupAvatarReq.rid)
}
#endif
inline void EditGroupAvatarReq::set_rid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EditGroupAvatarReq.rid)
}
inline void EditGroupAvatarReq::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EditGroupAvatarReq.rid)
}
inline ::std::string* EditGroupAvatarReq::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAvatarReq.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EditGroupAvatarReq::release_rid() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAvatarReq.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EditGroupAvatarReq::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAvatarReq.rid)
}

// .zproto.FileLocation file_location = 3;
inline bool EditGroupAvatarReq::has_file_location() const {
  return this != internal_default_instance() && file_location_ != NULL;
}
inline const ::zproto::FileLocation& EditGroupAvatarReq::file_location() const {
  const ::zproto::FileLocation* p = file_location_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarReq.file_location)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::FileLocation*>(
      &::zproto::_FileLocation_default_instance_);
}
inline ::zproto::FileLocation* EditGroupAvatarReq::release_file_location() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAvatarReq.file_location)
  
  ::zproto::FileLocation* temp = file_location_;
  file_location_ = NULL;
  return temp;
}
inline ::zproto::FileLocation* EditGroupAvatarReq::mutable_file_location() {
  
  if (file_location_ == NULL) {
    file_location_ = new ::zproto::FileLocation;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAvatarReq.file_location)
  return file_location_;
}
inline void EditGroupAvatarReq::set_allocated_file_location(::zproto::FileLocation* file_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_location_);
  }
  if (file_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_location, submessage_arena);
    }
    
  } else {
    
  }
  file_location_ = file_location;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAvatarReq.file_location)
}

// repeated .zproto.UpdateOptimization optimizations = 5;
inline int EditGroupAvatarReq::optimizations_size() const {
  return optimizations_.size();
}
inline void EditGroupAvatarReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization EditGroupAvatarReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void EditGroupAvatarReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupAvatarReq.optimizations)
}
inline void EditGroupAvatarReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.EditGroupAvatarReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
EditGroupAvatarReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.EditGroupAvatarReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
EditGroupAvatarReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.EditGroupAvatarReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// EditGroupAvatarRsp

// .zproto.Avatar avatar = 1;
inline bool EditGroupAvatarRsp::has_avatar() const {
  return this != internal_default_instance() && avatar_ != NULL;
}
inline const ::zproto::Avatar& EditGroupAvatarRsp::avatar() const {
  const ::zproto::Avatar* p = avatar_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarRsp.avatar)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Avatar*>(
      &::zproto::_Avatar_default_instance_);
}
inline ::zproto::Avatar* EditGroupAvatarRsp::release_avatar() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAvatarRsp.avatar)
  
  ::zproto::Avatar* temp = avatar_;
  avatar_ = NULL;
  return temp;
}
inline ::zproto::Avatar* EditGroupAvatarRsp::mutable_avatar() {
  
  if (avatar_ == NULL) {
    avatar_ = new ::zproto::Avatar;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAvatarRsp.avatar)
  return avatar_;
}
inline void EditGroupAvatarRsp::set_allocated_avatar(::zproto::Avatar* avatar) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(avatar_);
  }
  if (avatar) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      avatar = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, avatar, submessage_arena);
    }
    
  } else {
    
  }
  avatar_ = avatar;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAvatarRsp.avatar)
}

// int32 seq = 2;
inline void EditGroupAvatarRsp::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 EditGroupAvatarRsp::seq() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarRsp.seq)
  return seq_;
}
inline void EditGroupAvatarRsp::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:zproto.EditGroupAvatarRsp.seq)
}

// bytes state = 3;
inline void EditGroupAvatarRsp::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EditGroupAvatarRsp::state() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarRsp.state)
  return state_.GetNoArena();
}
inline void EditGroupAvatarRsp::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupAvatarRsp.state)
}
#if LANG_CXX11
inline void EditGroupAvatarRsp::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.EditGroupAvatarRsp.state)
}
#endif
inline void EditGroupAvatarRsp::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EditGroupAvatarRsp.state)
}
inline void EditGroupAvatarRsp::set_state(const void* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EditGroupAvatarRsp.state)
}
inline ::std::string* EditGroupAvatarRsp::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAvatarRsp.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EditGroupAvatarRsp::release_state() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAvatarRsp.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EditGroupAvatarRsp::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAvatarRsp.state)
}

// int64 date = 4;
inline void EditGroupAvatarRsp::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EditGroupAvatarRsp::date() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAvatarRsp.date)
  return date_;
}
inline void EditGroupAvatarRsp::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.EditGroupAvatarRsp.date)
}

// -------------------------------------------------------------------

// RemoveGroupAvatarReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool RemoveGroupAvatarReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& RemoveGroupAvatarReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.RemoveGroupAvatarReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* RemoveGroupAvatarReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.RemoveGroupAvatarReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* RemoveGroupAvatarReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.RemoveGroupAvatarReq.group_peer)
  return group_peer_;
}
inline void RemoveGroupAvatarReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.RemoveGroupAvatarReq.group_peer)
}

// int64 rid = 4;
inline void RemoveGroupAvatarReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RemoveGroupAvatarReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.RemoveGroupAvatarReq.rid)
  return rid_;
}
inline void RemoveGroupAvatarReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.RemoveGroupAvatarReq.rid)
}

// repeated .zproto.UpdateOptimization optimizations = 5;
inline int RemoveGroupAvatarReq::optimizations_size() const {
  return optimizations_.size();
}
inline void RemoveGroupAvatarReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization RemoveGroupAvatarReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.RemoveGroupAvatarReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void RemoveGroupAvatarReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.RemoveGroupAvatarReq.optimizations)
}
inline void RemoveGroupAvatarReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.RemoveGroupAvatarReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
RemoveGroupAvatarReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.RemoveGroupAvatarReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
RemoveGroupAvatarReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.RemoveGroupAvatarReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// EditGroupShortNameReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool EditGroupShortNameReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& EditGroupShortNameReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupShortNameReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* EditGroupShortNameReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupShortNameReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* EditGroupShortNameReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupShortNameReq.group_peer)
  return group_peer_;
}
inline void EditGroupShortNameReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupShortNameReq.group_peer)
}

// string short_name = 2;
inline void EditGroupShortNameReq::clear_short_name() {
  short_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EditGroupShortNameReq::short_name() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupShortNameReq.short_name)
  return short_name_.GetNoArena();
}
inline void EditGroupShortNameReq::set_short_name(const ::std::string& value) {
  
  short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupShortNameReq.short_name)
}
#if LANG_CXX11
inline void EditGroupShortNameReq::set_short_name(::std::string&& value) {
  
  short_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.EditGroupShortNameReq.short_name)
}
#endif
inline void EditGroupShortNameReq::set_short_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EditGroupShortNameReq.short_name)
}
inline void EditGroupShortNameReq::set_short_name(const char* value, size_t size) {
  
  short_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EditGroupShortNameReq.short_name)
}
inline ::std::string* EditGroupShortNameReq::mutable_short_name() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupShortNameReq.short_name)
  return short_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EditGroupShortNameReq::release_short_name() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupShortNameReq.short_name)
  
  return short_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EditGroupShortNameReq::set_allocated_short_name(::std::string* short_name) {
  if (short_name != NULL) {
    
  } else {
    
  }
  short_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_name);
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupShortNameReq.short_name)
}

// -------------------------------------------------------------------

// EditGroupTopicReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool EditGroupTopicReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& EditGroupTopicReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupTopicReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* EditGroupTopicReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupTopicReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* EditGroupTopicReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupTopicReq.group_peer)
  return group_peer_;
}
inline void EditGroupTopicReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupTopicReq.group_peer)
}

// int64 rid = 2;
inline void EditGroupTopicReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EditGroupTopicReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupTopicReq.rid)
  return rid_;
}
inline void EditGroupTopicReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.EditGroupTopicReq.rid)
}

// string topic = 3;
inline void EditGroupTopicReq::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EditGroupTopicReq::topic() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupTopicReq.topic)
  return topic_.GetNoArena();
}
inline void EditGroupTopicReq::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupTopicReq.topic)
}
#if LANG_CXX11
inline void EditGroupTopicReq::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.EditGroupTopicReq.topic)
}
#endif
inline void EditGroupTopicReq::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EditGroupTopicReq.topic)
}
inline void EditGroupTopicReq::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EditGroupTopicReq.topic)
}
inline ::std::string* EditGroupTopicReq::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupTopicReq.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EditGroupTopicReq::release_topic() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupTopicReq.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EditGroupTopicReq::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupTopicReq.topic)
}

// repeated .zproto.UpdateOptimization optimizations = 4;
inline int EditGroupTopicReq::optimizations_size() const {
  return optimizations_.size();
}
inline void EditGroupTopicReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization EditGroupTopicReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupTopicReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void EditGroupTopicReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupTopicReq.optimizations)
}
inline void EditGroupTopicReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.EditGroupTopicReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
EditGroupTopicReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.EditGroupTopicReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
EditGroupTopicReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.EditGroupTopicReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// EditGroupAboutReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool EditGroupAboutReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& EditGroupAboutReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.EditGroupAboutReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* EditGroupAboutReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAboutReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* EditGroupAboutReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAboutReq.group_peer)
  return group_peer_;
}
inline void EditGroupAboutReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAboutReq.group_peer)
}

// int64 rid = 2;
inline void EditGroupAboutReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EditGroupAboutReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAboutReq.rid)
  return rid_;
}
inline void EditGroupAboutReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.EditGroupAboutReq.rid)
}

// string about = 3;
inline void EditGroupAboutReq::clear_about() {
  about_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EditGroupAboutReq::about() const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAboutReq.about)
  return about_.GetNoArena();
}
inline void EditGroupAboutReq::set_about(const ::std::string& value) {
  
  about_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupAboutReq.about)
}
#if LANG_CXX11
inline void EditGroupAboutReq::set_about(::std::string&& value) {
  
  about_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.EditGroupAboutReq.about)
}
#endif
inline void EditGroupAboutReq::set_about(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  about_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.EditGroupAboutReq.about)
}
inline void EditGroupAboutReq::set_about(const char* value, size_t size) {
  
  about_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.EditGroupAboutReq.about)
}
inline ::std::string* EditGroupAboutReq::mutable_about() {
  
  // @@protoc_insertion_point(field_mutable:zproto.EditGroupAboutReq.about)
  return about_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EditGroupAboutReq::release_about() {
  // @@protoc_insertion_point(field_release:zproto.EditGroupAboutReq.about)
  
  return about_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EditGroupAboutReq::set_allocated_about(::std::string* about) {
  if (about != NULL) {
    
  } else {
    
  }
  about_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), about);
  // @@protoc_insertion_point(field_set_allocated:zproto.EditGroupAboutReq.about)
}

// repeated .zproto.UpdateOptimization optimizations = 5;
inline int EditGroupAboutReq::optimizations_size() const {
  return optimizations_.size();
}
inline void EditGroupAboutReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization EditGroupAboutReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.EditGroupAboutReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void EditGroupAboutReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.EditGroupAboutReq.optimizations)
}
inline void EditGroupAboutReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.EditGroupAboutReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
EditGroupAboutReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.EditGroupAboutReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
EditGroupAboutReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.EditGroupAboutReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// InviteUserReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool InviteUserReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& InviteUserReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* InviteUserReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.InviteUserReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* InviteUserReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.InviteUserReq.group_peer)
  return group_peer_;
}
inline void InviteUserReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.InviteUserReq.group_peer)
}

// int64 rid = 4;
inline void InviteUserReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InviteUserReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.rid)
  return rid_;
}
inline void InviteUserReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.InviteUserReq.rid)
}

// .zproto.UserOutPeer user = 3;
inline bool InviteUserReq::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::zproto::UserOutPeer& InviteUserReq::user() const {
  const ::zproto::UserOutPeer* p = user_;
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.user)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::UserOutPeer*>(
      &::zproto::_UserOutPeer_default_instance_);
}
inline ::zproto::UserOutPeer* InviteUserReq::release_user() {
  // @@protoc_insertion_point(field_release:zproto.InviteUserReq.user)
  
  ::zproto::UserOutPeer* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::zproto::UserOutPeer* InviteUserReq::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::zproto::UserOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.InviteUserReq.user)
  return user_;
}
inline void InviteUserReq::set_allocated_user(::zproto::UserOutPeer* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:zproto.InviteUserReq.user)
}

// repeated .zproto.UpdateOptimization optimizations = 5;
inline int InviteUserReq::optimizations_size() const {
  return optimizations_.size();
}
inline void InviteUserReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization InviteUserReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void InviteUserReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.InviteUserReq.optimizations)
}
inline void InviteUserReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.InviteUserReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
InviteUserReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.InviteUserReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
InviteUserReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.InviteUserReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// LeaveGroupReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool LeaveGroupReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& LeaveGroupReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.LeaveGroupReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* LeaveGroupReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.LeaveGroupReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* LeaveGroupReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.LeaveGroupReq.group_peer)
  return group_peer_;
}
inline void LeaveGroupReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.LeaveGroupReq.group_peer)
}

// int64 rid = 2;
inline void LeaveGroupReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaveGroupReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.LeaveGroupReq.rid)
  return rid_;
}
inline void LeaveGroupReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.LeaveGroupReq.rid)
}

// repeated .zproto.UpdateOptimization optimizations = 3;
inline int LeaveGroupReq::optimizations_size() const {
  return optimizations_.size();
}
inline void LeaveGroupReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization LeaveGroupReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LeaveGroupReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void LeaveGroupReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.LeaveGroupReq.optimizations)
}
inline void LeaveGroupReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.LeaveGroupReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
LeaveGroupReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.LeaveGroupReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
LeaveGroupReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LeaveGroupReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// LeaveAndDeleteReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool LeaveAndDeleteReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& LeaveAndDeleteReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.LeaveAndDeleteReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* LeaveAndDeleteReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.LeaveAndDeleteReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* LeaveAndDeleteReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.LeaveAndDeleteReq.group_peer)
  return group_peer_;
}
inline void LeaveAndDeleteReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.LeaveAndDeleteReq.group_peer)
}

// -------------------------------------------------------------------

// KickUserReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool KickUserReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& KickUserReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* KickUserReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.KickUserReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* KickUserReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.KickUserReq.group_peer)
  return group_peer_;
}
inline void KickUserReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.KickUserReq.group_peer)
}

// int64 rid = 4;
inline void KickUserReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KickUserReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.rid)
  return rid_;
}
inline void KickUserReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.KickUserReq.rid)
}

// .zproto.UserOutPeer user = 3;
inline bool KickUserReq::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::zproto::UserOutPeer& KickUserReq::user() const {
  const ::zproto::UserOutPeer* p = user_;
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.user)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::UserOutPeer*>(
      &::zproto::_UserOutPeer_default_instance_);
}
inline ::zproto::UserOutPeer* KickUserReq::release_user() {
  // @@protoc_insertion_point(field_release:zproto.KickUserReq.user)
  
  ::zproto::UserOutPeer* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::zproto::UserOutPeer* KickUserReq::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::zproto::UserOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.KickUserReq.user)
  return user_;
}
inline void KickUserReq::set_allocated_user(::zproto::UserOutPeer* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:zproto.KickUserReq.user)
}

// repeated .zproto.UpdateOptimization optimizations = 5;
inline int KickUserReq::optimizations_size() const {
  return optimizations_.size();
}
inline void KickUserReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization KickUserReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void KickUserReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.KickUserReq.optimizations)
}
inline void KickUserReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.KickUserReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
KickUserReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.KickUserReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
KickUserReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.KickUserReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// JoinGroupByPeerReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool JoinGroupByPeerReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& JoinGroupByPeerReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.JoinGroupByPeerReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* JoinGroupByPeerReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.JoinGroupByPeerReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* JoinGroupByPeerReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupByPeerReq.group_peer)
  return group_peer_;
}
inline void JoinGroupByPeerReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.JoinGroupByPeerReq.group_peer)
}

// -------------------------------------------------------------------

// MakeUserAdminReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool MakeUserAdminReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& MakeUserAdminReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.MakeUserAdminReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* MakeUserAdminReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.MakeUserAdminReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* MakeUserAdminReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MakeUserAdminReq.group_peer)
  return group_peer_;
}
inline void MakeUserAdminReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.MakeUserAdminReq.group_peer)
}

// .zproto.UserOutPeer user_peer = 2;
inline bool MakeUserAdminReq::has_user_peer() const {
  return this != internal_default_instance() && user_peer_ != NULL;
}
inline const ::zproto::UserOutPeer& MakeUserAdminReq::user_peer() const {
  const ::zproto::UserOutPeer* p = user_peer_;
  // @@protoc_insertion_point(field_get:zproto.MakeUserAdminReq.user_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::UserOutPeer*>(
      &::zproto::_UserOutPeer_default_instance_);
}
inline ::zproto::UserOutPeer* MakeUserAdminReq::release_user_peer() {
  // @@protoc_insertion_point(field_release:zproto.MakeUserAdminReq.user_peer)
  
  ::zproto::UserOutPeer* temp = user_peer_;
  user_peer_ = NULL;
  return temp;
}
inline ::zproto::UserOutPeer* MakeUserAdminReq::mutable_user_peer() {
  
  if (user_peer_ == NULL) {
    user_peer_ = new ::zproto::UserOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MakeUserAdminReq.user_peer)
  return user_peer_;
}
inline void MakeUserAdminReq::set_allocated_user_peer(::zproto::UserOutPeer* user_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_peer_);
  }
  if (user_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_peer, submessage_arena);
    }
    
  } else {
    
  }
  user_peer_ = user_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.MakeUserAdminReq.user_peer)
}

// -------------------------------------------------------------------

// DismissUserAdminReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool DismissUserAdminReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& DismissUserAdminReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.DismissUserAdminReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* DismissUserAdminReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.DismissUserAdminReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* DismissUserAdminReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.DismissUserAdminReq.group_peer)
  return group_peer_;
}
inline void DismissUserAdminReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.DismissUserAdminReq.group_peer)
}

// .zproto.UserOutPeer user_peer = 2;
inline bool DismissUserAdminReq::has_user_peer() const {
  return this != internal_default_instance() && user_peer_ != NULL;
}
inline const ::zproto::UserOutPeer& DismissUserAdminReq::user_peer() const {
  const ::zproto::UserOutPeer* p = user_peer_;
  // @@protoc_insertion_point(field_get:zproto.DismissUserAdminReq.user_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::UserOutPeer*>(
      &::zproto::_UserOutPeer_default_instance_);
}
inline ::zproto::UserOutPeer* DismissUserAdminReq::release_user_peer() {
  // @@protoc_insertion_point(field_release:zproto.DismissUserAdminReq.user_peer)
  
  ::zproto::UserOutPeer* temp = user_peer_;
  user_peer_ = NULL;
  return temp;
}
inline ::zproto::UserOutPeer* DismissUserAdminReq::mutable_user_peer() {
  
  if (user_peer_ == NULL) {
    user_peer_ = new ::zproto::UserOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.DismissUserAdminReq.user_peer)
  return user_peer_;
}
inline void DismissUserAdminReq::set_allocated_user_peer(::zproto::UserOutPeer* user_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_peer_);
  }
  if (user_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_peer, submessage_arena);
    }
    
  } else {
    
  }
  user_peer_ = user_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.DismissUserAdminReq.user_peer)
}

// -------------------------------------------------------------------

// TransferOwnershipReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool TransferOwnershipReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& TransferOwnershipReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.TransferOwnershipReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* TransferOwnershipReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.TransferOwnershipReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* TransferOwnershipReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.TransferOwnershipReq.group_peer)
  return group_peer_;
}
inline void TransferOwnershipReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.TransferOwnershipReq.group_peer)
}

// .zproto.UserOutPeer new_owner = 2;
inline bool TransferOwnershipReq::has_new_owner() const {
  return this != internal_default_instance() && new_owner_ != NULL;
}
inline const ::zproto::UserOutPeer& TransferOwnershipReq::new_owner() const {
  const ::zproto::UserOutPeer* p = new_owner_;
  // @@protoc_insertion_point(field_get:zproto.TransferOwnershipReq.new_owner)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::UserOutPeer*>(
      &::zproto::_UserOutPeer_default_instance_);
}
inline ::zproto::UserOutPeer* TransferOwnershipReq::release_new_owner() {
  // @@protoc_insertion_point(field_release:zproto.TransferOwnershipReq.new_owner)
  
  ::zproto::UserOutPeer* temp = new_owner_;
  new_owner_ = NULL;
  return temp;
}
inline ::zproto::UserOutPeer* TransferOwnershipReq::mutable_new_owner() {
  
  if (new_owner_ == NULL) {
    new_owner_ = new ::zproto::UserOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.TransferOwnershipReq.new_owner)
  return new_owner_;
}
inline void TransferOwnershipReq::set_allocated_new_owner(::zproto::UserOutPeer* new_owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(new_owner_);
  }
  if (new_owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_owner, submessage_arena);
    }
    
  } else {
    
  }
  new_owner_ = new_owner;
  // @@protoc_insertion_point(field_set_allocated:zproto.TransferOwnershipReq.new_owner)
}

// -------------------------------------------------------------------

// AdminSettings

// bool show_admins_to_members = 1;
inline void AdminSettings::clear_show_admins_to_members() {
  show_admins_to_members_ = false;
}
inline bool AdminSettings::show_admins_to_members() const {
  // @@protoc_insertion_point(field_get:zproto.AdminSettings.show_admins_to_members)
  return show_admins_to_members_;
}
inline void AdminSettings::set_show_admins_to_members(bool value) {
  
  show_admins_to_members_ = value;
  // @@protoc_insertion_point(field_set:zproto.AdminSettings.show_admins_to_members)
}

// bool can_members_invite = 2;
inline void AdminSettings::clear_can_members_invite() {
  can_members_invite_ = false;
}
inline bool AdminSettings::can_members_invite() const {
  // @@protoc_insertion_point(field_get:zproto.AdminSettings.can_members_invite)
  return can_members_invite_;
}
inline void AdminSettings::set_can_members_invite(bool value) {
  
  can_members_invite_ = value;
  // @@protoc_insertion_point(field_set:zproto.AdminSettings.can_members_invite)
}

// bool can_members_edit_group_info = 3;
inline void AdminSettings::clear_can_members_edit_group_info() {
  can_members_edit_group_info_ = false;
}
inline bool AdminSettings::can_members_edit_group_info() const {
  // @@protoc_insertion_point(field_get:zproto.AdminSettings.can_members_edit_group_info)
  return can_members_edit_group_info_;
}
inline void AdminSettings::set_can_members_edit_group_info(bool value) {
  
  can_members_edit_group_info_ = value;
  // @@protoc_insertion_point(field_set:zproto.AdminSettings.can_members_edit_group_info)
}

// bool can_admins_edit_group_info = 4;
inline void AdminSettings::clear_can_admins_edit_group_info() {
  can_admins_edit_group_info_ = false;
}
inline bool AdminSettings::can_admins_edit_group_info() const {
  // @@protoc_insertion_point(field_get:zproto.AdminSettings.can_admins_edit_group_info)
  return can_admins_edit_group_info_;
}
inline void AdminSettings::set_can_admins_edit_group_info(bool value) {
  
  can_admins_edit_group_info_ = value;
  // @@protoc_insertion_point(field_set:zproto.AdminSettings.can_admins_edit_group_info)
}

// bool show_join_leave_messages = 5;
inline void AdminSettings::clear_show_join_leave_messages() {
  show_join_leave_messages_ = false;
}
inline bool AdminSettings::show_join_leave_messages() const {
  // @@protoc_insertion_point(field_get:zproto.AdminSettings.show_join_leave_messages)
  return show_join_leave_messages_;
}
inline void AdminSettings::set_show_join_leave_messages(bool value) {
  
  show_join_leave_messages_ = value;
  // @@protoc_insertion_point(field_set:zproto.AdminSettings.show_join_leave_messages)
}

// -------------------------------------------------------------------

// LoadAdminSettingsReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool LoadAdminSettingsReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& LoadAdminSettingsReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.LoadAdminSettingsReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* LoadAdminSettingsReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.LoadAdminSettingsReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* LoadAdminSettingsReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.LoadAdminSettingsReq.group_peer)
  return group_peer_;
}
inline void LoadAdminSettingsReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadAdminSettingsReq.group_peer)
}

// -------------------------------------------------------------------

// LoadAdminSettingsRsp

// .zproto.AdminSettings settings = 1;
inline bool LoadAdminSettingsRsp::has_settings() const {
  return this != internal_default_instance() && settings_ != NULL;
}
inline void LoadAdminSettingsRsp::clear_settings() {
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) {
    delete settings_;
  }
  settings_ = NULL;
}
inline const ::zproto::AdminSettings& LoadAdminSettingsRsp::settings() const {
  const ::zproto::AdminSettings* p = settings_;
  // @@protoc_insertion_point(field_get:zproto.LoadAdminSettingsRsp.settings)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::AdminSettings*>(
      &::zproto::_AdminSettings_default_instance_);
}
inline ::zproto::AdminSettings* LoadAdminSettingsRsp::release_settings() {
  // @@protoc_insertion_point(field_release:zproto.LoadAdminSettingsRsp.settings)
  
  ::zproto::AdminSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline ::zproto::AdminSettings* LoadAdminSettingsRsp::mutable_settings() {
  
  if (settings_ == NULL) {
    settings_ = new ::zproto::AdminSettings;
  }
  // @@protoc_insertion_point(field_mutable:zproto.LoadAdminSettingsRsp.settings)
  return settings_;
}
inline void LoadAdminSettingsRsp::set_allocated_settings(::zproto::AdminSettings* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadAdminSettingsRsp.settings)
}

// -------------------------------------------------------------------

// SaveAdminSettingsReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool SaveAdminSettingsReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& SaveAdminSettingsReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.SaveAdminSettingsReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* SaveAdminSettingsReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.SaveAdminSettingsReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* SaveAdminSettingsReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.SaveAdminSettingsReq.group_peer)
  return group_peer_;
}
inline void SaveAdminSettingsReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.SaveAdminSettingsReq.group_peer)
}

// .zproto.AdminSettings settings = 2;
inline bool SaveAdminSettingsReq::has_settings() const {
  return this != internal_default_instance() && settings_ != NULL;
}
inline void SaveAdminSettingsReq::clear_settings() {
  if (GetArenaNoVirtual() == NULL && settings_ != NULL) {
    delete settings_;
  }
  settings_ = NULL;
}
inline const ::zproto::AdminSettings& SaveAdminSettingsReq::settings() const {
  const ::zproto::AdminSettings* p = settings_;
  // @@protoc_insertion_point(field_get:zproto.SaveAdminSettingsReq.settings)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::AdminSettings*>(
      &::zproto::_AdminSettings_default_instance_);
}
inline ::zproto::AdminSettings* SaveAdminSettingsReq::release_settings() {
  // @@protoc_insertion_point(field_release:zproto.SaveAdminSettingsReq.settings)
  
  ::zproto::AdminSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline ::zproto::AdminSettings* SaveAdminSettingsReq::mutable_settings() {
  
  if (settings_ == NULL) {
    settings_ = new ::zproto::AdminSettings;
  }
  // @@protoc_insertion_point(field_mutable:zproto.SaveAdminSettingsReq.settings)
  return settings_;
}
inline void SaveAdminSettingsReq::set_allocated_settings(::zproto::AdminSettings* settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete settings_;
  }
  if (settings) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:zproto.SaveAdminSettingsReq.settings)
}

// -------------------------------------------------------------------

// DeleteGroupReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool DeleteGroupReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& DeleteGroupReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.DeleteGroupReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* DeleteGroupReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.DeleteGroupReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* DeleteGroupReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.DeleteGroupReq.group_peer)
  return group_peer_;
}
inline void DeleteGroupReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.DeleteGroupReq.group_peer)
}

// -------------------------------------------------------------------

// ShareHistoryReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool ShareHistoryReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& ShareHistoryReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.ShareHistoryReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* ShareHistoryReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.ShareHistoryReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* ShareHistoryReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.ShareHistoryReq.group_peer)
  return group_peer_;
}
inline void ShareHistoryReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.ShareHistoryReq.group_peer)
}

// -------------------------------------------------------------------

// InviteUrlRsp

// string url = 1;
inline void InviteUrlRsp::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteUrlRsp::url() const {
  // @@protoc_insertion_point(field_get:zproto.InviteUrlRsp.url)
  return url_.GetNoArena();
}
inline void InviteUrlRsp::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.InviteUrlRsp.url)
}
#if LANG_CXX11
inline void InviteUrlRsp::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.InviteUrlRsp.url)
}
#endif
inline void InviteUrlRsp::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.InviteUrlRsp.url)
}
inline void InviteUrlRsp::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.InviteUrlRsp.url)
}
inline ::std::string* InviteUrlRsp::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:zproto.InviteUrlRsp.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteUrlRsp::release_url() {
  // @@protoc_insertion_point(field_release:zproto.InviteUrlRsp.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteUrlRsp::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:zproto.InviteUrlRsp.url)
}

// -------------------------------------------------------------------

// GetGroupInviteUrlReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool GetGroupInviteUrlReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& GetGroupInviteUrlReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.GetGroupInviteUrlReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* GetGroupInviteUrlReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.GetGroupInviteUrlReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* GetGroupInviteUrlReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.GetGroupInviteUrlReq.group_peer)
  return group_peer_;
}
inline void GetGroupInviteUrlReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.GetGroupInviteUrlReq.group_peer)
}

// -------------------------------------------------------------------

// RevokeInviteUrlReq

// .zproto.GroupOutPeer group_peer = 1;
inline bool RevokeInviteUrlReq::has_group_peer() const {
  return this != internal_default_instance() && group_peer_ != NULL;
}
inline const ::zproto::GroupOutPeer& RevokeInviteUrlReq::group_peer() const {
  const ::zproto::GroupOutPeer* p = group_peer_;
  // @@protoc_insertion_point(field_get:zproto.RevokeInviteUrlReq.group_peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::GroupOutPeer*>(
      &::zproto::_GroupOutPeer_default_instance_);
}
inline ::zproto::GroupOutPeer* RevokeInviteUrlReq::release_group_peer() {
  // @@protoc_insertion_point(field_release:zproto.RevokeInviteUrlReq.group_peer)
  
  ::zproto::GroupOutPeer* temp = group_peer_;
  group_peer_ = NULL;
  return temp;
}
inline ::zproto::GroupOutPeer* RevokeInviteUrlReq::mutable_group_peer() {
  
  if (group_peer_ == NULL) {
    group_peer_ = new ::zproto::GroupOutPeer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.RevokeInviteUrlReq.group_peer)
  return group_peer_;
}
inline void RevokeInviteUrlReq::set_allocated_group_peer(::zproto::GroupOutPeer* group_peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_peer_);
  }
  if (group_peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_peer, submessage_arena);
    }
    
  } else {
    
  }
  group_peer_ = group_peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.RevokeInviteUrlReq.group_peer)
}

// -------------------------------------------------------------------

// JoinGroupReq

// string token = 1;
inline void JoinGroupReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinGroupReq::token() const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupReq.token)
  return token_.GetNoArena();
}
inline void JoinGroupReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.JoinGroupReq.token)
}
#if LANG_CXX11
inline void JoinGroupReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.JoinGroupReq.token)
}
#endif
inline void JoinGroupReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.JoinGroupReq.token)
}
inline void JoinGroupReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.JoinGroupReq.token)
}
inline ::std::string* JoinGroupReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinGroupReq::release_token() {
  // @@protoc_insertion_point(field_release:zproto.JoinGroupReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinGroupReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:zproto.JoinGroupReq.token)
}

// repeated .zproto.UpdateOptimization optimizations = 2;
inline int JoinGroupReq::optimizations_size() const {
  return optimizations_.size();
}
inline void JoinGroupReq::clear_optimizations() {
  optimizations_.Clear();
}
inline ::zproto::UpdateOptimization JoinGroupReq::optimizations(int index) const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupReq.optimizations)
  return static_cast< ::zproto::UpdateOptimization >(optimizations_.Get(index));
}
inline void JoinGroupReq::set_optimizations(int index, ::zproto::UpdateOptimization value) {
  optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:zproto.JoinGroupReq.optimizations)
}
inline void JoinGroupReq::add_optimizations(::zproto::UpdateOptimization value) {
  optimizations_.Add(value);
  // @@protoc_insertion_point(field_add:zproto.JoinGroupReq.optimizations)
}
inline const ::google::protobuf::RepeatedField<int>&
JoinGroupReq::optimizations() const {
  // @@protoc_insertion_point(field_list:zproto.JoinGroupReq.optimizations)
  return optimizations_;
}
inline ::google::protobuf::RepeatedField<int>*
JoinGroupReq::mutable_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:zproto.JoinGroupReq.optimizations)
  return &optimizations_;
}

// -------------------------------------------------------------------

// JoinGroupRsp

// .zproto.Group group = 1;
inline bool JoinGroupRsp::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline const ::zproto::Group& JoinGroupRsp::group() const {
  const ::zproto::Group* p = group_;
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.group)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Group*>(
      &::zproto::_Group_default_instance_);
}
inline ::zproto::Group* JoinGroupRsp::release_group() {
  // @@protoc_insertion_point(field_release:zproto.JoinGroupRsp.group)
  
  ::zproto::Group* temp = group_;
  group_ = NULL;
  return temp;
}
inline ::zproto::Group* JoinGroupRsp::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::zproto::Group;
  }
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupRsp.group)
  return group_;
}
inline void JoinGroupRsp::set_allocated_group(::zproto::Group* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_);
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:zproto.JoinGroupRsp.group)
}

// repeated .zproto.User users = 5;
inline int JoinGroupRsp::users_size() const {
  return users_.size();
}
inline const ::zproto::User& JoinGroupRsp::users(int index) const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.users)
  return users_.Get(index);
}
inline ::zproto::User* JoinGroupRsp::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupRsp.users)
  return users_.Mutable(index);
}
inline ::zproto::User* JoinGroupRsp::add_users() {
  // @@protoc_insertion_point(field_add:zproto.JoinGroupRsp.users)
  return users_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::User >*
JoinGroupRsp::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:zproto.JoinGroupRsp.users)
  return &users_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::User >&
JoinGroupRsp::users() const {
  // @@protoc_insertion_point(field_list:zproto.JoinGroupRsp.users)
  return users_;
}

// repeated .zproto.UserOutPeer user_peers = 7;
inline int JoinGroupRsp::user_peers_size() const {
  return user_peers_.size();
}
inline const ::zproto::UserOutPeer& JoinGroupRsp::user_peers(int index) const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.user_peers)
  return user_peers_.Get(index);
}
inline ::zproto::UserOutPeer* JoinGroupRsp::mutable_user_peers(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupRsp.user_peers)
  return user_peers_.Mutable(index);
}
inline ::zproto::UserOutPeer* JoinGroupRsp::add_user_peers() {
  // @@protoc_insertion_point(field_add:zproto.JoinGroupRsp.user_peers)
  return user_peers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >*
JoinGroupRsp::mutable_user_peers() {
  // @@protoc_insertion_point(field_mutable_list:zproto.JoinGroupRsp.user_peers)
  return &user_peers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::UserOutPeer >&
JoinGroupRsp::user_peers() const {
  // @@protoc_insertion_point(field_list:zproto.JoinGroupRsp.user_peers)
  return user_peers_;
}

// int64 rid = 6;
inline void JoinGroupRsp::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 JoinGroupRsp::rid() const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.rid)
  return rid_;
}
inline void JoinGroupRsp::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.JoinGroupRsp.rid)
}

// int32 seq = 2;
inline void JoinGroupRsp::clear_seq() {
  seq_ = 0;
}
inline ::google::protobuf::int32 JoinGroupRsp::seq() const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.seq)
  return seq_;
}
inline void JoinGroupRsp::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:zproto.JoinGroupRsp.seq)
}

// bytes state = 3;
inline void JoinGroupRsp::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinGroupRsp::state() const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.state)
  return state_.GetNoArena();
}
inline void JoinGroupRsp::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.JoinGroupRsp.state)
}
#if LANG_CXX11
inline void JoinGroupRsp::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.JoinGroupRsp.state)
}
#endif
inline void JoinGroupRsp::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.JoinGroupRsp.state)
}
inline void JoinGroupRsp::set_state(const void* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.JoinGroupRsp.state)
}
inline ::std::string* JoinGroupRsp::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupRsp.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinGroupRsp::release_state() {
  // @@protoc_insertion_point(field_release:zproto.JoinGroupRsp.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinGroupRsp::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:zproto.JoinGroupRsp.state)
}

// int64 date = 4;
inline void JoinGroupRsp::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 JoinGroupRsp::date() const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupRsp.date)
  return date_;
}
inline void JoinGroupRsp::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.JoinGroupRsp.date)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_groups_2eproto__INCLUDED
