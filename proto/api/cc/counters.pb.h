// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: counters.proto

#ifndef PROTOBUF_counters_2eproto__INCLUDED
#define PROTOBUF_counters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_counters_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAppCountersImpl();
void InitDefaultsAppCounters();
void InitDefaultsCountersChangedNotifyImpl();
void InitDefaultsCountersChangedNotify();
inline void InitDefaults() {
  InitDefaultsAppCounters();
  InitDefaultsCountersChangedNotify();
}
}  // namespace protobuf_counters_2eproto
namespace zproto {
class AppCounters;
class AppCountersDefaultTypeInternal;
extern AppCountersDefaultTypeInternal _AppCounters_default_instance_;
class CountersChangedNotify;
class CountersChangedNotifyDefaultTypeInternal;
extern CountersChangedNotifyDefaultTypeInternal _CountersChangedNotify_default_instance_;
}  // namespace zproto
namespace zproto {

// ===================================================================

class AppCounters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.AppCounters) */ {
 public:
  AppCounters();
  virtual ~AppCounters();

  AppCounters(const AppCounters& from);

  inline AppCounters& operator=(const AppCounters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppCounters(AppCounters&& from) noexcept
    : AppCounters() {
    *this = ::std::move(from);
  }

  inline AppCounters& operator=(AppCounters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppCounters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppCounters* internal_default_instance() {
    return reinterpret_cast<const AppCounters*>(
               &_AppCounters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AppCounters* other);
  friend void swap(AppCounters& a, AppCounters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppCounters* New() const PROTOBUF_FINAL { return New(NULL); }

  AppCounters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppCounters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 global_counter = 1;
  void clear_global_counter();
  static const int kGlobalCounterFieldNumber = 1;
  ::google::protobuf::int32 global_counter() const;
  void set_global_counter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zproto.AppCounters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 global_counter_;
  mutable int _cached_size_;
  friend struct ::protobuf_counters_2eproto::TableStruct;
  friend void ::protobuf_counters_2eproto::InitDefaultsAppCountersImpl();
};
// -------------------------------------------------------------------

class CountersChangedNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.CountersChangedNotify) */ {
 public:
  CountersChangedNotify();
  virtual ~CountersChangedNotify();

  CountersChangedNotify(const CountersChangedNotify& from);

  inline CountersChangedNotify& operator=(const CountersChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CountersChangedNotify(CountersChangedNotify&& from) noexcept
    : CountersChangedNotify() {
    *this = ::std::move(from);
  }

  inline CountersChangedNotify& operator=(CountersChangedNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CountersChangedNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountersChangedNotify* internal_default_instance() {
    return reinterpret_cast<const CountersChangedNotify*>(
               &_CountersChangedNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CountersChangedNotify* other);
  friend void swap(CountersChangedNotify& a, CountersChangedNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CountersChangedNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CountersChangedNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CountersChangedNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.AppCounters counters = 1;
  bool has_counters() const;
  void clear_counters();
  static const int kCountersFieldNumber = 1;
  const ::zproto::AppCounters& counters() const;
  ::zproto::AppCounters* release_counters();
  ::zproto::AppCounters* mutable_counters();
  void set_allocated_counters(::zproto::AppCounters* counters);

  // @@protoc_insertion_point(class_scope:zproto.CountersChangedNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::AppCounters* counters_;
  mutable int _cached_size_;
  friend struct ::protobuf_counters_2eproto::TableStruct;
  friend void ::protobuf_counters_2eproto::InitDefaultsCountersChangedNotifyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppCounters

// int32 global_counter = 1;
inline void AppCounters::clear_global_counter() {
  global_counter_ = 0;
}
inline ::google::protobuf::int32 AppCounters::global_counter() const {
  // @@protoc_insertion_point(field_get:zproto.AppCounters.global_counter)
  return global_counter_;
}
inline void AppCounters::set_global_counter(::google::protobuf::int32 value) {
  
  global_counter_ = value;
  // @@protoc_insertion_point(field_set:zproto.AppCounters.global_counter)
}

// -------------------------------------------------------------------

// CountersChangedNotify

// .zproto.AppCounters counters = 1;
inline bool CountersChangedNotify::has_counters() const {
  return this != internal_default_instance() && counters_ != NULL;
}
inline void CountersChangedNotify::clear_counters() {
  if (GetArenaNoVirtual() == NULL && counters_ != NULL) {
    delete counters_;
  }
  counters_ = NULL;
}
inline const ::zproto::AppCounters& CountersChangedNotify::counters() const {
  const ::zproto::AppCounters* p = counters_;
  // @@protoc_insertion_point(field_get:zproto.CountersChangedNotify.counters)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::AppCounters*>(
      &::zproto::_AppCounters_default_instance_);
}
inline ::zproto::AppCounters* CountersChangedNotify::release_counters() {
  // @@protoc_insertion_point(field_release:zproto.CountersChangedNotify.counters)
  
  ::zproto::AppCounters* temp = counters_;
  counters_ = NULL;
  return temp;
}
inline ::zproto::AppCounters* CountersChangedNotify::mutable_counters() {
  
  if (counters_ == NULL) {
    counters_ = new ::zproto::AppCounters;
  }
  // @@protoc_insertion_point(field_mutable:zproto.CountersChangedNotify.counters)
  return counters_;
}
inline void CountersChangedNotify::set_allocated_counters(::zproto::AppCounters* counters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete counters_;
  }
  if (counters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      counters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:zproto.CountersChangedNotify.counters)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_counters_2eproto__INCLUDED
