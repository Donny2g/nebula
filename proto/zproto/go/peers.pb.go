// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peers.proto

package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// PeerType
type PeerType int32

const (
	PeerType_PRIVATE           PeerType = 0
	PeerType_GROUP             PeerType = 1
	PeerType_ENCRYPTED_PRIVATE PeerType = 2
)

var PeerType_name = map[int32]string{
	0: "PRIVATE",
	1: "GROUP",
	2: "ENCRYPTED_PRIVATE",
}
var PeerType_value = map[string]int32{
	"PRIVATE":           0,
	"GROUP":             1,
	"ENCRYPTED_PRIVATE": 2,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

// Peer
type Peer struct {
	Type PeerType `protobuf:"varint,1,opt,name=type,enum=zproto.PeerType" json:"type,omitempty"`
	Id   string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *Peer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PRIVATE
}

func (m *Peer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Out peer with access hash
type OutPeer struct {
	Type       PeerType `protobuf:"varint,1,opt,name=type,enum=zproto.PeerType" json:"type,omitempty"`
	Id         string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AccessHash uint64   `protobuf:"varint,3,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
}

func (m *OutPeer) Reset()                    { *m = OutPeer{} }
func (m *OutPeer) String() string            { return proto.CompactTextString(m) }
func (*OutPeer) ProtoMessage()               {}
func (*OutPeer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *OutPeer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PRIVATE
}

func (m *OutPeer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OutPeer) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// User's out peer
type UserOutPeer struct {
	Uid        string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
}

func (m *UserOutPeer) Reset()                    { *m = UserOutPeer{} }
func (m *UserOutPeer) String() string            { return proto.CompactTextString(m) }
func (*UserOutPeer) ProtoMessage()               {}
func (*UserOutPeer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *UserOutPeer) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserOutPeer) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Group's out peer
type GroupOutPeer struct {
	GroupId    string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	AccessHash uint64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
}

func (m *GroupOutPeer) Reset()                    { *m = GroupOutPeer{} }
func (m *GroupOutPeer) String() string            { return proto.CompactTextString(m) }
func (*GroupOutPeer) ProtoMessage()               {}
func (*GroupOutPeer) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *GroupOutPeer) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *GroupOutPeer) GetAccessHash() uint64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func init() {
	proto.RegisterType((*Peer)(nil), "zproto.Peer")
	proto.RegisterType((*OutPeer)(nil), "zproto.OutPeer")
	proto.RegisterType((*UserOutPeer)(nil), "zproto.UserOutPeer")
	proto.RegisterType((*GroupOutPeer)(nil), "zproto.GroupOutPeer")
	proto.RegisterEnum("zproto.PeerType", PeerType_name, PeerType_value)
}

func init() { proto.RegisterFile("peers.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xb1, 0x4f, 0x83, 0x40,
	0x18, 0xc5, 0xe5, 0x8a, 0xa5, 0x7c, 0x98, 0x06, 0x2f, 0x31, 0xe2, 0x24, 0x21, 0x0e, 0xc4, 0x81,
	0x41, 0x27, 0x13, 0x07, 0xad, 0x92, 0xb6, 0x0e, 0x96, 0x5c, 0xa8, 0x89, 0x2e, 0x88, 0xf0, 0xa5,
	0x30, 0x58, 0x2e, 0x77, 0x30, 0xb4, 0x7f, 0xbd, 0xb9, 0xab, 0x38, 0xe8, 0x60, 0xd2, 0xe9, 0xdd,
	0x7b, 0xef, 0xf2, 0x7b, 0xb9, 0x03, 0x87, 0x23, 0x0a, 0x19, 0x71, 0xd1, 0xb4, 0x0d, 0x1d, 0x6e,
	0xb5, 0x06, 0xb7, 0x60, 0x26, 0x88, 0x82, 0x5e, 0x80, 0xd9, 0x6e, 0x38, 0x7a, 0x86, 0x6f, 0x84,
	0xe3, 0x2b, 0x37, 0xda, 0xd5, 0x91, 0xea, 0xd2, 0x0d, 0x47, 0xa6, 0x5b, 0x3a, 0x06, 0x52, 0x97,
	0x1e, 0xf1, 0x8d, 0xd0, 0x66, 0xa4, 0x2e, 0x83, 0x77, 0xb0, 0x16, 0x5d, 0xbb, 0x3f, 0x80, 0x9e,
	0x83, 0x93, 0x17, 0x05, 0x4a, 0x99, 0x55, 0xb9, 0xac, 0xbc, 0x81, 0x6f, 0x84, 0x26, 0x83, 0x5d,
	0x34, 0xcb, 0x65, 0x15, 0xdc, 0x81, 0xb3, 0x94, 0x28, 0xfa, 0x15, 0x17, 0x06, 0x5d, 0x5d, 0xea,
	0x11, 0x9b, 0xa9, 0xe3, 0x6f, 0x02, 0xf9, 0x43, 0x78, 0x82, 0xa3, 0xa9, 0x68, 0x3a, 0xde, 0x23,
	0xce, 0x60, 0xb4, 0x52, 0x3e, 0xfb, 0xe1, 0x58, 0xda, 0xcf, 0xff, 0x67, 0x5d, 0xde, 0xc0, 0xa8,
	0x7f, 0x10, 0x75, 0xc0, 0x4a, 0xd8, 0xfc, 0xe5, 0x3e, 0x8d, 0xdd, 0x03, 0x6a, 0xc3, 0xe1, 0x94,
	0x2d, 0x96, 0x89, 0x6b, 0xd0, 0x13, 0x38, 0x8e, 0x9f, 0x1f, 0xd8, 0x6b, 0x92, 0xc6, 0x8f, 0x59,
	0x7f, 0x83, 0x4c, 0x42, 0x38, 0x2d, 0x9a, 0xcf, 0x68, 0x5b, 0x54, 0x79, 0x1b, 0xe1, 0x7a, 0x55,
	0xaf, 0xf1, 0xfb, 0x8f, 0x26, 0xce, 0x5b, 0xa2, 0x54, 0x91, 0xe5, 0x8c, 0x7c, 0x0c, 0x75, 0x7a,
	0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0xac, 0xc6, 0xd4, 0x57, 0xb0, 0x01, 0x00, 0x00,
}
