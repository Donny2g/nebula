// Code generated by protoc-gen-go. DO NOT EDIT.
// source: groups.proto

package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 群成员
type GroupMember struct {
	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	InviterUid string `protobuf:"bytes,2,opt,name=inviter_uid,json=inviterUid" json:"inviter_uid,omitempty"`
	Date       int64  `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	IsAdmin    bool   `protobuf:"varint,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
}

func (m *GroupMember) Reset()                    { *m = GroupMember{} }
func (m *GroupMember) String() string            { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()               {}
func (*GroupMember) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *GroupMember) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *GroupMember) GetInviterUid() string {
	if m != nil {
		return m.InviterUid
	}
	return ""
}

func (m *GroupMember) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *GroupMember) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

// 群成员
type Group struct {
	GroupId string         `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Title   string         `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Avatar  string         `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	Members []*GroupMember `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Group) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Group) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Group) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Group) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

// 创建群请求
// CreateGroupReq --> CreateGroupRsp
type CreateGroupReq struct {
	CreatorUserId string   `protobuf:"bytes,1,opt,name=creator_user_id,json=creatorUserId" json:"creator_user_id,omitempty"`
	ClientGroupId int64    `protobuf:"varint,2,opt,name=client_group_id,json=clientGroupId" json:"client_group_id,omitempty"`
	Title         string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	UserIds       []string `protobuf:"bytes,4,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *CreateGroupReq) Reset()                    { *m = CreateGroupReq{} }
func (m *CreateGroupReq) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupReq) ProtoMessage()               {}
func (*CreateGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *CreateGroupReq) GetCreatorUserId() string {
	if m != nil {
		return m.CreatorUserId
	}
	return ""
}

func (m *CreateGroupReq) GetClientGroupId() int64 {
	if m != nil {
		return m.ClientGroupId
	}
	return 0
}

func (m *CreateGroupReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateGroupReq) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// 创建群响应
type CreateGroupRsp struct {
	Seq     uint64   `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Created uint64   `protobuf:"varint,2,opt,name=created" json:"created,omitempty"`
	Group   *Group   `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	UserIds []string `protobuf:"bytes,4,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *CreateGroupRsp) Reset()                    { *m = CreateGroupRsp{} }
func (m *CreateGroupRsp) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRsp) ProtoMessage()               {}
func (*CreateGroupRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *CreateGroupRsp) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *CreateGroupRsp) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *CreateGroupRsp) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *CreateGroupRsp) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// 加载群成员
// LoadMembersReq --> LoadMembersRsp
type LoadMembersReq struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *LoadMembersReq) Reset()                    { *m = LoadMembersReq{} }
func (m *LoadMembersReq) String() string            { return proto.CompactTextString(m) }
func (*LoadMembersReq) ProtoMessage()               {}
func (*LoadMembersReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *LoadMembersReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// LoadMembersRsp
type LoadMembersRsp struct {
	Members []*GroupMember `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *LoadMembersRsp) Reset()                    { *m = LoadMembersRsp{} }
func (m *LoadMembersRsp) String() string            { return proto.CompactTextString(m) }
func (*LoadMembersRsp) ProtoMessage()               {}
func (*LoadMembersRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *LoadMembersRsp) GetMembers() []*GroupMember {
	if m != nil {
		return m.Members
	}
	return nil
}

// 加载群信息
// LoadFullGroupsReq --> LoadFullGroupsRsp
type LoadFullGroupsReq struct {
	Groups []string `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *LoadFullGroupsReq) Reset()                    { *m = LoadFullGroupsReq{} }
func (m *LoadFullGroupsReq) String() string            { return proto.CompactTextString(m) }
func (*LoadFullGroupsReq) ProtoMessage()               {}
func (*LoadFullGroupsReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *LoadFullGroupsReq) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

// LoadFullGroupsRsp
type LoadFullGroupsRsp struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *LoadFullGroupsRsp) Reset()                    { *m = LoadFullGroupsRsp{} }
func (m *LoadFullGroupsRsp) String() string            { return proto.CompactTextString(m) }
func (*LoadFullGroupsRsp) ProtoMessage()               {}
func (*LoadFullGroupsRsp) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *LoadFullGroupsRsp) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// 邀请用户加群
// InviteUserReq --> SeqDateRsp
type InviteUserReq struct {
	GroupId       string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rid           int64  `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	InvitedUserId string `protobuf:"bytes,3,opt,name=invited_user_id,json=invitedUserId" json:"invited_user_id,omitempty"`
}

func (m *InviteUserReq) Reset()                    { *m = InviteUserReq{} }
func (m *InviteUserReq) String() string            { return proto.CompactTextString(m) }
func (*InviteUserReq) ProtoMessage()               {}
func (*InviteUserReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *InviteUserReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *InviteUserReq) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *InviteUserReq) GetInvitedUserId() string {
	if m != nil {
		return m.InvitedUserId
	}
	return ""
}

// 退群
// LeaveGroupReq --> SeqDateRsp
type LeaveGroupReq struct {
	// int32 COMMAND_ID = 70;
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rid     int64  `protobuf:"varint,2,opt,name=rid" json:"rid,omitempty"`
}

func (m *LeaveGroupReq) Reset()                    { *m = LeaveGroupReq{} }
func (m *LeaveGroupReq) String() string            { return proto.CompactTextString(m) }
func (*LeaveGroupReq) ProtoMessage()               {}
func (*LeaveGroupReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *LeaveGroupReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *LeaveGroupReq) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

// 退群并清空聊天记录
// LeaveAndDeleteReq --> SeqRsp
type LeaveAndDeleteReq struct {
	// int32 COMMAND_ID = 2721;
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *LeaveAndDeleteReq) Reset()                    { *m = LeaveAndDeleteReq{} }
func (m *LeaveAndDeleteReq) String() string            { return proto.CompactTextString(m) }
func (*LeaveAndDeleteReq) ProtoMessage()               {}
func (*LeaveAndDeleteReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *LeaveAndDeleteReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// 踢出群
// KickUserReq --> SeqDateRsp
type KickUserReq struct {
	// int32 COMMAND_ID = 71;
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rid     int64  `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	UserId  string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *KickUserReq) Reset()                    { *m = KickUserReq{} }
func (m *KickUserReq) String() string            { return proto.CompactTextString(m) }
func (*KickUserReq) ProtoMessage()               {}
func (*KickUserReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *KickUserReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *KickUserReq) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *KickUserReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// 同意进群
// JoinGroupByPeerReq --> SeqRsp
type JoinGroupByPeerReq struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *JoinGroupByPeerReq) Reset()                    { *m = JoinGroupByPeerReq{} }
func (m *JoinGroupByPeerReq) String() string            { return proto.CompactTextString(m) }
func (*JoinGroupByPeerReq) ProtoMessage()               {}
func (*JoinGroupByPeerReq) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *JoinGroupByPeerReq) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func init() {
	proto.RegisterType((*GroupMember)(nil), "zproto.GroupMember")
	proto.RegisterType((*Group)(nil), "zproto.Group")
	proto.RegisterType((*CreateGroupReq)(nil), "zproto.CreateGroupReq")
	proto.RegisterType((*CreateGroupRsp)(nil), "zproto.CreateGroupRsp")
	proto.RegisterType((*LoadMembersReq)(nil), "zproto.LoadMembersReq")
	proto.RegisterType((*LoadMembersRsp)(nil), "zproto.LoadMembersRsp")
	proto.RegisterType((*LoadFullGroupsReq)(nil), "zproto.LoadFullGroupsReq")
	proto.RegisterType((*LoadFullGroupsRsp)(nil), "zproto.LoadFullGroupsRsp")
	proto.RegisterType((*InviteUserReq)(nil), "zproto.InviteUserReq")
	proto.RegisterType((*LeaveGroupReq)(nil), "zproto.LeaveGroupReq")
	proto.RegisterType((*LeaveAndDeleteReq)(nil), "zproto.LeaveAndDeleteReq")
	proto.RegisterType((*KickUserReq)(nil), "zproto.KickUserReq")
	proto.RegisterType((*JoinGroupByPeerReq)(nil), "zproto.JoinGroupByPeerReq")
}

func init() { proto.RegisterFile("groups.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x5f, 0x6b, 0xd4, 0x40,
	0x10, 0x27, 0x97, 0x6b, 0x72, 0x37, 0x31, 0xd5, 0xae, 0xd2, 0xa6, 0x4f, 0x1e, 0x29, 0xca, 0x41,
	0x31, 0x42, 0x7d, 0x13, 0x41, 0x7a, 0x8a, 0xf5, 0xb4, 0x42, 0x59, 0xe9, 0x8b, 0x2f, 0x21, 0xbd,
	0x1d, 0xea, 0x62, 0x2e, 0x49, 0xb3, 0x7b, 0x07, 0x16, 0xc1, 0xcf, 0xe0, 0x37, 0x96, 0x9d, 0xcd,
	0x5d, 0x13, 0x8b, 0x3d, 0xf1, 0x29, 0x3b, 0xb3, 0x93, 0xf9, 0xfd, 0x99, 0x59, 0xb8, 0x77, 0x59,
	0x97, 0x8b, 0x4a, 0x25, 0x55, 0x5d, 0xea, 0x92, 0x79, 0xd7, 0xf4, 0x8d, 0x97, 0x10, 0x9c, 0x98,
	0xfc, 0x27, 0x9c, 0x5f, 0x60, 0xcd, 0xf6, 0xc0, 0x5f, 0x28, 0xac, 0x53, 0x29, 0x22, 0x67, 0xe4,
	0x8c, 0x87, 0xdc, 0x33, 0xe1, 0x54, 0xb0, 0xc7, 0x10, 0xc8, 0x62, 0x29, 0x35, 0xd6, 0xe9, 0x42,
	0x8a, 0xa8, 0x47, 0x97, 0xd0, 0xa4, 0xce, 0xa5, 0x60, 0x0c, 0xfa, 0x22, 0xd3, 0x18, 0xb9, 0x23,
	0x67, 0xec, 0x72, 0x3a, 0xb3, 0x7d, 0x18, 0x48, 0x95, 0x66, 0x62, 0x2e, 0x8b, 0xa8, 0x3f, 0x72,
	0xc6, 0x03, 0xee, 0x4b, 0x75, 0x6c, 0xc2, 0xf8, 0x27, 0x6c, 0x11, 0xae, 0xa9, 0x21, 0x62, 0x37,
	0x90, 0x3e, 0xc5, 0x53, 0xc1, 0x1e, 0xc1, 0x96, 0x96, 0x3a, 0xc7, 0x06, 0xcd, 0x06, 0x6c, 0x17,
	0xbc, 0x6c, 0x99, 0xe9, 0xac, 0x26, 0xa8, 0x21, 0x6f, 0x22, 0xf6, 0x0c, 0xfc, 0x39, 0x89, 0x50,
	0x51, 0x7f, 0xe4, 0x8e, 0x83, 0xa3, 0x87, 0x89, 0xd5, 0x98, 0xb4, 0x04, 0xf2, 0x55, 0x4d, 0xfc,
	0xcb, 0x81, 0xed, 0x37, 0x35, 0x66, 0x1a, 0xe9, 0x9a, 0xe3, 0x15, 0x7b, 0x0a, 0xf7, 0x67, 0x26,
	0x53, 0xd6, 0x69, 0xd7, 0x84, 0xb0, 0x49, 0x9f, 0x5b, 0x2f, 0x4c, 0x5d, 0x2e, 0xb1, 0xd0, 0xe9,
	0x9a, 0x79, 0x8f, 0x54, 0x87, 0x36, 0x7d, 0xf2, 0x27, 0x7f, 0xb7, 0xcd, 0x7f, 0x1f, 0x06, 0x4d,
	0x77, 0x4b, 0x74, 0xc8, 0x7d, 0xeb, 0xb1, 0x8a, 0x7f, 0x74, 0x29, 0xa9, 0x8a, 0x3d, 0x00, 0x57,
	0xe1, 0x15, 0xd1, 0xe8, 0x73, 0x73, 0x64, 0x11, 0xf8, 0xc4, 0x06, 0x2d, 0x68, 0x9f, 0xaf, 0x42,
	0x76, 0x00, 0x5b, 0xc4, 0x87, 0xe0, 0x82, 0xa3, 0xb0, 0x23, 0x9f, 0xdb, 0xbb, 0xbb, 0xd0, 0x0f,
	0x61, 0xfb, 0xb4, 0xcc, 0x84, 0x35, 0x4a, 0x19, 0x43, 0xfe, 0x3e, 0x9b, 0xf8, 0x75, 0xb7, 0x58,
	0x55, 0x6d, 0xff, 0x9d, 0x7f, 0xf0, 0xff, 0x10, 0x76, 0x4c, 0x83, 0x77, 0x8b, 0x3c, 0xa7, 0x7b,
	0x02, 0xdc, 0x05, 0xcf, 0x6e, 0x29, 0xb5, 0x18, 0xf2, 0x26, 0x8a, 0x5f, 0xde, 0x2a, 0x56, 0x15,
	0x7b, 0xd2, 0x29, 0xbe, 0x25, 0x78, 0xf5, 0xaf, 0x80, 0x70, 0x4a, 0x6b, 0x6a, 0xa6, 0x77, 0xb7,
	0x2a, 0x63, 0x77, 0x2d, 0x05, 0xed, 0xaa, 0xcb, 0xcd, 0xd1, 0xcc, 0xda, 0x2e, 0xb9, 0x58, 0xef,
	0x84, 0x9d, 0x66, 0xd8, 0xa4, 0xed, 0x4e, 0xc4, 0xaf, 0x20, 0x3c, 0xc5, 0x6c, 0x79, 0xb3, 0x4c,
	0x9b, 0x51, 0x7a, 0x6b, 0x94, 0x38, 0x81, 0x1d, 0xfa, 0xfb, 0xb8, 0x10, 0x6f, 0x31, 0x47, 0x8d,
	0x1b, 0xdc, 0xff, 0x0c, 0xc1, 0x47, 0x39, 0xfb, 0xf6, 0x5f, 0x8a, 0x5a, 0x4f, 0xdc, 0x6d, 0x3f,
	0xf1, 0xf8, 0x39, 0xb0, 0x0f, 0xa5, 0x2c, 0x48, 0xc1, 0xe4, 0xfb, 0x19, 0x6e, 0xea, 0x3d, 0x39,
	0x80, 0xbd, 0x59, 0x39, 0x4f, 0xae, 0x67, 0x5f, 0x33, 0x9d, 0x60, 0x71, 0x29, 0x0b, 0x6c, 0x46,
	0x30, 0xf1, 0xbe, 0x9c, 0x99, 0xef, 0xfb, 0xde, 0x85, 0x47, 0x89, 0x17, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0x12, 0x68, 0xe6, 0x7f, 0x04, 0x00, 0x00,
}
