// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groups.proto

#ifndef PROTOBUF_groups_2eproto__INCLUDED
#define PROTOBUF_groups_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_groups_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGroupMemberImpl();
void InitDefaultsGroupMember();
void InitDefaultsGroupImpl();
void InitDefaultsGroup();
void InitDefaultsCreateGroupReqImpl();
void InitDefaultsCreateGroupReq();
void InitDefaultsCreateGroupRspImpl();
void InitDefaultsCreateGroupRsp();
void InitDefaultsLoadMembersReqImpl();
void InitDefaultsLoadMembersReq();
void InitDefaultsLoadMembersRspImpl();
void InitDefaultsLoadMembersRsp();
void InitDefaultsLoadFullGroupsReqImpl();
void InitDefaultsLoadFullGroupsReq();
void InitDefaultsLoadFullGroupsRspImpl();
void InitDefaultsLoadFullGroupsRsp();
void InitDefaultsInviteUserReqImpl();
void InitDefaultsInviteUserReq();
void InitDefaultsLeaveGroupReqImpl();
void InitDefaultsLeaveGroupReq();
void InitDefaultsLeaveAndDeleteReqImpl();
void InitDefaultsLeaveAndDeleteReq();
void InitDefaultsKickUserReqImpl();
void InitDefaultsKickUserReq();
void InitDefaultsJoinGroupByPeerReqImpl();
void InitDefaultsJoinGroupByPeerReq();
inline void InitDefaults() {
  InitDefaultsGroupMember();
  InitDefaultsGroup();
  InitDefaultsCreateGroupReq();
  InitDefaultsCreateGroupRsp();
  InitDefaultsLoadMembersReq();
  InitDefaultsLoadMembersRsp();
  InitDefaultsLoadFullGroupsReq();
  InitDefaultsLoadFullGroupsRsp();
  InitDefaultsInviteUserReq();
  InitDefaultsLeaveGroupReq();
  InitDefaultsLeaveAndDeleteReq();
  InitDefaultsKickUserReq();
  InitDefaultsJoinGroupByPeerReq();
}
}  // namespace protobuf_groups_2eproto
namespace zproto {
class CreateGroupReq;
class CreateGroupReqDefaultTypeInternal;
extern CreateGroupReqDefaultTypeInternal _CreateGroupReq_default_instance_;
class CreateGroupRsp;
class CreateGroupRspDefaultTypeInternal;
extern CreateGroupRspDefaultTypeInternal _CreateGroupRsp_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupMember;
class GroupMemberDefaultTypeInternal;
extern GroupMemberDefaultTypeInternal _GroupMember_default_instance_;
class InviteUserReq;
class InviteUserReqDefaultTypeInternal;
extern InviteUserReqDefaultTypeInternal _InviteUserReq_default_instance_;
class JoinGroupByPeerReq;
class JoinGroupByPeerReqDefaultTypeInternal;
extern JoinGroupByPeerReqDefaultTypeInternal _JoinGroupByPeerReq_default_instance_;
class KickUserReq;
class KickUserReqDefaultTypeInternal;
extern KickUserReqDefaultTypeInternal _KickUserReq_default_instance_;
class LeaveAndDeleteReq;
class LeaveAndDeleteReqDefaultTypeInternal;
extern LeaveAndDeleteReqDefaultTypeInternal _LeaveAndDeleteReq_default_instance_;
class LeaveGroupReq;
class LeaveGroupReqDefaultTypeInternal;
extern LeaveGroupReqDefaultTypeInternal _LeaveGroupReq_default_instance_;
class LoadFullGroupsReq;
class LoadFullGroupsReqDefaultTypeInternal;
extern LoadFullGroupsReqDefaultTypeInternal _LoadFullGroupsReq_default_instance_;
class LoadFullGroupsRsp;
class LoadFullGroupsRspDefaultTypeInternal;
extern LoadFullGroupsRspDefaultTypeInternal _LoadFullGroupsRsp_default_instance_;
class LoadMembersReq;
class LoadMembersReqDefaultTypeInternal;
extern LoadMembersReqDefaultTypeInternal _LoadMembersReq_default_instance_;
class LoadMembersRsp;
class LoadMembersRspDefaultTypeInternal;
extern LoadMembersRspDefaultTypeInternal _LoadMembersRsp_default_instance_;
}  // namespace zproto
namespace zproto {

// ===================================================================

class GroupMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.GroupMember) */ {
 public:
  GroupMember();
  virtual ~GroupMember();

  GroupMember(const GroupMember& from);

  inline GroupMember& operator=(const GroupMember& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GroupMember(GroupMember&& from) noexcept
    : GroupMember() {
    *this = ::std::move(from);
  }

  inline GroupMember& operator=(GroupMember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMember* internal_default_instance() {
    return reinterpret_cast<const GroupMember*>(
               &_GroupMember_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GroupMember* other);
  friend void swap(GroupMember& a, GroupMember& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GroupMember* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupMember* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string inviter_uid = 2;
  void clear_inviter_uid();
  static const int kInviterUidFieldNumber = 2;
  const ::std::string& inviter_uid() const;
  void set_inviter_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_inviter_uid(::std::string&& value);
  #endif
  void set_inviter_uid(const char* value);
  void set_inviter_uid(const char* value, size_t size);
  ::std::string* mutable_inviter_uid();
  ::std::string* release_inviter_uid();
  void set_allocated_inviter_uid(::std::string* inviter_uid);

  // int64 date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  ::google::protobuf::int64 date() const;
  void set_date(::google::protobuf::int64 value);

  // bool is_admin = 4;
  void clear_is_admin();
  static const int kIsAdminFieldNumber = 4;
  bool is_admin() const;
  void set_is_admin(bool value);

  // @@protoc_insertion_point(class_scope:zproto.GroupMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr inviter_uid_;
  ::google::protobuf::int64 date_;
  bool is_admin_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupMemberImpl();
};
// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Group* other);
  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const PROTOBUF_FINAL { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.GroupMember members = 4;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 4;
  const ::zproto::GroupMember& members(int index) const;
  ::zproto::GroupMember* mutable_members(int index);
  ::zproto::GroupMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >&
      members() const;

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string title = 2;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string avatar = 3;
  void clear_avatar();
  static const int kAvatarFieldNumber = 3;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // @@protoc_insertion_point(class_scope:zproto.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember > members_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsGroupImpl();
};
// -------------------------------------------------------------------

class CreateGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.CreateGroupReq) */ {
 public:
  CreateGroupReq();
  virtual ~CreateGroupReq();

  CreateGroupReq(const CreateGroupReq& from);

  inline CreateGroupReq& operator=(const CreateGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupReq(CreateGroupReq&& from) noexcept
    : CreateGroupReq() {
    *this = ::std::move(from);
  }

  inline CreateGroupReq& operator=(CreateGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupReq* internal_default_instance() {
    return reinterpret_cast<const CreateGroupReq*>(
               &_CreateGroupReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CreateGroupReq* other);
  friend void swap(CreateGroupReq& a, CreateGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupReq* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateGroupReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string user_ids = 4;
  int user_ids_size() const;
  void clear_user_ids();
  static const int kUserIdsFieldNumber = 4;
  const ::std::string& user_ids(int index) const;
  ::std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_user_ids(int index, ::std::string&& value);
  #endif
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  ::std::string* add_user_ids();
  void add_user_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_user_ids(::std::string&& value);
  #endif
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_ids();

  // string creator_user_id = 1;
  void clear_creator_user_id();
  static const int kCreatorUserIdFieldNumber = 1;
  const ::std::string& creator_user_id() const;
  void set_creator_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_creator_user_id(::std::string&& value);
  #endif
  void set_creator_user_id(const char* value);
  void set_creator_user_id(const char* value, size_t size);
  ::std::string* mutable_creator_user_id();
  ::std::string* release_creator_user_id();
  void set_allocated_creator_user_id(::std::string* creator_user_id);

  // string title = 3;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // int64 client_group_id = 2;
  void clear_client_group_id();
  static const int kClientGroupIdFieldNumber = 2;
  ::google::protobuf::int64 client_group_id() const;
  void set_client_group_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.CreateGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_ids_;
  ::google::protobuf::internal::ArenaStringPtr creator_user_id_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::int64 client_group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsCreateGroupReqImpl();
};
// -------------------------------------------------------------------

class CreateGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.CreateGroupRsp) */ {
 public:
  CreateGroupRsp();
  virtual ~CreateGroupRsp();

  CreateGroupRsp(const CreateGroupRsp& from);

  inline CreateGroupRsp& operator=(const CreateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateGroupRsp(CreateGroupRsp&& from) noexcept
    : CreateGroupRsp() {
    *this = ::std::move(from);
  }

  inline CreateGroupRsp& operator=(CreateGroupRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateGroupRsp* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRsp*>(
               &_CreateGroupRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CreateGroupRsp* other);
  friend void swap(CreateGroupRsp& a, CreateGroupRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateGroupRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string user_ids = 4;
  int user_ids_size() const;
  void clear_user_ids();
  static const int kUserIdsFieldNumber = 4;
  const ::std::string& user_ids(int index) const;
  ::std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_user_ids(int index, ::std::string&& value);
  #endif
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  ::std::string* add_user_ids();
  void add_user_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_user_ids(::std::string&& value);
  #endif
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_ids();

  // .zproto.Group group = 3;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 3;
  const ::zproto::Group& group() const;
  ::zproto::Group* release_group();
  ::zproto::Group* mutable_group();
  void set_allocated_group(::zproto::Group* group);

  // uint64 seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  ::google::protobuf::uint64 seq() const;
  void set_seq(::google::protobuf::uint64 value);

  // uint64 created = 2;
  void clear_created();
  static const int kCreatedFieldNumber = 2;
  ::google::protobuf::uint64 created() const;
  void set_created(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zproto.CreateGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_ids_;
  ::zproto::Group* group_;
  ::google::protobuf::uint64 seq_;
  ::google::protobuf::uint64 created_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsCreateGroupRspImpl();
};
// -------------------------------------------------------------------

class LoadMembersReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadMembersReq) */ {
 public:
  LoadMembersReq();
  virtual ~LoadMembersReq();

  LoadMembersReq(const LoadMembersReq& from);

  inline LoadMembersReq& operator=(const LoadMembersReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadMembersReq(LoadMembersReq&& from) noexcept
    : LoadMembersReq() {
    *this = ::std::move(from);
  }

  inline LoadMembersReq& operator=(LoadMembersReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadMembersReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadMembersReq* internal_default_instance() {
    return reinterpret_cast<const LoadMembersReq*>(
               &_LoadMembersReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(LoadMembersReq* other);
  friend void swap(LoadMembersReq& a, LoadMembersReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadMembersReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadMembersReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadMembersReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:zproto.LoadMembersReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadMembersReqImpl();
};
// -------------------------------------------------------------------

class LoadMembersRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadMembersRsp) */ {
 public:
  LoadMembersRsp();
  virtual ~LoadMembersRsp();

  LoadMembersRsp(const LoadMembersRsp& from);

  inline LoadMembersRsp& operator=(const LoadMembersRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadMembersRsp(LoadMembersRsp&& from) noexcept
    : LoadMembersRsp() {
    *this = ::std::move(from);
  }

  inline LoadMembersRsp& operator=(LoadMembersRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadMembersRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadMembersRsp* internal_default_instance() {
    return reinterpret_cast<const LoadMembersRsp*>(
               &_LoadMembersRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LoadMembersRsp* other);
  friend void swap(LoadMembersRsp& a, LoadMembersRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadMembersRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadMembersRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadMembersRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.GroupMember members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  const ::zproto::GroupMember& members(int index) const;
  ::zproto::GroupMember* mutable_members(int index);
  ::zproto::GroupMember* add_members();
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >*
      mutable_members();
  const ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >&
      members() const;

  // @@protoc_insertion_point(class_scope:zproto.LoadMembersRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember > members_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadMembersRspImpl();
};
// -------------------------------------------------------------------

class LoadFullGroupsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadFullGroupsReq) */ {
 public:
  LoadFullGroupsReq();
  virtual ~LoadFullGroupsReq();

  LoadFullGroupsReq(const LoadFullGroupsReq& from);

  inline LoadFullGroupsReq& operator=(const LoadFullGroupsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadFullGroupsReq(LoadFullGroupsReq&& from) noexcept
    : LoadFullGroupsReq() {
    *this = ::std::move(from);
  }

  inline LoadFullGroupsReq& operator=(LoadFullGroupsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadFullGroupsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadFullGroupsReq* internal_default_instance() {
    return reinterpret_cast<const LoadFullGroupsReq*>(
               &_LoadFullGroupsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(LoadFullGroupsReq* other);
  friend void swap(LoadFullGroupsReq& a, LoadFullGroupsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadFullGroupsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadFullGroupsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadFullGroupsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::std::string& groups(int index) const;
  ::std::string* mutable_groups(int index);
  void set_groups(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_groups(int index, ::std::string&& value);
  #endif
  void set_groups(int index, const char* value);
  void set_groups(int index, const char* value, size_t size);
  ::std::string* add_groups();
  void add_groups(const ::std::string& value);
  #if LANG_CXX11
  void add_groups(::std::string&& value);
  #endif
  void add_groups(const char* value);
  void add_groups(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groups() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groups();

  // @@protoc_insertion_point(class_scope:zproto.LoadFullGroupsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groups_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadFullGroupsReqImpl();
};
// -------------------------------------------------------------------

class LoadFullGroupsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LoadFullGroupsRsp) */ {
 public:
  LoadFullGroupsRsp();
  virtual ~LoadFullGroupsRsp();

  LoadFullGroupsRsp(const LoadFullGroupsRsp& from);

  inline LoadFullGroupsRsp& operator=(const LoadFullGroupsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadFullGroupsRsp(LoadFullGroupsRsp&& from) noexcept
    : LoadFullGroupsRsp() {
    *this = ::std::move(from);
  }

  inline LoadFullGroupsRsp& operator=(LoadFullGroupsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadFullGroupsRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadFullGroupsRsp* internal_default_instance() {
    return reinterpret_cast<const LoadFullGroupsRsp*>(
               &_LoadFullGroupsRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(LoadFullGroupsRsp* other);
  friend void swap(LoadFullGroupsRsp& a, LoadFullGroupsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadFullGroupsRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoadFullGroupsRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoadFullGroupsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zproto.Group groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::zproto::Group& groups(int index) const;
  ::zproto::Group* mutable_groups(int index);
  ::zproto::Group* add_groups();
  ::google::protobuf::RepeatedPtrField< ::zproto::Group >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::zproto::Group >&
      groups() const;

  // @@protoc_insertion_point(class_scope:zproto.LoadFullGroupsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zproto::Group > groups_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLoadFullGroupsRspImpl();
};
// -------------------------------------------------------------------

class InviteUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.InviteUserReq) */ {
 public:
  InviteUserReq();
  virtual ~InviteUserReq();

  InviteUserReq(const InviteUserReq& from);

  inline InviteUserReq& operator=(const InviteUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InviteUserReq(InviteUserReq&& from) noexcept
    : InviteUserReq() {
    *this = ::std::move(from);
  }

  inline InviteUserReq& operator=(InviteUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InviteUserReq* internal_default_instance() {
    return reinterpret_cast<const InviteUserReq*>(
               &_InviteUserReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(InviteUserReq* other);
  friend void swap(InviteUserReq& a, InviteUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InviteUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  InviteUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InviteUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string invited_user_id = 3;
  void clear_invited_user_id();
  static const int kInvitedUserIdFieldNumber = 3;
  const ::std::string& invited_user_id() const;
  void set_invited_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_invited_user_id(::std::string&& value);
  #endif
  void set_invited_user_id(const char* value);
  void set_invited_user_id(const char* value, size_t size);
  ::std::string* mutable_invited_user_id();
  ::std::string* release_invited_user_id();
  void set_allocated_invited_user_id(::std::string* invited_user_id);

  // int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.InviteUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr invited_user_id_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsInviteUserReqImpl();
};
// -------------------------------------------------------------------

class LeaveGroupReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LeaveGroupReq) */ {
 public:
  LeaveGroupReq();
  virtual ~LeaveGroupReq();

  LeaveGroupReq(const LeaveGroupReq& from);

  inline LeaveGroupReq& operator=(const LeaveGroupReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveGroupReq(LeaveGroupReq&& from) noexcept
    : LeaveGroupReq() {
    *this = ::std::move(from);
  }

  inline LeaveGroupReq& operator=(LeaveGroupReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveGroupReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveGroupReq* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupReq*>(
               &_LeaveGroupReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(LeaveGroupReq* other);
  friend void swap(LeaveGroupReq& a, LeaveGroupReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveGroupReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveGroupReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveGroupReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // int64 rid = 2;
  void clear_rid();
  static const int kRidFieldNumber = 2;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.LeaveGroupReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLeaveGroupReqImpl();
};
// -------------------------------------------------------------------

class LeaveAndDeleteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.LeaveAndDeleteReq) */ {
 public:
  LeaveAndDeleteReq();
  virtual ~LeaveAndDeleteReq();

  LeaveAndDeleteReq(const LeaveAndDeleteReq& from);

  inline LeaveAndDeleteReq& operator=(const LeaveAndDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeaveAndDeleteReq(LeaveAndDeleteReq&& from) noexcept
    : LeaveAndDeleteReq() {
    *this = ::std::move(from);
  }

  inline LeaveAndDeleteReq& operator=(LeaveAndDeleteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveAndDeleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveAndDeleteReq* internal_default_instance() {
    return reinterpret_cast<const LeaveAndDeleteReq*>(
               &_LeaveAndDeleteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LeaveAndDeleteReq* other);
  friend void swap(LeaveAndDeleteReq& a, LeaveAndDeleteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeaveAndDeleteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  LeaveAndDeleteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeaveAndDeleteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:zproto.LeaveAndDeleteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsLeaveAndDeleteReqImpl();
};
// -------------------------------------------------------------------

class KickUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.KickUserReq) */ {
 public:
  KickUserReq();
  virtual ~KickUserReq();

  KickUserReq(const KickUserReq& from);

  inline KickUserReq& operator=(const KickUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KickUserReq(KickUserReq&& from) noexcept
    : KickUserReq() {
    *this = ::std::move(from);
  }

  inline KickUserReq& operator=(KickUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KickUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KickUserReq* internal_default_instance() {
    return reinterpret_cast<const KickUserReq*>(
               &_KickUserReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(KickUserReq* other);
  friend void swap(KickUserReq& a, KickUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KickUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  KickUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KickUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // int64 rid = 4;
  void clear_rid();
  static const int kRidFieldNumber = 4;
  ::google::protobuf::int64 rid() const;
  void set_rid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:zproto.KickUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::int64 rid_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsKickUserReqImpl();
};
// -------------------------------------------------------------------

class JoinGroupByPeerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.JoinGroupByPeerReq) */ {
 public:
  JoinGroupByPeerReq();
  virtual ~JoinGroupByPeerReq();

  JoinGroupByPeerReq(const JoinGroupByPeerReq& from);

  inline JoinGroupByPeerReq& operator=(const JoinGroupByPeerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JoinGroupByPeerReq(JoinGroupByPeerReq&& from) noexcept
    : JoinGroupByPeerReq() {
    *this = ::std::move(from);
  }

  inline JoinGroupByPeerReq& operator=(JoinGroupByPeerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroupByPeerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinGroupByPeerReq* internal_default_instance() {
    return reinterpret_cast<const JoinGroupByPeerReq*>(
               &_JoinGroupByPeerReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(JoinGroupByPeerReq* other);
  friend void swap(JoinGroupByPeerReq& a, JoinGroupByPeerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JoinGroupByPeerReq* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroupByPeerReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroupByPeerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  #if LANG_CXX11
  void set_group_id(::std::string&& value);
  #endif
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);

  // @@protoc_insertion_point(class_scope:zproto.JoinGroupByPeerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_groups_2eproto::TableStruct;
  friend void ::protobuf_groups_2eproto::InitDefaultsJoinGroupByPeerReqImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroupMember

// string user_id = 1;
inline void GroupMember::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMember::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMember.user_id)
  return user_id_.GetNoArena();
}
inline void GroupMember::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMember.user_id)
}
#if LANG_CXX11
inline void GroupMember::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMember.user_id)
}
#endif
inline void GroupMember::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMember.user_id)
}
inline void GroupMember::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMember.user_id)
}
inline ::std::string* GroupMember::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMember.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMember::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.GroupMember.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMember::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMember.user_id)
}

// string inviter_uid = 2;
inline void GroupMember::clear_inviter_uid() {
  inviter_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMember::inviter_uid() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMember.inviter_uid)
  return inviter_uid_.GetNoArena();
}
inline void GroupMember::set_inviter_uid(const ::std::string& value) {
  
  inviter_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.GroupMember.inviter_uid)
}
#if LANG_CXX11
inline void GroupMember::set_inviter_uid(::std::string&& value) {
  
  inviter_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.GroupMember.inviter_uid)
}
#endif
inline void GroupMember::set_inviter_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  inviter_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.GroupMember.inviter_uid)
}
inline void GroupMember::set_inviter_uid(const char* value, size_t size) {
  
  inviter_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.GroupMember.inviter_uid)
}
inline ::std::string* GroupMember::mutable_inviter_uid() {
  
  // @@protoc_insertion_point(field_mutable:zproto.GroupMember.inviter_uid)
  return inviter_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMember::release_inviter_uid() {
  // @@protoc_insertion_point(field_release:zproto.GroupMember.inviter_uid)
  
  return inviter_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMember::set_allocated_inviter_uid(::std::string* inviter_uid) {
  if (inviter_uid != NULL) {
    
  } else {
    
  }
  inviter_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_uid);
  // @@protoc_insertion_point(field_set_allocated:zproto.GroupMember.inviter_uid)
}

// int64 date = 3;
inline void GroupMember::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupMember::date() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMember.date)
  return date_;
}
inline void GroupMember::set_date(::google::protobuf::int64 value) {
  
  date_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupMember.date)
}

// bool is_admin = 4;
inline void GroupMember::clear_is_admin() {
  is_admin_ = false;
}
inline bool GroupMember::is_admin() const {
  // @@protoc_insertion_point(field_get:zproto.GroupMember.is_admin)
  return is_admin_;
}
inline void GroupMember::set_is_admin(bool value) {
  
  is_admin_ = value;
  // @@protoc_insertion_point(field_set:zproto.GroupMember.is_admin)
}

// -------------------------------------------------------------------

// Group

// string group_id = 1;
inline void Group::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.Group.group_id)
  return group_id_.GetNoArena();
}
inline void Group::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Group.group_id)
}
#if LANG_CXX11
inline void Group::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.Group.group_id)
}
#endif
inline void Group::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Group.group_id)
}
inline void Group::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Group.group_id)
}
inline ::std::string* Group::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Group.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.Group.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.Group.group_id)
}

// string title = 2;
inline void Group::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::title() const {
  // @@protoc_insertion_point(field_get:zproto.Group.title)
  return title_.GetNoArena();
}
inline void Group::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Group.title)
}
#if LANG_CXX11
inline void Group::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.Group.title)
}
#endif
inline void Group::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Group.title)
}
inline void Group::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Group.title)
}
inline ::std::string* Group::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Group.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_title() {
  // @@protoc_insertion_point(field_release:zproto.Group.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:zproto.Group.title)
}

// string avatar = 3;
inline void Group::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Group::avatar() const {
  // @@protoc_insertion_point(field_get:zproto.Group.avatar)
  return avatar_.GetNoArena();
}
inline void Group::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.Group.avatar)
}
#if LANG_CXX11
inline void Group::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.Group.avatar)
}
#endif
inline void Group::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.Group.avatar)
}
inline void Group::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.Group.avatar)
}
inline ::std::string* Group::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:zproto.Group.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Group::release_avatar() {
  // @@protoc_insertion_point(field_release:zproto.Group.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Group::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:zproto.Group.avatar)
}

// repeated .zproto.GroupMember members = 4;
inline int Group::members_size() const {
  return members_.size();
}
inline void Group::clear_members() {
  members_.Clear();
}
inline const ::zproto::GroupMember& Group::members(int index) const {
  // @@protoc_insertion_point(field_get:zproto.Group.members)
  return members_.Get(index);
}
inline ::zproto::GroupMember* Group::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.Group.members)
  return members_.Mutable(index);
}
inline ::zproto::GroupMember* Group::add_members() {
  // @@protoc_insertion_point(field_add:zproto.Group.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >*
Group::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:zproto.Group.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >&
Group::members() const {
  // @@protoc_insertion_point(field_list:zproto.Group.members)
  return members_;
}

// -------------------------------------------------------------------

// CreateGroupReq

// string creator_user_id = 1;
inline void CreateGroupReq::clear_creator_user_id() {
  creator_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupReq::creator_user_id() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.creator_user_id)
  return creator_user_id_.GetNoArena();
}
inline void CreateGroupReq::set_creator_user_id(const ::std::string& value) {
  
  creator_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.creator_user_id)
}
#if LANG_CXX11
inline void CreateGroupReq::set_creator_user_id(::std::string&& value) {
  
  creator_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.CreateGroupReq.creator_user_id)
}
#endif
inline void CreateGroupReq::set_creator_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  creator_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.CreateGroupReq.creator_user_id)
}
inline void CreateGroupReq::set_creator_user_id(const char* value, size_t size) {
  
  creator_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.CreateGroupReq.creator_user_id)
}
inline ::std::string* CreateGroupReq::mutable_creator_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupReq.creator_user_id)
  return creator_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupReq::release_creator_user_id() {
  // @@protoc_insertion_point(field_release:zproto.CreateGroupReq.creator_user_id)
  
  return creator_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupReq::set_allocated_creator_user_id(::std::string* creator_user_id) {
  if (creator_user_id != NULL) {
    
  } else {
    
  }
  creator_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creator_user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.CreateGroupReq.creator_user_id)
}

// int64 client_group_id = 2;
inline void CreateGroupReq::clear_client_group_id() {
  client_group_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CreateGroupReq::client_group_id() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.client_group_id)
  return client_group_id_;
}
inline void CreateGroupReq::set_client_group_id(::google::protobuf::int64 value) {
  
  client_group_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.client_group_id)
}

// string title = 3;
inline void CreateGroupReq::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupReq::title() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.title)
  return title_.GetNoArena();
}
inline void CreateGroupReq::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.title)
}
#if LANG_CXX11
inline void CreateGroupReq::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.CreateGroupReq.title)
}
#endif
inline void CreateGroupReq::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.CreateGroupReq.title)
}
inline void CreateGroupReq::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.CreateGroupReq.title)
}
inline ::std::string* CreateGroupReq::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupReq.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupReq::release_title() {
  // @@protoc_insertion_point(field_release:zproto.CreateGroupReq.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupReq::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:zproto.CreateGroupReq.title)
}

// repeated string user_ids = 4;
inline int CreateGroupReq::user_ids_size() const {
  return user_ids_.size();
}
inline void CreateGroupReq::clear_user_ids() {
  user_ids_.Clear();
}
inline const ::std::string& CreateGroupReq::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupReq.user_ids)
  return user_ids_.Get(index);
}
inline ::std::string* CreateGroupReq::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupReq.user_ids)
  return user_ids_.Mutable(index);
}
inline void CreateGroupReq::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateGroupReq::set_user_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zproto.CreateGroupReq.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateGroupReq::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.CreateGroupReq.user_ids)
}
inline void CreateGroupReq::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.CreateGroupReq.user_ids)
}
inline ::std::string* CreateGroupReq::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:zproto.CreateGroupReq.user_ids)
  return user_ids_.Add();
}
inline void CreateGroupReq::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.CreateGroupReq.user_ids)
}
#if LANG_CXX11
inline void CreateGroupReq::add_user_ids(::std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zproto.CreateGroupReq.user_ids)
}
#endif
inline void CreateGroupReq::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.CreateGroupReq.user_ids)
}
inline void CreateGroupReq::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.CreateGroupReq.user_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateGroupReq::user_ids() const {
  // @@protoc_insertion_point(field_list:zproto.CreateGroupReq.user_ids)
  return user_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateGroupReq::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:zproto.CreateGroupReq.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// CreateGroupRsp

// uint64 seq = 1;
inline void CreateGroupRsp::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateGroupRsp::seq() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.seq)
  return seq_;
}
inline void CreateGroupRsp::set_seq(::google::protobuf::uint64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:zproto.CreateGroupRsp.seq)
}

// uint64 created = 2;
inline void CreateGroupRsp::clear_created() {
  created_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateGroupRsp::created() const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.created)
  return created_;
}
inline void CreateGroupRsp::set_created(::google::protobuf::uint64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:zproto.CreateGroupRsp.created)
}

// .zproto.Group group = 3;
inline bool CreateGroupRsp::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline void CreateGroupRsp::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
}
inline const ::zproto::Group& CreateGroupRsp::group() const {
  const ::zproto::Group* p = group_;
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.group)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Group*>(
      &::zproto::_Group_default_instance_);
}
inline ::zproto::Group* CreateGroupRsp::release_group() {
  // @@protoc_insertion_point(field_release:zproto.CreateGroupRsp.group)
  
  ::zproto::Group* temp = group_;
  group_ = NULL;
  return temp;
}
inline ::zproto::Group* CreateGroupRsp::mutable_group() {
  
  if (group_ == NULL) {
    group_ = new ::zproto::Group;
  }
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupRsp.group)
  return group_;
}
inline void CreateGroupRsp::set_allocated_group(::zproto::Group* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_;
  }
  if (group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:zproto.CreateGroupRsp.group)
}

// repeated string user_ids = 4;
inline int CreateGroupRsp::user_ids_size() const {
  return user_ids_.size();
}
inline void CreateGroupRsp::clear_user_ids() {
  user_ids_.Clear();
}
inline const ::std::string& CreateGroupRsp::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:zproto.CreateGroupRsp.user_ids)
  return user_ids_.Get(index);
}
inline ::std::string* CreateGroupRsp::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.CreateGroupRsp.user_ids)
  return user_ids_.Mutable(index);
}
inline void CreateGroupRsp::set_user_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.CreateGroupRsp.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateGroupRsp::set_user_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zproto.CreateGroupRsp.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateGroupRsp::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.CreateGroupRsp.user_ids)
}
inline void CreateGroupRsp::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.CreateGroupRsp.user_ids)
}
inline ::std::string* CreateGroupRsp::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:zproto.CreateGroupRsp.user_ids)
  return user_ids_.Add();
}
inline void CreateGroupRsp::add_user_ids(const ::std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.CreateGroupRsp.user_ids)
}
#if LANG_CXX11
inline void CreateGroupRsp::add_user_ids(::std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zproto.CreateGroupRsp.user_ids)
}
#endif
inline void CreateGroupRsp::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.CreateGroupRsp.user_ids)
}
inline void CreateGroupRsp::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.CreateGroupRsp.user_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateGroupRsp::user_ids() const {
  // @@protoc_insertion_point(field_list:zproto.CreateGroupRsp.user_ids)
  return user_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateGroupRsp::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:zproto.CreateGroupRsp.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// LoadMembersReq

// string group_id = 1;
inline void LoadMembersReq::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoadMembersReq::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersReq.group_id)
  return group_id_.GetNoArena();
}
inline void LoadMembersReq::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.LoadMembersReq.group_id)
}
#if LANG_CXX11
inline void LoadMembersReq::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.LoadMembersReq.group_id)
}
#endif
inline void LoadMembersReq::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.LoadMembersReq.group_id)
}
inline void LoadMembersReq::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.LoadMembersReq.group_id)
}
inline ::std::string* LoadMembersReq::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersReq.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadMembersReq::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.LoadMembersReq.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadMembersReq::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.LoadMembersReq.group_id)
}

// -------------------------------------------------------------------

// LoadMembersRsp

// repeated .zproto.GroupMember members = 1;
inline int LoadMembersRsp::members_size() const {
  return members_.size();
}
inline void LoadMembersRsp::clear_members() {
  members_.Clear();
}
inline const ::zproto::GroupMember& LoadMembersRsp::members(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadMembersRsp.members)
  return members_.Get(index);
}
inline ::zproto::GroupMember* LoadMembersRsp::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadMembersRsp.members)
  return members_.Mutable(index);
}
inline ::zproto::GroupMember* LoadMembersRsp::add_members() {
  // @@protoc_insertion_point(field_add:zproto.LoadMembersRsp.members)
  return members_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >*
LoadMembersRsp::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadMembersRsp.members)
  return &members_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::GroupMember >&
LoadMembersRsp::members() const {
  // @@protoc_insertion_point(field_list:zproto.LoadMembersRsp.members)
  return members_;
}

// -------------------------------------------------------------------

// LoadFullGroupsReq

// repeated string groups = 1;
inline int LoadFullGroupsReq::groups_size() const {
  return groups_.size();
}
inline void LoadFullGroupsReq::clear_groups() {
  groups_.Clear();
}
inline const ::std::string& LoadFullGroupsReq::groups(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadFullGroupsReq.groups)
  return groups_.Get(index);
}
inline ::std::string* LoadFullGroupsReq::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadFullGroupsReq.groups)
  return groups_.Mutable(index);
}
inline void LoadFullGroupsReq::set_groups(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zproto.LoadFullGroupsReq.groups)
  groups_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void LoadFullGroupsReq::set_groups(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:zproto.LoadFullGroupsReq.groups)
  groups_.Mutable(index)->assign(std::move(value));
}
#endif
inline void LoadFullGroupsReq::set_groups(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zproto.LoadFullGroupsReq.groups)
}
inline void LoadFullGroupsReq::set_groups(int index, const char* value, size_t size) {
  groups_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zproto.LoadFullGroupsReq.groups)
}
inline ::std::string* LoadFullGroupsReq::add_groups() {
  // @@protoc_insertion_point(field_add_mutable:zproto.LoadFullGroupsReq.groups)
  return groups_.Add();
}
inline void LoadFullGroupsReq::add_groups(const ::std::string& value) {
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zproto.LoadFullGroupsReq.groups)
}
#if LANG_CXX11
inline void LoadFullGroupsReq::add_groups(::std::string&& value) {
  groups_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zproto.LoadFullGroupsReq.groups)
}
#endif
inline void LoadFullGroupsReq::add_groups(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  groups_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zproto.LoadFullGroupsReq.groups)
}
inline void LoadFullGroupsReq::add_groups(const char* value, size_t size) {
  groups_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zproto.LoadFullGroupsReq.groups)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoadFullGroupsReq::groups() const {
  // @@protoc_insertion_point(field_list:zproto.LoadFullGroupsReq.groups)
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoadFullGroupsReq::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadFullGroupsReq.groups)
  return &groups_;
}

// -------------------------------------------------------------------

// LoadFullGroupsRsp

// repeated .zproto.Group groups = 1;
inline int LoadFullGroupsRsp::groups_size() const {
  return groups_.size();
}
inline void LoadFullGroupsRsp::clear_groups() {
  groups_.Clear();
}
inline const ::zproto::Group& LoadFullGroupsRsp::groups(int index) const {
  // @@protoc_insertion_point(field_get:zproto.LoadFullGroupsRsp.groups)
  return groups_.Get(index);
}
inline ::zproto::Group* LoadFullGroupsRsp::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:zproto.LoadFullGroupsRsp.groups)
  return groups_.Mutable(index);
}
inline ::zproto::Group* LoadFullGroupsRsp::add_groups() {
  // @@protoc_insertion_point(field_add:zproto.LoadFullGroupsRsp.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zproto::Group >*
LoadFullGroupsRsp::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:zproto.LoadFullGroupsRsp.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zproto::Group >&
LoadFullGroupsRsp::groups() const {
  // @@protoc_insertion_point(field_list:zproto.LoadFullGroupsRsp.groups)
  return groups_;
}

// -------------------------------------------------------------------

// InviteUserReq

// string group_id = 1;
inline void InviteUserReq::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteUserReq::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.group_id)
  return group_id_.GetNoArena();
}
inline void InviteUserReq::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.InviteUserReq.group_id)
}
#if LANG_CXX11
inline void InviteUserReq::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.InviteUserReq.group_id)
}
#endif
inline void InviteUserReq::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.InviteUserReq.group_id)
}
inline void InviteUserReq::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.InviteUserReq.group_id)
}
inline ::std::string* InviteUserReq::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.InviteUserReq.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteUserReq::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.InviteUserReq.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteUserReq::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.InviteUserReq.group_id)
}

// int64 rid = 4;
inline void InviteUserReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 InviteUserReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.rid)
  return rid_;
}
inline void InviteUserReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.InviteUserReq.rid)
}

// string invited_user_id = 3;
inline void InviteUserReq::clear_invited_user_id() {
  invited_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InviteUserReq::invited_user_id() const {
  // @@protoc_insertion_point(field_get:zproto.InviteUserReq.invited_user_id)
  return invited_user_id_.GetNoArena();
}
inline void InviteUserReq::set_invited_user_id(const ::std::string& value) {
  
  invited_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.InviteUserReq.invited_user_id)
}
#if LANG_CXX11
inline void InviteUserReq::set_invited_user_id(::std::string&& value) {
  
  invited_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.InviteUserReq.invited_user_id)
}
#endif
inline void InviteUserReq::set_invited_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  invited_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.InviteUserReq.invited_user_id)
}
inline void InviteUserReq::set_invited_user_id(const char* value, size_t size) {
  
  invited_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.InviteUserReq.invited_user_id)
}
inline ::std::string* InviteUserReq::mutable_invited_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.InviteUserReq.invited_user_id)
  return invited_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InviteUserReq::release_invited_user_id() {
  // @@protoc_insertion_point(field_release:zproto.InviteUserReq.invited_user_id)
  
  return invited_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InviteUserReq::set_allocated_invited_user_id(::std::string* invited_user_id) {
  if (invited_user_id != NULL) {
    
  } else {
    
  }
  invited_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invited_user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.InviteUserReq.invited_user_id)
}

// -------------------------------------------------------------------

// LeaveGroupReq

// string group_id = 1;
inline void LeaveGroupReq::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaveGroupReq::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.LeaveGroupReq.group_id)
  return group_id_.GetNoArena();
}
inline void LeaveGroupReq::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.LeaveGroupReq.group_id)
}
#if LANG_CXX11
inline void LeaveGroupReq::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.LeaveGroupReq.group_id)
}
#endif
inline void LeaveGroupReq::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.LeaveGroupReq.group_id)
}
inline void LeaveGroupReq::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.LeaveGroupReq.group_id)
}
inline ::std::string* LeaveGroupReq::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.LeaveGroupReq.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveGroupReq::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.LeaveGroupReq.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveGroupReq::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.LeaveGroupReq.group_id)
}

// int64 rid = 2;
inline void LeaveGroupReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LeaveGroupReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.LeaveGroupReq.rid)
  return rid_;
}
inline void LeaveGroupReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.LeaveGroupReq.rid)
}

// -------------------------------------------------------------------

// LeaveAndDeleteReq

// string group_id = 1;
inline void LeaveAndDeleteReq::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LeaveAndDeleteReq::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.LeaveAndDeleteReq.group_id)
  return group_id_.GetNoArena();
}
inline void LeaveAndDeleteReq::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.LeaveAndDeleteReq.group_id)
}
#if LANG_CXX11
inline void LeaveAndDeleteReq::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.LeaveAndDeleteReq.group_id)
}
#endif
inline void LeaveAndDeleteReq::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.LeaveAndDeleteReq.group_id)
}
inline void LeaveAndDeleteReq::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.LeaveAndDeleteReq.group_id)
}
inline ::std::string* LeaveAndDeleteReq::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.LeaveAndDeleteReq.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LeaveAndDeleteReq::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.LeaveAndDeleteReq.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LeaveAndDeleteReq::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.LeaveAndDeleteReq.group_id)
}

// -------------------------------------------------------------------

// KickUserReq

// string group_id = 1;
inline void KickUserReq::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickUserReq::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.group_id)
  return group_id_.GetNoArena();
}
inline void KickUserReq::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.KickUserReq.group_id)
}
#if LANG_CXX11
inline void KickUserReq::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.KickUserReq.group_id)
}
#endif
inline void KickUserReq::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.KickUserReq.group_id)
}
inline void KickUserReq::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.KickUserReq.group_id)
}
inline ::std::string* KickUserReq::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.KickUserReq.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickUserReq::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.KickUserReq.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickUserReq::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.KickUserReq.group_id)
}

// int64 rid = 4;
inline void KickUserReq::clear_rid() {
  rid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 KickUserReq::rid() const {
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.rid)
  return rid_;
}
inline void KickUserReq::set_rid(::google::protobuf::int64 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:zproto.KickUserReq.rid)
}

// string user_id = 3;
inline void KickUserReq::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KickUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.KickUserReq.user_id)
  return user_id_.GetNoArena();
}
inline void KickUserReq::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.KickUserReq.user_id)
}
#if LANG_CXX11
inline void KickUserReq::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.KickUserReq.user_id)
}
#endif
inline void KickUserReq::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.KickUserReq.user_id)
}
inline void KickUserReq::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.KickUserReq.user_id)
}
inline ::std::string* KickUserReq::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.KickUserReq.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KickUserReq::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.KickUserReq.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KickUserReq::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.KickUserReq.user_id)
}

// -------------------------------------------------------------------

// JoinGroupByPeerReq

// string group_id = 1;
inline void JoinGroupByPeerReq::clear_group_id() {
  group_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& JoinGroupByPeerReq::group_id() const {
  // @@protoc_insertion_point(field_get:zproto.JoinGroupByPeerReq.group_id)
  return group_id_.GetNoArena();
}
inline void JoinGroupByPeerReq::set_group_id(const ::std::string& value) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.JoinGroupByPeerReq.group_id)
}
#if LANG_CXX11
inline void JoinGroupByPeerReq::set_group_id(::std::string&& value) {
  
  group_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.JoinGroupByPeerReq.group_id)
}
#endif
inline void JoinGroupByPeerReq::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.JoinGroupByPeerReq.group_id)
}
inline void JoinGroupByPeerReq::set_group_id(const char* value, size_t size) {
  
  group_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.JoinGroupByPeerReq.group_id)
}
inline ::std::string* JoinGroupByPeerReq::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.JoinGroupByPeerReq.group_id)
  return group_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinGroupByPeerReq::release_group_id() {
  // @@protoc_insertion_point(field_release:zproto.JoinGroupByPeerReq.group_id)
  
  return group_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinGroupByPeerReq::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.JoinGroupByPeerReq.group_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_groups_2eproto__INCLUDED
