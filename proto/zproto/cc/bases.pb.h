// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bases.proto

#ifndef PROTOBUF_bases_2eproto__INCLUDED
#define PROTOBUF_bases_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "peers.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_bases_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEnumHelperImpl();
void InitDefaultsEnumHelper();
void InitDefaultsUserIDImpl();
void InitDefaultsUserID();
void InitDefaultsOnlineSessionStatusEntryImpl();
void InitDefaultsOnlineSessionStatusEntry();
void InitDefaultsUserToekenImpl();
void InitDefaultsUserToeken();
void InitDefaultsUserInfoImpl();
void InitDefaultsUserInfo();
void InitDefaultsOnlineUserImpl();
void InitDefaultsOnlineUser();
void InitDefaultsMessageContainerImpl();
void InitDefaultsMessageContainer();
void InitDefaultsDialogImpl();
void InitDefaultsDialog();
inline void InitDefaults() {
  InitDefaultsEnumHelper();
  InitDefaultsUserID();
  InitDefaultsOnlineSessionStatusEntry();
  InitDefaultsUserToeken();
  InitDefaultsUserInfo();
  InitDefaultsOnlineUser();
  InitDefaultsMessageContainer();
  InitDefaultsDialog();
}
}  // namespace protobuf_bases_2eproto
namespace zproto {
class Dialog;
class DialogDefaultTypeInternal;
extern DialogDefaultTypeInternal _Dialog_default_instance_;
class EnumHelper;
class EnumHelperDefaultTypeInternal;
extern EnumHelperDefaultTypeInternal _EnumHelper_default_instance_;
class MessageContainer;
class MessageContainerDefaultTypeInternal;
extern MessageContainerDefaultTypeInternal _MessageContainer_default_instance_;
class OnlineSessionStatusEntry;
class OnlineSessionStatusEntryDefaultTypeInternal;
extern OnlineSessionStatusEntryDefaultTypeInternal _OnlineSessionStatusEntry_default_instance_;
class OnlineUser;
class OnlineUserDefaultTypeInternal;
extern OnlineUserDefaultTypeInternal _OnlineUser_default_instance_;
class UserID;
class UserIDDefaultTypeInternal;
extern UserIDDefaultTypeInternal _UserID_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserToeken;
class UserToekenDefaultTypeInternal;
extern UserToekenDefaultTypeInternal _UserToeken_default_instance_;
}  // namespace zproto
namespace zproto {

enum EnumHelper_ListLoadMode {
  EnumHelper_ListLoadMode_ListLoadMode_NONE = 0,
  EnumHelper_ListLoadMode_FOWRARD = 1,
  EnumHelper_ListLoadMode_BACKWARD = 2,
  EnumHelper_ListLoadMode_BOTH = 3,
  EnumHelper_ListLoadMode_EnumHelper_ListLoadMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnumHelper_ListLoadMode_EnumHelper_ListLoadMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnumHelper_ListLoadMode_IsValid(int value);
const EnumHelper_ListLoadMode EnumHelper_ListLoadMode_ListLoadMode_MIN = EnumHelper_ListLoadMode_ListLoadMode_NONE;
const EnumHelper_ListLoadMode EnumHelper_ListLoadMode_ListLoadMode_MAX = EnumHelper_ListLoadMode_BOTH;
const int EnumHelper_ListLoadMode_ListLoadMode_ARRAYSIZE = EnumHelper_ListLoadMode_ListLoadMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumHelper_ListLoadMode_descriptor();
inline const ::std::string& EnumHelper_ListLoadMode_Name(EnumHelper_ListLoadMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumHelper_ListLoadMode_descriptor(), value);
}
inline bool EnumHelper_ListLoadMode_Parse(
    const ::std::string& name, EnumHelper_ListLoadMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumHelper_ListLoadMode>(
    EnumHelper_ListLoadMode_descriptor(), name, value);
}
enum EnumHelper_MessageState {
  EnumHelper_MessageState_MessageState_NONE = 0,
  EnumHelper_MessageState_SENT = 1,
  EnumHelper_MessageState_RECEIVED = 2,
  EnumHelper_MessageState_READ = 3,
  EnumHelper_MessageState_EnumHelper_MessageState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnumHelper_MessageState_EnumHelper_MessageState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnumHelper_MessageState_IsValid(int value);
const EnumHelper_MessageState EnumHelper_MessageState_MessageState_MIN = EnumHelper_MessageState_MessageState_NONE;
const EnumHelper_MessageState EnumHelper_MessageState_MessageState_MAX = EnumHelper_MessageState_READ;
const int EnumHelper_MessageState_MessageState_ARRAYSIZE = EnumHelper_MessageState_MessageState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumHelper_MessageState_descriptor();
inline const ::std::string& EnumHelper_MessageState_Name(EnumHelper_MessageState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumHelper_MessageState_descriptor(), value);
}
inline bool EnumHelper_MessageState_Parse(
    const ::std::string& name, EnumHelper_MessageState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumHelper_MessageState>(
    EnumHelper_MessageState_descriptor(), name, value);
}
enum EnumHelper_MessageType {
  EnumHelper_MessageType_MessageType_NONE = 0,
  EnumHelper_MessageType_TEXT = 1,
  EnumHelper_MessageType_AUDIO = 2,
  EnumHelper_MessageType_VIDEO = 3,
  EnumHelper_MessageType_EnumHelper_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EnumHelper_MessageType_EnumHelper_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EnumHelper_MessageType_IsValid(int value);
const EnumHelper_MessageType EnumHelper_MessageType_MessageType_MIN = EnumHelper_MessageType_MessageType_NONE;
const EnumHelper_MessageType EnumHelper_MessageType_MessageType_MAX = EnumHelper_MessageType_VIDEO;
const int EnumHelper_MessageType_MessageType_ARRAYSIZE = EnumHelper_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumHelper_MessageType_descriptor();
inline const ::std::string& EnumHelper_MessageType_Name(EnumHelper_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumHelper_MessageType_descriptor(), value);
}
inline bool EnumHelper_MessageType_Parse(
    const ::std::string& name, EnumHelper_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumHelper_MessageType>(
    EnumHelper_MessageType_descriptor(), name, value);
}
// ===================================================================

class EnumHelper : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.EnumHelper) */ {
 public:
  EnumHelper();
  virtual ~EnumHelper();

  EnumHelper(const EnumHelper& from);

  inline EnumHelper& operator=(const EnumHelper& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumHelper(EnumHelper&& from) noexcept
    : EnumHelper() {
    *this = ::std::move(from);
  }

  inline EnumHelper& operator=(EnumHelper&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumHelper& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumHelper* internal_default_instance() {
    return reinterpret_cast<const EnumHelper*>(
               &_EnumHelper_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EnumHelper* other);
  friend void swap(EnumHelper& a, EnumHelper& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumHelper* New() const PROTOBUF_FINAL { return New(NULL); }

  EnumHelper* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EnumHelper* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef EnumHelper_ListLoadMode ListLoadMode;
  static const ListLoadMode ListLoadMode_NONE =
    EnumHelper_ListLoadMode_ListLoadMode_NONE;
  static const ListLoadMode FOWRARD =
    EnumHelper_ListLoadMode_FOWRARD;
  static const ListLoadMode BACKWARD =
    EnumHelper_ListLoadMode_BACKWARD;
  static const ListLoadMode BOTH =
    EnumHelper_ListLoadMode_BOTH;
  static inline bool ListLoadMode_IsValid(int value) {
    return EnumHelper_ListLoadMode_IsValid(value);
  }
  static const ListLoadMode ListLoadMode_MIN =
    EnumHelper_ListLoadMode_ListLoadMode_MIN;
  static const ListLoadMode ListLoadMode_MAX =
    EnumHelper_ListLoadMode_ListLoadMode_MAX;
  static const int ListLoadMode_ARRAYSIZE =
    EnumHelper_ListLoadMode_ListLoadMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ListLoadMode_descriptor() {
    return EnumHelper_ListLoadMode_descriptor();
  }
  static inline const ::std::string& ListLoadMode_Name(ListLoadMode value) {
    return EnumHelper_ListLoadMode_Name(value);
  }
  static inline bool ListLoadMode_Parse(const ::std::string& name,
      ListLoadMode* value) {
    return EnumHelper_ListLoadMode_Parse(name, value);
  }

  typedef EnumHelper_MessageState MessageState;
  static const MessageState MessageState_NONE =
    EnumHelper_MessageState_MessageState_NONE;
  static const MessageState SENT =
    EnumHelper_MessageState_SENT;
  static const MessageState RECEIVED =
    EnumHelper_MessageState_RECEIVED;
  static const MessageState READ =
    EnumHelper_MessageState_READ;
  static inline bool MessageState_IsValid(int value) {
    return EnumHelper_MessageState_IsValid(value);
  }
  static const MessageState MessageState_MIN =
    EnumHelper_MessageState_MessageState_MIN;
  static const MessageState MessageState_MAX =
    EnumHelper_MessageState_MessageState_MAX;
  static const int MessageState_ARRAYSIZE =
    EnumHelper_MessageState_MessageState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageState_descriptor() {
    return EnumHelper_MessageState_descriptor();
  }
  static inline const ::std::string& MessageState_Name(MessageState value) {
    return EnumHelper_MessageState_Name(value);
  }
  static inline bool MessageState_Parse(const ::std::string& name,
      MessageState* value) {
    return EnumHelper_MessageState_Parse(name, value);
  }

  typedef EnumHelper_MessageType MessageType;
  static const MessageType MessageType_NONE =
    EnumHelper_MessageType_MessageType_NONE;
  static const MessageType TEXT =
    EnumHelper_MessageType_TEXT;
  static const MessageType AUDIO =
    EnumHelper_MessageType_AUDIO;
  static const MessageType VIDEO =
    EnumHelper_MessageType_VIDEO;
  static inline bool MessageType_IsValid(int value) {
    return EnumHelper_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    EnumHelper_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    EnumHelper_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    EnumHelper_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return EnumHelper_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return EnumHelper_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return EnumHelper_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zproto.EnumHelper)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsEnumHelperImpl();
};
// -------------------------------------------------------------------

class UserID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.UserID) */ {
 public:
  UserID();
  virtual ~UserID();

  UserID(const UserID& from);

  inline UserID& operator=(const UserID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserID(UserID&& from) noexcept
    : UserID() {
    *this = ::std::move(from);
  }

  inline UserID& operator=(UserID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserID* internal_default_instance() {
    return reinterpret_cast<const UserID*>(
               &_UserID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(UserID* other);
  friend void swap(UserID& a, UserID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserID* New() const PROTOBUF_FINAL { return New(NULL); }

  UserID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zproto.UserID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::uint32 app_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsUserIDImpl();
};
// -------------------------------------------------------------------

class OnlineSessionStatusEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.OnlineSessionStatusEntry) */ {
 public:
  OnlineSessionStatusEntry();
  virtual ~OnlineSessionStatusEntry();

  OnlineSessionStatusEntry(const OnlineSessionStatusEntry& from);

  inline OnlineSessionStatusEntry& operator=(const OnlineSessionStatusEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlineSessionStatusEntry(OnlineSessionStatusEntry&& from) noexcept
    : OnlineSessionStatusEntry() {
    *this = ::std::move(from);
  }

  inline OnlineSessionStatusEntry& operator=(OnlineSessionStatusEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineSessionStatusEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineSessionStatusEntry* internal_default_instance() {
    return reinterpret_cast<const OnlineSessionStatusEntry*>(
               &_OnlineSessionStatusEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(OnlineSessionStatusEntry* other);
  friend void swap(OnlineSessionStatusEntry& a, OnlineSessionStatusEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlineSessionStatusEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  OnlineSessionStatusEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnlineSessionStatusEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zproto.OnlineSessionStatusEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::uint32 app_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsOnlineSessionStatusEntryImpl();
};
// -------------------------------------------------------------------

class UserToeken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.UserToeken) */ {
 public:
  UserToeken();
  virtual ~UserToeken();

  UserToeken(const UserToeken& from);

  inline UserToeken& operator=(const UserToeken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserToeken(UserToeken&& from) noexcept
    : UserToeken() {
    *this = ::std::move(from);
  }

  inline UserToeken& operator=(UserToeken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserToeken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserToeken* internal_default_instance() {
    return reinterpret_cast<const UserToeken*>(
               &_UserToeken_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(UserToeken* other);
  friend void swap(UserToeken& a, UserToeken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserToeken* New() const PROTOBUF_FINAL { return New(NULL); }

  UserToeken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserToeken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_key = 1;
  void clear_app_key();
  static const int kAppKeyFieldNumber = 1;
  const ::std::string& app_key() const;
  void set_app_key(const ::std::string& value);
  #if LANG_CXX11
  void set_app_key(::std::string&& value);
  #endif
  void set_app_key(const char* value);
  void set_app_key(const char* value, size_t size);
  ::std::string* mutable_app_key();
  ::std::string* release_app_key();
  void set_allocated_app_key(::std::string* app_key);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string user_token = 3;
  void clear_user_token();
  static const int kUserTokenFieldNumber = 3;
  const ::std::string& user_token() const;
  void set_user_token(const ::std::string& value);
  #if LANG_CXX11
  void set_user_token(::std::string&& value);
  #endif
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  ::std::string* mutable_user_token();
  ::std::string* release_user_token();
  void set_allocated_user_token(::std::string* user_token);

  // @@protoc_insertion_point(class_scope:zproto.UserToeken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr app_key_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr user_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsUserToekenImpl();
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // string push_name = 3;
  void clear_push_name();
  static const int kPushNameFieldNumber = 3;
  const ::std::string& push_name() const;
  void set_push_name(const ::std::string& value);
  #if LANG_CXX11
  void set_push_name(::std::string&& value);
  #endif
  void set_push_name(const char* value);
  void set_push_name(const char* value, size_t size);
  ::std::string* mutable_push_name();
  ::std::string* release_push_name();
  void set_allocated_push_name(::std::string* push_name);

  // string avatar = 4;
  void clear_avatar();
  static const int kAvatarFieldNumber = 4;
  const ::std::string& avatar() const;
  void set_avatar(const ::std::string& value);
  #if LANG_CXX11
  void set_avatar(::std::string&& value);
  #endif
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  ::std::string* mutable_avatar();
  ::std::string* release_avatar();
  void set_allocated_avatar(::std::string* avatar);

  // uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zproto.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr push_name_;
  ::google::protobuf::internal::ArenaStringPtr avatar_;
  ::google::protobuf::uint32 app_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsUserInfoImpl();
};
// -------------------------------------------------------------------

class OnlineUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.OnlineUser) */ {
 public:
  OnlineUser();
  virtual ~OnlineUser();

  OnlineUser(const OnlineUser& from);

  inline OnlineUser& operator=(const OnlineUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnlineUser(OnlineUser&& from) noexcept
    : OnlineUser() {
    *this = ::std::move(from);
  }

  inline OnlineUser& operator=(OnlineUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlineUser* internal_default_instance() {
    return reinterpret_cast<const OnlineUser*>(
               &_OnlineUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(OnlineUser* other);
  friend void swap(OnlineUser& a, OnlineUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnlineUser* New() const PROTOBUF_FINAL { return New(NULL); }

  OnlineUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OnlineUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_user_id(::std::string&& value);
  #endif
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // uint32 app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  ::google::protobuf::uint32 app_id() const;
  void set_app_id(::google::protobuf::uint32 value);

  // uint32 server_id = 3;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // uint64 conn_id = 4;
  void clear_conn_id();
  static const int kConnIdFieldNumber = 4;
  ::google::protobuf::uint64 conn_id() const;
  void set_conn_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zproto.OnlineUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::uint32 app_id_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint64 conn_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsOnlineUserImpl();
};
// -------------------------------------------------------------------

class MessageContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.MessageContainer) */ {
 public:
  MessageContainer();
  virtual ~MessageContainer();

  MessageContainer(const MessageContainer& from);

  inline MessageContainer& operator=(const MessageContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageContainer(MessageContainer&& from) noexcept
    : MessageContainer() {
    *this = ::std::move(from);
  }

  inline MessageContainer& operator=(MessageContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageContainer* internal_default_instance() {
    return reinterpret_cast<const MessageContainer*>(
               &_MessageContainer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MessageContainer* other);
  friend void swap(MessageContainer& a, MessageContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageContainer* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageContainer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sender_user_id = 2;
  void clear_sender_user_id();
  static const int kSenderUserIdFieldNumber = 2;
  const ::std::string& sender_user_id() const;
  void set_sender_user_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_user_id(::std::string&& value);
  #endif
  void set_sender_user_id(const char* value);
  void set_sender_user_id(const char* value, size_t size);
  ::std::string* mutable_sender_user_id();
  ::std::string* release_sender_user_id();
  void set_allocated_sender_user_id(::std::string* sender_user_id);

  // bytes message_content = 8;
  void clear_message_content();
  static const int kMessageContentFieldNumber = 8;
  const ::std::string& message_content() const;
  void set_message_content(const ::std::string& value);
  #if LANG_CXX11
  void set_message_content(::std::string&& value);
  #endif
  void set_message_content(const char* value);
  void set_message_content(const void* value, size_t size);
  ::std::string* mutable_message_content();
  ::std::string* release_message_content();
  void set_allocated_message_content(::std::string* message_content);

  // bytes passthrough_data = 9;
  void clear_passthrough_data();
  static const int kPassthroughDataFieldNumber = 9;
  const ::std::string& passthrough_data() const;
  void set_passthrough_data(const ::std::string& value);
  #if LANG_CXX11
  void set_passthrough_data(::std::string&& value);
  #endif
  void set_passthrough_data(const char* value);
  void set_passthrough_data(const void* value, size_t size);
  ::std::string* mutable_passthrough_data();
  ::std::string* release_passthrough_data();
  void set_allocated_passthrough_data(::std::string* passthrough_data);

  // .zproto.Peer peer = 3;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 3;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* release_peer();
  ::zproto::Peer* mutable_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // uint64 message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  ::google::protobuf::uint64 message_id() const;
  void set_message_id(::google::protobuf::uint64 value);

  // uint64 client_message_id = 4;
  void clear_client_message_id();
  static const int kClientMessageIdFieldNumber = 4;
  ::google::protobuf::uint64 client_message_id() const;
  void set_client_message_id(::google::protobuf::uint64 value);

  // uint64 message_seq = 5;
  void clear_message_seq();
  static const int kMessageSeqFieldNumber = 5;
  ::google::protobuf::uint64 message_seq() const;
  void set_message_seq(::google::protobuf::uint64 value);

  // .zproto.EnumHelper.MessageState state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::zproto::EnumHelper_MessageState state() const;
  void set_state(::zproto::EnumHelper_MessageState value);

  // .zproto.EnumHelper.MessageType message_type = 7;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 7;
  ::zproto::EnumHelper_MessageType message_type() const;
  void set_message_type(::zproto::EnumHelper_MessageType value);

  // uint64 updated_at = 10;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 10;
  ::google::protobuf::uint64 updated_at() const;
  void set_updated_at(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:zproto.MessageContainer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sender_user_id_;
  ::google::protobuf::internal::ArenaStringPtr message_content_;
  ::google::protobuf::internal::ArenaStringPtr passthrough_data_;
  ::zproto::Peer* peer_;
  ::google::protobuf::uint64 message_id_;
  ::google::protobuf::uint64 client_message_id_;
  ::google::protobuf::uint64 message_seq_;
  int state_;
  int message_type_;
  ::google::protobuf::uint64 updated_at_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsMessageContainerImpl();
};
// -------------------------------------------------------------------

class Dialog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.Dialog) */ {
 public:
  Dialog();
  virtual ~Dialog();

  Dialog(const Dialog& from);

  inline Dialog& operator=(const Dialog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dialog(Dialog&& from) noexcept
    : Dialog() {
    *this = ::std::move(from);
  }

  inline Dialog& operator=(Dialog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dialog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dialog* internal_default_instance() {
    return reinterpret_cast<const Dialog*>(
               &_Dialog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Dialog* other);
  friend void swap(Dialog& a, Dialog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dialog* New() const PROTOBUF_FINAL { return New(NULL); }

  Dialog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Dialog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zproto.Peer peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::zproto::Peer& peer() const;
  ::zproto::Peer* release_peer();
  ::zproto::Peer* mutable_peer();
  void set_allocated_peer(::zproto::Peer* peer);

  // @@protoc_insertion_point(class_scope:zproto.Dialog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zproto::Peer* peer_;
  mutable int _cached_size_;
  friend struct ::protobuf_bases_2eproto::TableStruct;
  friend void ::protobuf_bases_2eproto::InitDefaultsDialogImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnumHelper

// -------------------------------------------------------------------

// UserID

// uint32 app_id = 1;
inline void UserID::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 UserID::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserID.app_id)
  return app_id_;
}
inline void UserID::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.UserID.app_id)
}

// string user_id = 2;
inline void UserID::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserID::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserID.user_id)
  return user_id_.GetNoArena();
}
inline void UserID::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserID.user_id)
}
#if LANG_CXX11
inline void UserID::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserID.user_id)
}
#endif
inline void UserID::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserID.user_id)
}
inline void UserID::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserID.user_id)
}
inline ::std::string* UserID::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserID.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserID::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.UserID.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserID::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserID.user_id)
}

// -------------------------------------------------------------------

// OnlineSessionStatusEntry

// uint32 app_id = 1;
inline void OnlineSessionStatusEntry::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 OnlineSessionStatusEntry::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.OnlineSessionStatusEntry.app_id)
  return app_id_;
}
inline void OnlineSessionStatusEntry::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.OnlineSessionStatusEntry.app_id)
}

// string user_id = 2;
inline void OnlineSessionStatusEntry::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnlineSessionStatusEntry::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.OnlineSessionStatusEntry.user_id)
  return user_id_.GetNoArena();
}
inline void OnlineSessionStatusEntry::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.OnlineSessionStatusEntry.user_id)
}
#if LANG_CXX11
inline void OnlineSessionStatusEntry::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.OnlineSessionStatusEntry.user_id)
}
#endif
inline void OnlineSessionStatusEntry::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.OnlineSessionStatusEntry.user_id)
}
inline void OnlineSessionStatusEntry::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.OnlineSessionStatusEntry.user_id)
}
inline ::std::string* OnlineSessionStatusEntry::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.OnlineSessionStatusEntry.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineSessionStatusEntry::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.OnlineSessionStatusEntry.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineSessionStatusEntry::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.OnlineSessionStatusEntry.user_id)
}

// -------------------------------------------------------------------

// UserToeken

// string app_key = 1;
inline void UserToeken::clear_app_key() {
  app_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserToeken::app_key() const {
  // @@protoc_insertion_point(field_get:zproto.UserToeken.app_key)
  return app_key_.GetNoArena();
}
inline void UserToeken::set_app_key(const ::std::string& value) {
  
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserToeken.app_key)
}
#if LANG_CXX11
inline void UserToeken::set_app_key(::std::string&& value) {
  
  app_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserToeken.app_key)
}
#endif
inline void UserToeken::set_app_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserToeken.app_key)
}
inline void UserToeken::set_app_key(const char* value, size_t size) {
  
  app_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserToeken.app_key)
}
inline ::std::string* UserToeken::mutable_app_key() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserToeken.app_key)
  return app_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserToeken::release_app_key() {
  // @@protoc_insertion_point(field_release:zproto.UserToeken.app_key)
  
  return app_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserToeken::set_allocated_app_key(::std::string* app_key) {
  if (app_key != NULL) {
    
  } else {
    
  }
  app_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_key);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserToeken.app_key)
}

// string user_id = 2;
inline void UserToeken::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserToeken::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserToeken.user_id)
  return user_id_.GetNoArena();
}
inline void UserToeken::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserToeken.user_id)
}
#if LANG_CXX11
inline void UserToeken::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserToeken.user_id)
}
#endif
inline void UserToeken::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserToeken.user_id)
}
inline void UserToeken::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserToeken.user_id)
}
inline ::std::string* UserToeken::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserToeken.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserToeken::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.UserToeken.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserToeken::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserToeken.user_id)
}

// string user_token = 3;
inline void UserToeken::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserToeken::user_token() const {
  // @@protoc_insertion_point(field_get:zproto.UserToeken.user_token)
  return user_token_.GetNoArena();
}
inline void UserToeken::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserToeken.user_token)
}
#if LANG_CXX11
inline void UserToeken::set_user_token(::std::string&& value) {
  
  user_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserToeken.user_token)
}
#endif
inline void UserToeken::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserToeken.user_token)
}
inline void UserToeken::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserToeken.user_token)
}
inline ::std::string* UserToeken::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserToeken.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserToeken::release_user_token() {
  // @@protoc_insertion_point(field_release:zproto.UserToeken.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserToeken::set_allocated_user_token(::std::string* user_token) {
  if (user_token != NULL) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserToeken.user_token)
}

// -------------------------------------------------------------------

// UserInfo

// uint32 app_id = 1;
inline void UserInfo::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 UserInfo::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserInfo.app_id)
  return app_id_;
}
inline void UserInfo::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.UserInfo.app_id)
}

// string user_id = 2;
inline void UserInfo::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.UserInfo.user_id)
  return user_id_.GetNoArena();
}
inline void UserInfo::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserInfo.user_id)
}
#if LANG_CXX11
inline void UserInfo::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserInfo.user_id)
}
#endif
inline void UserInfo::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserInfo.user_id)
}
inline void UserInfo::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserInfo.user_id)
}
inline ::std::string* UserInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserInfo.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.UserInfo.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserInfo.user_id)
}

// string push_name = 3;
inline void UserInfo::clear_push_name() {
  push_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::push_name() const {
  // @@protoc_insertion_point(field_get:zproto.UserInfo.push_name)
  return push_name_.GetNoArena();
}
inline void UserInfo::set_push_name(const ::std::string& value) {
  
  push_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserInfo.push_name)
}
#if LANG_CXX11
inline void UserInfo::set_push_name(::std::string&& value) {
  
  push_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserInfo.push_name)
}
#endif
inline void UserInfo::set_push_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  push_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserInfo.push_name)
}
inline void UserInfo::set_push_name(const char* value, size_t size) {
  
  push_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserInfo.push_name)
}
inline ::std::string* UserInfo::mutable_push_name() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserInfo.push_name)
  return push_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_push_name() {
  // @@protoc_insertion_point(field_release:zproto.UserInfo.push_name)
  
  return push_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_push_name(::std::string* push_name) {
  if (push_name != NULL) {
    
  } else {
    
  }
  push_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_name);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserInfo.push_name)
}

// string avatar = 4;
inline void UserInfo::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::avatar() const {
  // @@protoc_insertion_point(field_get:zproto.UserInfo.avatar)
  return avatar_.GetNoArena();
}
inline void UserInfo::set_avatar(const ::std::string& value) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.UserInfo.avatar)
}
#if LANG_CXX11
inline void UserInfo::set_avatar(::std::string&& value) {
  
  avatar_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.UserInfo.avatar)
}
#endif
inline void UserInfo::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.UserInfo.avatar)
}
inline void UserInfo::set_avatar(const char* value, size_t size) {
  
  avatar_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.UserInfo.avatar)
}
inline ::std::string* UserInfo::mutable_avatar() {
  
  // @@protoc_insertion_point(field_mutable:zproto.UserInfo.avatar)
  return avatar_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:zproto.UserInfo.avatar)
  
  return avatar_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_avatar(::std::string* avatar) {
  if (avatar != NULL) {
    
  } else {
    
  }
  avatar_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:zproto.UserInfo.avatar)
}

// -------------------------------------------------------------------

// OnlineUser

// uint32 app_id = 1;
inline void OnlineUser::clear_app_id() {
  app_id_ = 0u;
}
inline ::google::protobuf::uint32 OnlineUser::app_id() const {
  // @@protoc_insertion_point(field_get:zproto.OnlineUser.app_id)
  return app_id_;
}
inline void OnlineUser::set_app_id(::google::protobuf::uint32 value) {
  
  app_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.OnlineUser.app_id)
}

// string user_id = 2;
inline void OnlineUser::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OnlineUser::user_id() const {
  // @@protoc_insertion_point(field_get:zproto.OnlineUser.user_id)
  return user_id_.GetNoArena();
}
inline void OnlineUser::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.OnlineUser.user_id)
}
#if LANG_CXX11
inline void OnlineUser::set_user_id(::std::string&& value) {
  
  user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.OnlineUser.user_id)
}
#endif
inline void OnlineUser::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.OnlineUser.user_id)
}
inline void OnlineUser::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.OnlineUser.user_id)
}
inline ::std::string* OnlineUser::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.OnlineUser.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OnlineUser::release_user_id() {
  // @@protoc_insertion_point(field_release:zproto.OnlineUser.user_id)
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OnlineUser::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.OnlineUser.user_id)
}

// uint32 server_id = 3;
inline void OnlineUser::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 OnlineUser::server_id() const {
  // @@protoc_insertion_point(field_get:zproto.OnlineUser.server_id)
  return server_id_;
}
inline void OnlineUser::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.OnlineUser.server_id)
}

// uint64 conn_id = 4;
inline void OnlineUser::clear_conn_id() {
  conn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 OnlineUser::conn_id() const {
  // @@protoc_insertion_point(field_get:zproto.OnlineUser.conn_id)
  return conn_id_;
}
inline void OnlineUser::set_conn_id(::google::protobuf::uint64 value) {
  
  conn_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.OnlineUser.conn_id)
}

// -------------------------------------------------------------------

// MessageContainer

// uint64 message_id = 1;
inline void MessageContainer::clear_message_id() {
  message_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MessageContainer::message_id() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.message_id)
  return message_id_;
}
inline void MessageContainer::set_message_id(::google::protobuf::uint64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.message_id)
}

// string sender_user_id = 2;
inline void MessageContainer::clear_sender_user_id() {
  sender_user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContainer::sender_user_id() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.sender_user_id)
  return sender_user_id_.GetNoArena();
}
inline void MessageContainer::set_sender_user_id(const ::std::string& value) {
  
  sender_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.sender_user_id)
}
#if LANG_CXX11
inline void MessageContainer::set_sender_user_id(::std::string&& value) {
  
  sender_user_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.MessageContainer.sender_user_id)
}
#endif
inline void MessageContainer::set_sender_user_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.MessageContainer.sender_user_id)
}
inline void MessageContainer::set_sender_user_id(const char* value, size_t size) {
  
  sender_user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.MessageContainer.sender_user_id)
}
inline ::std::string* MessageContainer::mutable_sender_user_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.MessageContainer.sender_user_id)
  return sender_user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContainer::release_sender_user_id() {
  // @@protoc_insertion_point(field_release:zproto.MessageContainer.sender_user_id)
  
  return sender_user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContainer::set_allocated_sender_user_id(::std::string* sender_user_id) {
  if (sender_user_id != NULL) {
    
  } else {
    
  }
  sender_user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_user_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageContainer.sender_user_id)
}

// .zproto.Peer peer = 3;
inline bool MessageContainer::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline const ::zproto::Peer& MessageContainer::peer() const {
  const ::zproto::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Peer*>(
      &::zproto::_Peer_default_instance_);
}
inline ::zproto::Peer* MessageContainer::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.MessageContainer.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::zproto::Peer* MessageContainer::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.MessageContainer.peer)
  return peer_;
}
inline void MessageContainer::set_allocated_peer(::zproto::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(peer_);
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageContainer.peer)
}

// uint64 client_message_id = 4;
inline void MessageContainer::clear_client_message_id() {
  client_message_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MessageContainer::client_message_id() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.client_message_id)
  return client_message_id_;
}
inline void MessageContainer::set_client_message_id(::google::protobuf::uint64 value) {
  
  client_message_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.client_message_id)
}

// uint64 message_seq = 5;
inline void MessageContainer::clear_message_seq() {
  message_seq_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MessageContainer::message_seq() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.message_seq)
  return message_seq_;
}
inline void MessageContainer::set_message_seq(::google::protobuf::uint64 value) {
  
  message_seq_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.message_seq)
}

// .zproto.EnumHelper.MessageState state = 6;
inline void MessageContainer::clear_state() {
  state_ = 0;
}
inline ::zproto::EnumHelper_MessageState MessageContainer::state() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.state)
  return static_cast< ::zproto::EnumHelper_MessageState >(state_);
}
inline void MessageContainer::set_state(::zproto::EnumHelper_MessageState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.state)
}

// .zproto.EnumHelper.MessageType message_type = 7;
inline void MessageContainer::clear_message_type() {
  message_type_ = 0;
}
inline ::zproto::EnumHelper_MessageType MessageContainer::message_type() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.message_type)
  return static_cast< ::zproto::EnumHelper_MessageType >(message_type_);
}
inline void MessageContainer::set_message_type(::zproto::EnumHelper_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.message_type)
}

// bytes message_content = 8;
inline void MessageContainer::clear_message_content() {
  message_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContainer::message_content() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.message_content)
  return message_content_.GetNoArena();
}
inline void MessageContainer::set_message_content(const ::std::string& value) {
  
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.message_content)
}
#if LANG_CXX11
inline void MessageContainer::set_message_content(::std::string&& value) {
  
  message_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.MessageContainer.message_content)
}
#endif
inline void MessageContainer::set_message_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.MessageContainer.message_content)
}
inline void MessageContainer::set_message_content(const void* value, size_t size) {
  
  message_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.MessageContainer.message_content)
}
inline ::std::string* MessageContainer::mutable_message_content() {
  
  // @@protoc_insertion_point(field_mutable:zproto.MessageContainer.message_content)
  return message_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContainer::release_message_content() {
  // @@protoc_insertion_point(field_release:zproto.MessageContainer.message_content)
  
  return message_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContainer::set_allocated_message_content(::std::string* message_content) {
  if (message_content != NULL) {
    
  } else {
    
  }
  message_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_content);
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageContainer.message_content)
}

// bytes passthrough_data = 9;
inline void MessageContainer::clear_passthrough_data() {
  passthrough_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageContainer::passthrough_data() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.passthrough_data)
  return passthrough_data_.GetNoArena();
}
inline void MessageContainer::set_passthrough_data(const ::std::string& value) {
  
  passthrough_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.passthrough_data)
}
#if LANG_CXX11
inline void MessageContainer::set_passthrough_data(::std::string&& value) {
  
  passthrough_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.MessageContainer.passthrough_data)
}
#endif
inline void MessageContainer::set_passthrough_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  passthrough_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.MessageContainer.passthrough_data)
}
inline void MessageContainer::set_passthrough_data(const void* value, size_t size) {
  
  passthrough_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.MessageContainer.passthrough_data)
}
inline ::std::string* MessageContainer::mutable_passthrough_data() {
  
  // @@protoc_insertion_point(field_mutable:zproto.MessageContainer.passthrough_data)
  return passthrough_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageContainer::release_passthrough_data() {
  // @@protoc_insertion_point(field_release:zproto.MessageContainer.passthrough_data)
  
  return passthrough_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageContainer::set_allocated_passthrough_data(::std::string* passthrough_data) {
  if (passthrough_data != NULL) {
    
  } else {
    
  }
  passthrough_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passthrough_data);
  // @@protoc_insertion_point(field_set_allocated:zproto.MessageContainer.passthrough_data)
}

// uint64 updated_at = 10;
inline void MessageContainer::clear_updated_at() {
  updated_at_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MessageContainer::updated_at() const {
  // @@protoc_insertion_point(field_get:zproto.MessageContainer.updated_at)
  return updated_at_;
}
inline void MessageContainer::set_updated_at(::google::protobuf::uint64 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:zproto.MessageContainer.updated_at)
}

// -------------------------------------------------------------------

// Dialog

// .zproto.Peer peer = 1;
inline bool Dialog::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline const ::zproto::Peer& Dialog::peer() const {
  const ::zproto::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:zproto.Dialog.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::zproto::Peer*>(
      &::zproto::_Peer_default_instance_);
}
inline ::zproto::Peer* Dialog::release_peer() {
  // @@protoc_insertion_point(field_release:zproto.Dialog.peer)
  
  ::zproto::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::zproto::Peer* Dialog::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::zproto::Peer;
  }
  // @@protoc_insertion_point(field_mutable:zproto.Dialog.peer)
  return peer_;
}
inline void Dialog::set_allocated_peer(::zproto::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(peer_);
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:zproto.Dialog.peer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zproto::EnumHelper_ListLoadMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zproto::EnumHelper_ListLoadMode>() {
  return ::zproto::EnumHelper_ListLoadMode_descriptor();
}
template <> struct is_proto_enum< ::zproto::EnumHelper_MessageState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zproto::EnumHelper_MessageState>() {
  return ::zproto::EnumHelper_MessageState_descriptor();
}
template <> struct is_proto_enum< ::zproto::EnumHelper_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zproto::EnumHelper_MessageType>() {
  return ::zproto::EnumHelper_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bases_2eproto__INCLUDED
