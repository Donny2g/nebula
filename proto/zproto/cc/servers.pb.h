// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servers.proto

#ifndef PROTOBUF_servers_2eproto__INCLUDED
#define PROTOBUF_servers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_servers_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsServerAuthReqImpl();
void InitDefaultsServerAuthReq();
void InitDefaultsServerAuthRspImpl();
void InitDefaultsServerAuthRsp();
inline void InitDefaults() {
  InitDefaultsServerAuthReq();
  InitDefaultsServerAuthRsp();
}
}  // namespace protobuf_servers_2eproto
namespace zproto {
class ServerAuthReq;
class ServerAuthReqDefaultTypeInternal;
extern ServerAuthReqDefaultTypeInternal _ServerAuthReq_default_instance_;
class ServerAuthRsp;
class ServerAuthRspDefaultTypeInternal;
extern ServerAuthRspDefaultTypeInternal _ServerAuthRsp_default_instance_;
}  // namespace zproto
namespace zproto {

// ===================================================================

class ServerAuthReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ServerAuthReq) */ {
 public:
  ServerAuthReq();
  virtual ~ServerAuthReq();

  ServerAuthReq(const ServerAuthReq& from);

  inline ServerAuthReq& operator=(const ServerAuthReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerAuthReq(ServerAuthReq&& from) noexcept
    : ServerAuthReq() {
    *this = ::std::move(from);
  }

  inline ServerAuthReq& operator=(ServerAuthReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAuthReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerAuthReq* internal_default_instance() {
    return reinterpret_cast<const ServerAuthReq*>(
               &_ServerAuthReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ServerAuthReq* other);
  friend void swap(ServerAuthReq& a, ServerAuthReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerAuthReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerAuthReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerAuthReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string server_name = 2;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // uint32 server_id = 1;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zproto.ServerAuthReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::uint32 server_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_servers_2eproto::TableStruct;
  friend void ::protobuf_servers_2eproto::InitDefaultsServerAuthReqImpl();
};
// -------------------------------------------------------------------

class ServerAuthRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ServerAuthRsp) */ {
 public:
  ServerAuthRsp();
  virtual ~ServerAuthRsp();

  ServerAuthRsp(const ServerAuthRsp& from);

  inline ServerAuthRsp& operator=(const ServerAuthRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerAuthRsp(ServerAuthRsp&& from) noexcept
    : ServerAuthRsp() {
    *this = ::std::move(from);
  }

  inline ServerAuthRsp& operator=(ServerAuthRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerAuthRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerAuthRsp* internal_default_instance() {
    return reinterpret_cast<const ServerAuthRsp*>(
               &_ServerAuthRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServerAuthRsp* other);
  friend void swap(ServerAuthRsp& a, ServerAuthRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerAuthRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerAuthRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerAuthRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zproto.ServerAuthRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_servers_2eproto::TableStruct;
  friend void ::protobuf_servers_2eproto::InitDefaultsServerAuthRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerAuthReq

// uint32 server_id = 1;
inline void ServerAuthReq::clear_server_id() {
  server_id_ = 0u;
}
inline ::google::protobuf::uint32 ServerAuthReq::server_id() const {
  // @@protoc_insertion_point(field_get:zproto.ServerAuthReq.server_id)
  return server_id_;
}
inline void ServerAuthReq::set_server_id(::google::protobuf::uint32 value) {
  
  server_id_ = value;
  // @@protoc_insertion_point(field_set:zproto.ServerAuthReq.server_id)
}

// string server_name = 2;
inline void ServerAuthReq::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerAuthReq::server_name() const {
  // @@protoc_insertion_point(field_get:zproto.ServerAuthReq.server_name)
  return server_name_.GetNoArena();
}
inline void ServerAuthReq::set_server_name(const ::std::string& value) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ServerAuthReq.server_name)
}
#if LANG_CXX11
inline void ServerAuthReq::set_server_name(::std::string&& value) {
  
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zproto.ServerAuthReq.server_name)
}
#endif
inline void ServerAuthReq::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ServerAuthReq.server_name)
}
inline void ServerAuthReq::set_server_name(const char* value, size_t size) {
  
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ServerAuthReq.server_name)
}
inline ::std::string* ServerAuthReq::mutable_server_name() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ServerAuthReq.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerAuthReq::release_server_name() {
  // @@protoc_insertion_point(field_release:zproto.ServerAuthReq.server_name)
  
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerAuthReq::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    
  } else {
    
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:zproto.ServerAuthReq.server_name)
}

// -------------------------------------------------------------------

// ServerAuthRsp

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_servers_2eproto__INCLUDED
